<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="2023-12-14" climode="true" execEnv="linux_x86_64" hasViols="true" id="1702408747633" lang="en_US" machine="59bc733ee7c9" prjModule="bddedf55f3c941dd" project="" tag="${scontrol_branch}-linux_x86_64" time="2023-12-14T15:08:46+00:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2022.2.0" user="build">
   <TestConfig machine="59bc733ee7c9" name="C++ Coding Rules" pseudoUrl="user://cpp-coding-rules-v1.0.0.properties" user="build" />
   <Authors>
      <Author id="dev1" name="build" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.6.1.20221116" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.6.1.20221118B1887" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.6.1.20221118B1887" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.6.1.20221108B3828" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.6.1.20221118B1887" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="build" hash="1442722041" locRef="1" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/HomeInterface.cpp" totLns="58" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" />
         <Loc auth="build" hash="716930667" locRef="2" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/HomeCoreLogic.cpp" totLns="74" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" />
         <Loc auth="build" hash="-363852788" locRef="3" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/Launch.cpp" totLns="21" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" />
         <Loc auth="build" hash="-980710421" locRef="4" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/Event.cpp" totLns="116" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/Event.cpp" />
         <Loc auth="build" hash="2063078945" locRef="5" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/Log.cpp" totLns="40" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/Log.cpp" />
         <Loc auth="build" hash="-793331324" locRef="6" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/HomeInterface.h" totLns="37" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" />
         <Loc auth="build" hash="1501198083" locRef="7" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/HomeCoreLogic.h" totLns="42" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" />
         <Loc auth="build" hash="-1697377942" locRef="8" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/Launch.h" totLns="29" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/Launch.h" />
         <Loc auth="build" hash="-426736768" locRef="9" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/Event.h" totLns="47" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/Event.h" />
         <Loc auth="build" hash="224884445" locRef="10" projId="bddedf55f3c941dd" projPath="/bddedf55f3c941dd" project="bddedf55f3c941dd" resProjPath="binderPlugin/src/Log.h" totLns="33" uri="file://59bc733ee7c9/home/ubuntu/teamcity/work/bddedf55f3c941dd/binderPlugin/src/Log.h" />
      </Locations>
   </Scope>
   
  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:20">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="10" checkedLns="497" id="bddedf55f3c941dd" name="bddedf55f3c941dd" qfixErrs="0" suppErrs="0" totErrs="478" totFiles="10" totLns="497" />
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="AUTOSAR C++14 Coding Guidelines" name="AUTOSAR" rules="557" total="0">
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-6-1 #error directive shall not be used" name="AUTOSAR-A16_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" name="AUTOSAR-A7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" name="AUTOSAR-M8_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" name="AUTOSAR-A6_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" name="AUTOSAR-A25_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" name="AUTOSAR-M15_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" name="AUTOSAR-M15_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-2 NULL shall not be thrown explicitly" name="AUTOSAR-M15_1_2" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined" name="AUTOSAR-A12_7_1" rules="1" total="4" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" name="AUTOSAR-M5_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" name="AUTOSAR-M5_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" name="AUTOSAR-M5_3_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-3 The unary &amp; operator shall not be overloaded" name="AUTOSAR-M5_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" name="AUTOSAR-A13_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-3 User-defined conversion operators should not be used" name="AUTOSAR-A13_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-6-1 The goto statement shall not be used" name="AUTOSAR-A6_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio> shall not be used" name="AUTOSAR-M27_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-1 If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented" name="AUTOSAR-A13_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" name="AUTOSAR-A5_16_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" name="AUTOSAR-A13_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" name="AUTOSAR-A13_5_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" name="AUTOSAR-A23_0_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them" name="AUTOSAR-A15_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" name="AUTOSAR-A23_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" name="AUTOSAR-M4_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" name="AUTOSAR-A15_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" name="AUTOSAR-M5_17_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-2 An exception object shall not be a pointer" name="AUTOSAR-A15_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" name="AUTOSAR-M4_5_1" rules="1" total="0" />
               <Category authTot="12;" authUrg="0;" desc="AUTOSAR M0-1-10 Every defined function should be called at least once" name="AUTOSAR-M0_1_10" rules="2" total="12" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" name="AUTOSAR-A15_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-7-1 The #pragma directive shall not be used" name="AUTOSAR-A16_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-1 A non-POD type should be defined as class" name="AUTOSAR-A11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" name="AUTOSAR-A11_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" name="AUTOSAR-A7_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &amp;" name="AUTOSAR-M8_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" name="AUTOSAR-A7_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" name="AUTOSAR-A7_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" name="AUTOSAR-M8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-1 The character \ shall not occur as a last character of a C++ comment" name="AUTOSAR-A2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" name="AUTOSAR-M3_9_1" rules="1" total="0" />
               <Category authTot="115;" authUrg="31;" desc="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags" name="AUTOSAR-A2_7_3" rules="2" total="115" />
               <Category authTot="18;" authUrg="0;" desc="AUTOSAR A2-7-2 Sections of code shall not be &quot;commented out&quot;" name="AUTOSAR-A2_7_2" rules="1" total="18" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" name="AUTOSAR-M12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" name="AUTOSAR-M3_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" name="AUTOSAR-A1_1_1" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-1-2 Functions shall not be declared at block scope" name="AUTOSAR-M3_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" name="AUTOSAR-A6_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" name="AUTOSAR-M15_0_3" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" name="AUTOSAR-M5_2_6" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" name="AUTOSAR-M5_2_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" name="AUTOSAR-M14_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-2-1 The macro offsetof shall not be used" name="AUTOSAR-M18_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" name="AUTOSAR-M5_2_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" name="AUTOSAR-A5_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" name="AUTOSAR-M5_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" name="AUTOSAR-M5_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-3 Do statements should not be used" name="AUTOSAR-A6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" name="AUTOSAR-A6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-5 Hexadecimal constants should be upper case" name="AUTOSAR-A2_13_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" name="AUTOSAR-A2_13_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" name="AUTOSAR-A6_5_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-3 Type wchar_t shall not be used" name="AUTOSAR-A2_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" name="AUTOSAR-A2_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" name="AUTOSAR-A2_13_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" name="AUTOSAR-A2_13_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" name="AUTOSAR-M5_0_15" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" name="AUTOSAR-M5_0_16" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="AUTOSAR-M5_0_17" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-18 >, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" name="AUTOSAR-M5_0_18" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" name="AUTOSAR-A15_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" name="AUTOSAR-M9_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-10 If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" name="AUTOSAR-M5_0_10" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" name="AUTOSAR-M9_3_3" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" name="AUTOSAR-M5_0_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" name="AUTOSAR-M5_0_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" name="AUTOSAR-M5_0_14" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" name="AUTOSAR-M7_1_2" rules="3" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-4 The register keyword shall not be used" name="AUTOSAR-A7_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" name="AUTOSAR-A7_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" name="AUTOSAR-A7_1_2" rules="2" total="0" />
               <Category authTot="22;" authUrg="0;" desc="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" name="AUTOSAR-A7_1_1" rules="1" total="22" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" name="AUTOSAR-A2_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-11-1 Volatile keyword shall not be used" name="AUTOSAR-A2_11_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-5-1 Unions shall not be used" name="AUTOSAR-A9_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" name="AUTOSAR-M6_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" name="AUTOSAR-M5_0_20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" name="AUTOSAR-M5_0_21" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" name="AUTOSAR-A18_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-3 The library &lt;clocale> (locale.h) and the setlocale function shall not be used" name="AUTOSAR-A18_0_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" name="AUTOSAR-M0_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" name="AUTOSAR-A18_0_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-3-1 A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded" name="AUTOSAR-A13_3_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" name="AUTOSAR-A5_5_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" name="AUTOSAR-M14_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-2 Type long double shall not be used" name="AUTOSAR-A0_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" name="AUTOSAR-A0_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-7-1 An integer expression shall not lead to data loss" name="AUTOSAR-A4_7_1" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" name="AUTOSAR-A7_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" name="AUTOSAR-A7_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" name="AUTOSAR-A20_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" name="AUTOSAR-A20_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" name="AUTOSAR-A20_8_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" name="AUTOSAR-A20_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" name="AUTOSAR-A20_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" name="AUTOSAR-A20_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" name="AUTOSAR-A20_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" name="AUTOSAR-A9_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" name="AUTOSAR-M6_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" name="AUTOSAR-M6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" name="AUTOSAR-A12_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="AUTOSAR-A2_10_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" name="AUTOSAR-M6_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" name="AUTOSAR-A6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A6_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" name="AUTOSAR-A9_6_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" name="AUTOSAR-A12_4_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-11 &quot;operator new&quot; and &quot;operator delete&quot; shall be defined together" name="AUTOSAR-A18_5_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" name="AUTOSAR-A8_4_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" name="AUTOSAR-A18_5_10" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" name="AUTOSAR-A8_4_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" name="AUTOSAR-A8_4_13" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" name="AUTOSAR-A8_4_12" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-2 The std::vector&lt;bool> specialization shall not be used" name="AUTOSAR-A18_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-1 C-style arrays shall not be used" name="AUTOSAR-A18_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-1 An assignment operator shall return a reference to &quot;this&quot;" name="AUTOSAR-A13_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" name="AUTOSAR-A18_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library &lt;cstdlib> shall not be used" name="AUTOSAR-M18_0_3" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;" name="AUTOSAR-A13_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" name="AUTOSAR-A18_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" name="AUTOSAR-A18_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-3 A relational operator shall return a boolean value" name="AUTOSAR-A13_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-5 The unbounded functions of library &lt;cstring> shall not be used" name="AUTOSAR-M18_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-4 The time handling functions of library &lt;ctime> shall not be used" name="AUTOSAR-M18_0_4" rules="3" total="0" />
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" name="AUTOSAR-M2_10_1" rules="1" total="5" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-14-1 The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects" name="AUTOSAR-M5_14_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" name="AUTOSAR-A7_1_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" name="AUTOSAR-A7_1_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" name="AUTOSAR-A7_1_7" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-6 The typedef specifier shall not be used" name="AUTOSAR-A7_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" name="AUTOSAR-A7_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" name="AUTOSAR-A18_9_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-1 The std::bind shall not be used" name="AUTOSAR-A18_9_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" name="AUTOSAR-A18_9_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&amp;" name="AUTOSAR-A18_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" name="AUTOSAR-A14_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" name="AUTOSAR-A3_8_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-2 The # and ## operators should not be used" name="AUTOSAR-M16_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" name="AUTOSAR-M16_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" name="AUTOSAR-M7_3_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="1;" desc="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" name="AUTOSAR-M7_3_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-1 The ', &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive" name="AUTOSAR-A16_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" name="AUTOSAR-A8_5_1" rules="1" total="0" />
               <Category authTot="10;" authUrg="0;" desc="AUTOSAR M7-3-4 Using-directives shall not be used" name="AUTOSAR-M7_3_4" rules="1" total="10" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-0 All memory shall be initialized before it is read" name="AUTOSAR-A8_5_0" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" name="AUTOSAR-M7_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" name="AUTOSAR-A8_5_3" rules="1" total="0" />
               <Category authTot="10;" authUrg="5;" desc="AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" name="AUTOSAR-M7_3_6" rules="1" total="10" />
               <Category authTot="1;" authUrg="1;" desc="AUTOSAR A16-2-2 There shall be no unused include directives" name="AUTOSAR-A16_2_2" rules="1" total="1" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" name="AUTOSAR-A8_5_2" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" name="AUTOSAR-A17_0_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-3-1 Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class" name="AUTOSAR-A9_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" name="AUTOSAR-M6_5_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" name="AUTOSAR-M6_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" name="AUTOSAR-M3_4_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" name="AUTOSAR-M6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" name="AUTOSAR-M6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" name="AUTOSAR-M6_5_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" name="AUTOSAR-A13_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" name="AUTOSAR-M0_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-10-1 NULL shall not be used as an integer value" name="AUTOSAR-M4_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" name="AUTOSAR-A13_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" name="AUTOSAR-A5_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-2 Null pointers shall not be dereferenced" name="AUTOSAR-A5_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" name="AUTOSAR-A5_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-7-1 The signal handling facilities of &lt;csignal> shall not be used" name="AUTOSAR-M18_7_1" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" name="AUTOSAR-A26_5_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" name="AUTOSAR-M4_10_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" name="AUTOSAR-A2_10_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-2 Random number engines shall not be default-initialized" name="AUTOSAR-A26_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" name="AUTOSAR-A2_10_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" name="AUTOSAR-A2_10_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, >, >=" name="AUTOSAR-A4_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" name="AUTOSAR-A15_5_3" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" name="AUTOSAR-A15_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" name="AUTOSAR-A15_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" name="AUTOSAR-M9_6_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" name="AUTOSAR-M5_2_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" name="AUTOSAR-M5_2_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-11 The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" name="AUTOSAR-M5_2_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" name="AUTOSAR-A14_7_2" rules="1" total="0" />
               <Category authTot="50;" authUrg="0;" desc="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" name="AUTOSAR-A3_9_1" rules="1" total="50" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-2-3 Include guards shall be provided" name="AUTOSAR-M16_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" name="AUTOSAR-A3_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" name="AUTOSAR-A3_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" name="AUTOSAR-A3_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;" name="AUTOSAR-A3_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" name="AUTOSAR-A3_1_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" name="AUTOSAR-A3_1_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" name="AUTOSAR-A2_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" name="AUTOSAR-M10_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-1 Classes should not be derived from virtual bases" name="AUTOSAR-M10_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" name="AUTOSAR-M8_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" name="AUTOSAR-M6_4_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" name="AUTOSAR-M6_4_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" name="AUTOSAR-A17_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" name="AUTOSAR-A21_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="AUTOSAR-M10_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" name="AUTOSAR-M6_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" name="AUTOSAR-A25_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" name="AUTOSAR-M6_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="AUTOSAR-M6_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" name="AUTOSAR-M6_4_3" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-7-1 The character sequence /* shall not be used within a C-style comment" name="AUTOSAR-M2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" name="AUTOSAR-M6_4_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" name="AUTOSAR-M0_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" name="AUTOSAR-A5_2_5" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults" name="AUTOSAR-M0_3_1" rules="10" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-2-4 reinterpret_cast shall not be used" name="AUTOSAR-A5_2_4" rules="1" total="1" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" name="AUTOSAR-A5_2_3" rules="1" total="1" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A5-2-2 Traditional C-style casts shall not be used" name="AUTOSAR-A5_2_2" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" name="AUTOSAR-A15_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" name="AUTOSAR-M17_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" name="AUTOSAR-A15_4_3" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" name="AUTOSAR-A15_4_4" rules="1" total="6" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" name="AUTOSAR-M17_0_3" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" name="AUTOSAR-A15_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(&lt;true condition>), then it shall not exit with an exception" name="AUTOSAR-A15_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" name="AUTOSAR-A10_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" name="AUTOSAR-M17_0_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" name="AUTOSAR-M16_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-3-1 Friend declarations shall not be used" name="AUTOSAR-A11_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" name="AUTOSAR-M16_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" name="AUTOSAR-M7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" name="AUTOSAR-M7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" name="AUTOSAR-M3_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" name="AUTOSAR-M10_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" name="AUTOSAR-M8_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" name="AUTOSAR-A12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" name="AUTOSAR-A12_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" name="AUTOSAR-M15_3_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" name="AUTOSAR-M15_3_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" name="AUTOSAR-A12_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" name="AUTOSAR-M15_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" name="AUTOSAR-M3_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" name="AUTOSAR-A17_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" name="AUTOSAR-M3_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" name="AUTOSAR-A5_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-2 The One Definition Rule shall not be violated" name="AUTOSAR-M3_2_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A5-2-6 The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" name="AUTOSAR-A5_2_6" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" name="AUTOSAR-A12_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" name="AUTOSAR-M15_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" name="AUTOSAR-A12_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" name="AUTOSAR-M15_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M11-0-1 Member data in non-POD class types shall be private" name="AUTOSAR-M11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" name="AUTOSAR-A5_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" name="AUTOSAR-A5_1_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" name="AUTOSAR-A4_10_1" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" name="AUTOSAR-A5_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" name="AUTOSAR-A5_1_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" name="AUTOSAR-A5_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" name="AUTOSAR-A15_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" name="AUTOSAR-A15_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" name="AUTOSAR-A15_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used" name="AUTOSAR-M2_13_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" name="AUTOSAR-A15_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" name="AUTOSAR-A7_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-4 Literal suffixes shall be upper case" name="AUTOSAR-M2_13_4" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M2-13-3 A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" name="AUTOSAR-M2_13_3" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" name="AUTOSAR-M5_19_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" name="AUTOSAR-A14_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" name="AUTOSAR-A10_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" name="AUTOSAR-A8_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-6 &quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded" name="AUTOSAR-A8_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" name="AUTOSAR-M16_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-5 &quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from" name="AUTOSAR-A8_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-8 Output parameters shall not be used" name="AUTOSAR-A8_4_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-1 All usage of assembler shall be documented" name="AUTOSAR-M7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-7 &quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value" name="AUTOSAR-A8_4_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" name="AUTOSAR-M16_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class" name="AUTOSAR-A12_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" name="AUTOSAR-A3_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="AUTOSAR-A8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" name="AUTOSAR-M16_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" name="AUTOSAR-M7_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &amp;" name="AUTOSAR-A12_8_7" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" name="AUTOSAR-A3_3_1" rules="2" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" name="AUTOSAR-A8_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" name="AUTOSAR-M7_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-4-1 The asm declaration shall not be used" name="AUTOSAR-A7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-1 Trigraphs shall not be used" name="AUTOSAR-A2_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-2 Digraphs shall not be used" name="AUTOSAR-A2_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-9 &quot;in-out&quot; parameters declared as T &amp; shall be modified" name="AUTOSAR-A8_4_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" name="AUTOSAR-M16_0_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" name="AUTOSAR-M16_0_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" name="AUTOSAR-M16_0_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" name="AUTOSAR-A12_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" name="AUTOSAR-M10_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" name="AUTOSAR-M6_6_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" name="AUTOSAR-M3_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" name="AUTOSAR-M6_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" name="AUTOSAR-M6_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" name="AUTOSAR-A12_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" name="AUTOSAR-A12_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" name="AUTOSAR-A12_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" name="AUTOSAR-A5_1_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" name="AUTOSAR-A12_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" name="AUTOSAR-A5_1_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M19-3-1 The error indicator errno shall not be used" name="AUTOSAR-M19_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A12_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" name="AUTOSAR-A5_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" name="AUTOSAR-M5_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" name="AUTOSAR-A0_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" name="AUTOSAR-A5_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_8" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" name="AUTOSAR-A0_1_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" name="AUTOSAR-A5_0_1" rules="7" total="0" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" name="AUTOSAR-M0_1_4" rules="1" total="4" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" name="AUTOSAR-A0_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-2 A project shall not contain infeasible paths" name="AUTOSAR-M0_1_2" rules="29" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" name="AUTOSAR-M5_0_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-4 C-style strings shall not be used" name="AUTOSAR-A27_0_4" rules="4" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-3 A project shall not contain unused variables" name="AUTOSAR-M0_1_3" rules="3" total="1" />
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" name="AUTOSAR-M5_0_4" rules="1" total="5" />
               <Category authTot="2;" authUrg="1;" desc="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" name="AUTOSAR-A18_5_2" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" name="AUTOSAR-A27_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" name="AUTOSAR-M5_0_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" name="AUTOSAR-A18_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" name="AUTOSAR-A27_0_2" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" name="AUTOSAR-A5_0_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-1 A project shall not contain unreachable code" name="AUTOSAR-M0_1_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" name="AUTOSAR-M5_0_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" name="AUTOSAR-A13_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-1 Inputs from independent components shall be validated" name="AUTOSAR-A27_0_1" rules="8" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" name="AUTOSAR-A0_1_4" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" name="AUTOSAR-A0_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-6 There should be no unused type declarations" name="AUTOSAR-A0_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" name="AUTOSAR-A10_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" name="AUTOSAR-A15_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" name="AUTOSAR-A7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-18-1 The comma operator shall not be used" name="AUTOSAR-M5_18_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" name="AUTOSAR-A7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-4 If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined" name="AUTOSAR-A18_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" name="AUTOSAR-A18_5_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" name="AUTOSAR-M5_0_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" name="AUTOSAR-A18_5_5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" name="AUTOSAR-M5_0_2" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" name="AUTOSAR-A10_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" name="AUTOSAR-A18_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" name="AUTOSAR-A10_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" name="AUTOSAR-A10_3_3" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" name="AUTOSAR-M0_1_8" rules="2" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard" name="AUTOSAR-A18_5_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-9 There shall be no dead code" name="AUTOSAR-M0_1_9" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="125" total="0">
               <Category authTot="0;" authUrg="0;" desc="Possible Bugs" name="BD-PB" rules="69" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Resources" name="BD-RES" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Security" name="BD-SECURITY" rules="19" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="15" total="0" />
            </Category>
            <Category authTot="172;" authUrg="11;" desc="MISRA C++ 2008" name="MISRA2008" rules="337" total="172" />
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_1" desc="Avoid unused values" id="AUTOSAR-A0_1_1-a" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="AUTOSAR-A0_1_2-a" origId="CODSTA-CPP-58" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_3" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-A0_1_3-a" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A0_1_4" desc="Eliminate unused parameters" id="AUTOSAR-A0_1_4-a" origId="OPT-03" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_5" desc="There shall be no unused named parameters in virtual functions" id="AUTOSAR-A0_1_5-a" origId="OPT-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_6" desc="A project shall not contain unused type declarations" id="AUTOSAR-A0_1_6-a" origId="GLOBAL-UNUSEDTYPE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_2" desc="Type long double shall not be used" id="AUTOSAR-A0_4_2-a" origId="PORT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_4" desc="Validate values passed to library functions" id="AUTOSAR-A0_4_4-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_1_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="AUTOSAR-A10_1_1-a" origId="OOP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Never redefine an inherited nonvirtual function" id="AUTOSAR-A10_2_1-a" origId="OOP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="AUTOSAR-A10_2_1-b" origId="OOP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="AUTOSAR-A10_3_1-a" origId="CODSTA-MCPP-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_2" desc="Each overriding virtual function shall be declared with the override or final specifier" id="AUTOSAR-A10_3_2-a" origId="CODSTA-MCPP-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_3" desc="Do not introduce virtual functions in a final class" id="AUTOSAR-A10_3_3-a" origId="CODSTA-MCPP-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_5" desc="A user-defined assignment operator shall not be virtual" id="AUTOSAR-A10_3_5-a" origId="OOP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_1" desc="A non-POD type should be defined as class" id="AUTOSAR-A11_0_1-a" origId="OOP-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_2" desc="Structs should only contain public data members and should not be a base or inherit" id="AUTOSAR-A11_0_2-a" origId="OOP-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_3_1" desc="Friend declarations shall not be used except declarations of comparison operators" id="AUTOSAR-A11_3_1-a" origId="OOP-11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_2" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="AUTOSAR-A12_0_2-a" origId="CODSTA-CPP-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="AUTOSAR-A12_1_1-a" origId="PB-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All member variables should be initialized in constructor" id="AUTOSAR-A12_1_1-b" origId="INIT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_2" desc="Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" id="AUTOSAR-A12_1_2-a" origId="INIT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_4" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="AUTOSAR-A12_1_4-a" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_5" desc="Use delegating constructors to reduce code duplication" id="AUTOSAR-A12_1_5-a" origId="CODSTA-CPP-106" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_6" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="AUTOSAR-A12_1_6-a" origId="CODSTA-MCPP-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_4_1" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="AUTOSAR-A12_4_1-a" origId="OOP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A12_4_2" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="AUTOSAR-A12_4_2-a" origId="CODSTA-MCPP-23" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-A12_7_1" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="AUTOSAR-A12_7_1-a" origId="CODSTA-CPP-105" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_1" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="AUTOSAR-A12_8_1-a" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_2" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="AUTOSAR-A12_8_2-a" origId="CODSTA-MCPP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_3" desc="Do not rely on the value of a moved-from object" id="AUTOSAR-A12_8_3-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_4" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A12_8_4-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_5" desc="Check for assignment to self in operator=" id="AUTOSAR-A12_8_5-a" origId="OOP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_6" desc="Avoid public copy constructors and assignment operators in base classes" id="AUTOSAR-A12_8_6-a" origId="OOP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="AUTOSAR-A12_8_7-a" origId="CODSTA-MCPP-19" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_2" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="AUTOSAR-A13_1_2-a" origId="NAMING-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_3" desc="User defined literals operators shall only perform conversion of passed parameters" id="AUTOSAR-A13_1_3-a" origId="CODSTA-MCPP-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_1" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="AUTOSAR-A13_2_1-a" origId="CODSTA-CPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="AUTOSAR-A13_2_2-a" origId="CODSTA-CPP-102" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_3" desc="A relational operator shall return a boolean value" id="AUTOSAR-A13_2_3-a" origId="CODSTA-CPP-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_3_1" desc="Avoid Overloading on Forwarding References" id="AUTOSAR-A13_3_1-a" origId="CODSTA-MCPP-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_1" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="AUTOSAR-A13_5_1-a" origId="HICPP-13_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_2" desc="User-conversion cast operators should be made explicit" id="AUTOSAR-A13_5_2-a" origId="CODSTA-MCPP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_3" desc="Do not use user-defined conversion functions" id="AUTOSAR-A13_5_3-a" origId="CODSTA-CPP-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_4" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="AUTOSAR-A13_5_4-b" origId="CODSTA-CPP-86" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions" id="AUTOSAR-A13_5_5-a" origId="CODSTA-CPP-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="AUTOSAR-A13_5_5-b" origId="CODSTA-CPP-107_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_6_1" desc="Digit sequences separators ' shall only be used consistently" id="AUTOSAR-A13_6_1-a" origId="CODSTA-MCPP-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_1" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="AUTOSAR-A14_5_1-a" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_7_2" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="AUTOSAR-A14_7_2-a" origId="TEMPL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_8_2" desc="Overloaded function templates shall not be explicitly specialized" id="AUTOSAR-A14_8_2-a" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_0_2" desc="Ensure resources are freed" id="AUTOSAR-A15_0_2-a" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_1" desc="Only use instances of std::exception for exceptions" id="AUTOSAR-A15_1_1-a" origId="HICPP-15_1_1-a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_2" desc="An exception object should not have pointer type" id="AUTOSAR-A15_1_2-a" origId="EXCEPT-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_4" desc="Ensure resources are freed" id="AUTOSAR-A15_1_4-a" origId="BD-RES-LEAKS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_5" desc="Do not throw an exception across execution boundaries" id="AUTOSAR-A15_1_5-a" origId="PORT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_2_1-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_2_1-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_2" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_3_2-a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_3_3-a" origId="EXCEPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_4" desc="Avoid using catch-all exception handlers" id="AUTOSAR-A15_3_4-a" origId="EXCEPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_5" desc="A class type exception shall always be caught by reference" id="AUTOSAR-A15_3_5-a" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_1" desc="Do not use throw exception specifications" id="AUTOSAR-A15_4_1-a" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="AUTOSAR-A15_4_2-a" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_3" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="AUTOSAR-A15_4_3-a" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-A15_4_4" desc="Declare functions 'noexcept' if they will not emit exceptions" id="AUTOSAR-A15_4_4-a" origId="CODSTA-MCPP-09" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_5" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="AUTOSAR-A15_4_5-a" origId="EXCEPT-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_1-a" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="AUTOSAR-A15_5_1-b" origId="EXCEPT-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_2-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-b" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_3-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_3-b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Do not throw from within destructor" id="AUTOSAR-A15_5_3-c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_5_3-d" origId="EXCEPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-A15_5_3-e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-A15_5_3-f" origId="EXCEPT-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_5_3-g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="AUTOSAR-A15_5_3-h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_5_3-i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Always catch exceptions" id="AUTOSAR-A15_5_3-j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Properly define exit handlers" id="AUTOSAR-A15_5_3-k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_1" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="AUTOSAR-A16_2_1-a" origId="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="AUTOSAR-A16_2_2" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="AUTOSAR-A16_2_2-a" origId="OPT-41" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_6_1" desc="#error directive shall not be used" id="AUTOSAR-A16_6_1-a" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_7_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_7_1-a" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define nor #undef identifier 'defined'" id="AUTOSAR-A17_0_1-a" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="AUTOSAR-A17_0_1-b" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="AUTOSAR-A17_0_1-c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not redefine reserved words" id="AUTOSAR-A17_0_1-d" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="AUTOSAR-A17_0_1-e" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_1_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-A17_1_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_6_1" desc="Do not modify the standard namespaces 'std' and 'posix'" id="AUTOSAR-A17_6_1-a" origId="CODSTA-CPP-95" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_1" desc="The C library shall not be used" id="AUTOSAR-A18_0_1-a" origId="CODSTA-CPP-59" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-a" origId="MISRA2004-20_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-b" origId="MISRA2004-20_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not include &lt;locale.h> header" id="AUTOSAR-A18_0_3-a" origId="MISRA-121_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not use 'setlocale' function" id="AUTOSAR-A18_0_3-b" origId="MISRA-121_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_1" desc="C-style arrays shall not be used" id="AUTOSAR-A18_1_1-a" origId="STL-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_2" desc="Avoid using vector&lt;bool>" id="AUTOSAR-A18_1_2-a" origId="STL-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_3" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A18_1_3-a" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_4" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="AUTOSAR-A18_1_4-a" origId="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_6" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="AUTOSAR-A18_1_6-a" origId="CODSTA-MCPP-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_1" desc="Do not use calloc, malloc, realloc and free functions" id="AUTOSAR-A18_5_1-a" origId="MRM-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="AUTOSAR-A18_5_10-a" origId="MRM-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="AUTOSAR-A18_5_10-b" origId="MRM-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete if you write operator new" id="AUTOSAR-A18_5_11-a" origId="MRM-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete[] if you write operator new[]" id="AUTOSAR-A18_5_11-b" origId="MRM-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="1;" cat="AUTOSAR-A18_5_2" desc="Dynamic heap memory allocation shall not be used" id="AUTOSAR-A18_5_2-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="AUTOSAR-A18_5_3-a" origId="MRM-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="AUTOSAR-A18_5_3-b" origId="MRM-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Properly deallocate dynamically allocated resources" id="AUTOSAR-A18_5_3-c" origId="BD-RES-BADDEALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_4" desc="Define both sized and unsized versions of operator delete" id="AUTOSAR-A18_5_4-a" origId="CODSTA-MCPP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="AUTOSAR-A18_5_5-a" origId="MRM-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Freed memory shouldn't be accessed under any circumstances" id="AUTOSAR-A18_5_5-b" origId="MRM-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Properly define new handlers" id="AUTOSAR-A18_5_5-c" origId="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_8" desc="Use allocation by declaration rather than by new or malloc" id="AUTOSAR-A18_5_8-a" origId="MRM-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_9" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="AUTOSAR-A18_5_9-a" origId="MRM-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A18_9_1-a" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_2" desc="The 'std::forward' function shall be used to forward universal references" id="AUTOSAR-A18_9_2-a" origId="CODSTA-MCPP-13_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_3" desc="Do not use std::move on objects declared with the const or const &amp; type" id="AUTOSAR-A18_9_3-a" origId="CODSTA-MCPP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_4" desc="Do not subsequently use the argument to std::forward" id="AUTOSAR-A18_9_4-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A1_1_1-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="AUTOSAR-A1_1_1-b" origId="MRM-40_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="AUTOSAR-A1_1_1-c" origId="MRM-40_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The C library shall not be used" id="AUTOSAR-A1_1_1-d" origId="CODSTA-CPP-59" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A1_1_1-e" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="AUTOSAR-A1_1_1-f" origId="CODSTA-MCPP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A1_1_1-g" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'random_shuffle' identifier should not be used" id="AUTOSAR-A1_1_1-h" origId="CODSTA-MCPP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="AUTOSAR-A1_1_1-i" origId="CODSTA-MCPP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'set_unexpected' identifier should not be used" id="AUTOSAR-A1_1_1-j" origId="CODSTA-MCPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use throw exception specifications" id="AUTOSAR-A1_1_1-k" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_1" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="AUTOSAR-A20_8_1-a" origId="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_2" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_2-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_3" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_3-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_4" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="AUTOSAR-A20_8_4-a" origId="CODSTA-MCPP-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_5" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="AUTOSAR-A20_8_5-a" origId="CODSTA-MCPP-16_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_6" desc="Prefer 'std::make_shared' to the direct use of new" id="AUTOSAR-A20_8_6-a" origId="CODSTA-MCPP-16_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_7" desc="Avoid cyclic shared_ptr references" id="AUTOSAR-A20_8_7-a" origId="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A21_8_1" desc="Do not pass incorrect values to ctype.h library functions" id="AUTOSAR-A21_8_1-a" origId="BD-API-CTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="AUTOSAR-A23_0_1-a" origId="CODSTA-MCPP-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Do not modify container while iterating over it" id="AUTOSAR-A23_0_2-a" origId="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="AUTOSAR-A23_0_2-b" origId="BD-CO-STRMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_1_1" desc="Make predicates const pure functions" id="AUTOSAR-A25_1_1-a" origId="STL-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_4_1" desc="For associative containers never use comparison function returning true for equal values" id="AUTOSAR-A25_4_1-a" origId="STL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A26_5_1" desc="Do not use the rand() function for generating pseudorandom numbers" id="AUTOSAR-A26_5_1-a" origId="SECURITY-02_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_2" desc="Properly seed pseudorandom number generators" id="AUTOSAR-A26_5_2-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="AUTOSAR-A27_0_1-a" origId="SECURITY-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid tainted data in array indexes" id="AUTOSAR-A27_0_1-b" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_1-c" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="AUTOSAR-A27_0_1-d" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer read overflow from tainted data" id="AUTOSAR-A27_0_1-e" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_1-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Protect against command injection" id="AUTOSAR-A27_0_1-g" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Exclude unsanitized user input from format strings" id="AUTOSAR-A27_0_1-h" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-A27_0_2-a" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-A27_0_2-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_2-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_2-e" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_2-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_3" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="AUTOSAR-A27_0_3-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="AUTOSAR-A27_0_4-a" origId="SECURITY-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Avoid using unsafe string functions that do not check bounds" id="AUTOSAR-A27_0_4-b" origId="SECURITY-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_4-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="C-style strings shall not be used" id="AUTOSAR-A27_0_4-d" origId="PB-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="AUTOSAR-A2_10_1-a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="AUTOSAR-A2_10_1-b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="AUTOSAR-A2_10_1-c" origId="CODSTA-CPP-83" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="AUTOSAR-A2_10_1-d" origId="CODSTA-CPP-84" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="AUTOSAR-A2_10_1-e" origId="CODSTA-CPP-85" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="AUTOSAR-A2_10_4-a" origId="GLOBAL-REUSEDQUALGLOBVAR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="AUTOSAR-A2_10_4-b" origId="GLOBAL-REUSEDQUALSTATFUN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-a" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-c" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_11_1" desc="Do not use the volatile keyword" id="AUTOSAR-A2_11_1-a" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="AUTOSAR-A2_13_1-a" origId="CODSTA-CPP-60_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_2" desc="String literals with different encoding prefixes shall not be concatenated" id="AUTOSAR-A2_13_2-a" origId="PB-38_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_3" desc="Type wchar_t shall not be used" id="AUTOSAR-A2_13_3-a" origId="PORT-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_4" desc="A string literal shall not be modified" id="AUTOSAR-A2_13_4-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_5" desc="Hexadecimal constants will be represented using all uppercase letters" id="AUTOSAR-A2_13_5-a" origId="CODSTA-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_6" desc="Universal character names shall be used only inside character or string literals" id="AUTOSAR-A2_13_6-a" origId="NAMING-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_3_1" desc="Only use characters defined in ISO C standard" id="AUTOSAR-A2_3_1-a" origId="MISRA-005" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-a" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-b" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_2" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="AUTOSAR-A2_5_2-a" origId="CODSTA-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_1" desc="Line-splicing shall not be used in // comments" id="AUTOSAR-A2_7_1-a" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="AUTOSAR-A2_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="AUTOSAR-A2_7_2-a" origId="MISRA2004-2_4" sev="2" total="18" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="50;" authUrg="16;" cat="AUTOSAR-A2_7_3" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="AUTOSAR-A2_7_3-a" origId="COMMENT-14" sev="2" total="50" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="65;" authUrg="15;" cat="AUTOSAR-A2_7_3" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="AUTOSAR-A2_7_3-b" origId="COMMENT-14_b" sev="2" total="65" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_8_1" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="AUTOSAR-A2_8_1-a" origId="NAMING-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A3_1_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_1_1-a" origId="PFO-01" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_2" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="AUTOSAR-A3_1_2-a" origId="NAMING-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_3" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="AUTOSAR-A3_1_3-a" origId="NAMING-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_4" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="AUTOSAR-A3_1_4-a" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_5" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="AUTOSAR-A3_1_5-a" origId="CODSTA-CPP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_6" desc="Trivial accessor and mutator functions should be inlined" id="AUTOSAR-A3_1_6-a" origId="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Objects or functions with external linkage shall be declared in a header file" id="AUTOSAR-A3_3_1-a" origId="MISRA-023" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_3_1-b" origId="PFO-01" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_3_2" desc="Static and thread-local objects shall be constant-initialized" id="AUTOSAR-A3_3_2-a" origId="CODSTA-MCPP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not use resources that have been freed" id="AUTOSAR-A3_8_1-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-A3_8_1-b" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-A3_8_1-c" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not point to a wrapped object that has been freed" id="AUTOSAR-A3_8_1-d" origId="BD-PB-WRAPESC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="50;" authUrg="0;" cat="AUTOSAR-A3_9_1" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="AUTOSAR-A3_9_1-b" origId="CODSTA-223" sev="2" total="50" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-A4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="AUTOSAR-A4_10_1-b" origId="CODSTA-MCPP-04" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_5_1" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="AUTOSAR-A4_5_1-a" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from signed to unsigned type" id="AUTOSAR-A4_7_1-a" origId="PB-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-b" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid conversions of constant values to a narrower type" id="AUTOSAR-A4_7_1-c" origId="PORT-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-d" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-A4_7_1-e" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-A4_7_1-f" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-g" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid integer overflows" id="AUTOSAR-A4_7_1-h" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function calls" id="AUTOSAR-A5_0_1-a" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Do not use more than one volatile between two adjacent sequence points" id="AUTOSAR-A5_0_1-b" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="AUTOSAR-A5_0_1-c" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="AUTOSAR-A5_0_1-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="AUTOSAR-A5_0_1-e" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="AUTOSAR-A5_0_1-f" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="AUTOSAR-A5_0_1-g" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_2" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="AUTOSAR-A5_0_2-a" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_3" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="AUTOSAR-A5_0_3-a" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Don't treat arrays polymorphically" id="AUTOSAR-A5_0_4-a" origId="PB-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="AUTOSAR-A5_0_4-b" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Do not treat arrays polymorphically" id="AUTOSAR-A5_0_4-c" origId="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_10_1" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="AUTOSAR-A5_10_1-a" origId="CODSTA-MCPP-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_16_1" desc="The conditional operator should not be used as a sub-expression" id="AUTOSAR-A5_16_1-a" origId="CODSTA-224" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_1" desc="Avoid magic numbers" id="AUTOSAR-A5_1_1-a" origId="CODSTA-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_2" desc="Avoid default capture modes" id="AUTOSAR-A5_1_2-a" origId="CODSTA-MCPP-15_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_3" desc="Include a parameter list in every lambda expression" id="AUTOSAR-A5_1_3-a" origId="CODSTA-MCPP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never return lambdas that capture local objects by reference" id="AUTOSAR-A5_1_4-a" origId="CODSTA-MCPP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never capture local objects from an outer lambda by reference" id="AUTOSAR-A5_1_4-b" origId="CODSTA-MCPP-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="AUTOSAR-A5_1_4-c" origId="CODSTA-MCPP-17_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_6" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="AUTOSAR-A5_1_6-a" origId="CODSTA-MCPP-45" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_7" desc="A lambda shall not be an operand to typeid" id="AUTOSAR-A5_1_7-a" origId="CODSTA-MCPP-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_8" desc="Lambda expressions should not be defined inside another lambda expression" id="AUTOSAR-A5_1_8-a" origId="CODSTA-MCPP-44" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A5_2_2" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="AUTOSAR-A5_2_2-a" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_2_3" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="AUTOSAR-A5_2_3-a" origId="MISRA2004-11_5" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_2_4" desc="Avoid using reinterpret_cast" id="AUTOSAR-A5_2_4-a" origId="CODSTA-CPP-09" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-A5_2_5-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays and pointers out of bounds" id="AUTOSAR-A5_2_5-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-A5_2_5-c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid tainted data in array indexes" id="AUTOSAR-A5_2_5-d" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A5_2_6" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="AUTOSAR-A5_2_6-a" origId="CODSTA-104" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="AUTOSAR-A5_3_1-a" origId="CODSTA-CPP-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="AUTOSAR-A5_3_1-b" origId="CODSTA-CPP-104_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_2" desc="Avoid null pointer dereferencing" id="AUTOSAR-A5_3_2-a" origId="BD-PB-NP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_3" desc="Do not delete objects with incomplete class at the point of deletion" id="AUTOSAR-A5_3_3-a" origId="PB-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_5_1" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-A5_5_1-a" origId="CODSTA-62" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_6_1" desc="Avoid division by zero" id="AUTOSAR-A5_6_1-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Copy assignment operators should not have side effects that could affect copying the object" id="AUTOSAR-A6_2_1-a" origId="MRM-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Move assignment operators should not have side effects that could affect moving the object" id="AUTOSAR-A6_2_1-b" origId="MRM-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_2" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="AUTOSAR-A6_2_2-a" origId="PB-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_4_1" desc="Every switch statement will have at least two cases and a potential default" id="AUTOSAR-A6_4_1-a" origId="CODSTA-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="AUTOSAR-A6_5_1-a" origId="CODSTA-MCPP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_2" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="AUTOSAR-A6_5_2-a" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_3" desc="'Do' statements should not be used except in a function-like macro" id="AUTOSAR-A6_5_3-a" origId="CODSTA-18_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="AUTOSAR-A6_5_4-a" origId="CODSTA-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="AUTOSAR-A6_5_4-b" origId="CODSTA-53" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_6_1" desc="The goto statement shall not be used" id="AUTOSAR-A6_6_1-a" origId="MISRA2004-14_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="0;" cat="AUTOSAR-A7_1_1" desc="Declare parameters or local variable as const whenever possible" id="AUTOSAR-A7_1_1-a" origId="CODSTA-CPP-53" sev="2" total="22" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare const variables whenever possible" id="AUTOSAR-A7_1_2-a" origId="CODSTA-MCPP-11_a_cpp11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare functions whenever possible" id="AUTOSAR-A7_1_2-b" origId="CODSTA-MCPP-11_b_cpp11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_3" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="AUTOSAR-A7_1_3-a" origId="FORMAT-47_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_4" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A7_1_4-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_5" desc="Do not overuse 'auto' specifier" id="AUTOSAR-A7_1_5-a" origId="CODSTA-MCPP-40" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_6" desc="Prefer alias declarations to typedefs" id="AUTOSAR-A7_1_6-a" origId="CODSTA-MCPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Only one statement shall be allowed per line" id="AUTOSAR-A7_1_7-a" origId="FORMAT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Multiple variable declarations shall not be allowed on the same line" id="AUTOSAR-A7_1_7-b" origId="FORMAT-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-A7_1_7-c" origId="FORMAT-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_8" desc="Do not place type specifiers before non-type specifiers in a declaration" id="AUTOSAR-A7_1_8-a" origId="HICPP-7_1_3-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_9" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="AUTOSAR-A7_1_9-a" origId="CODSTA-CPP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_1" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="AUTOSAR-A7_2_1-a" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_2" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="AUTOSAR-A7_2_2-a" origId="HICPP-7_2_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_3" desc="Prefer Scoped Enums to Unscoped Enums" id="AUTOSAR-A7_2_3-a" origId="CODSTA-MCPP-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_4" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="AUTOSAR-A7_2_4-a" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_5" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="AUTOSAR-A7_2_5-a" origId="CODSTA-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_3_1" desc="Write a using declaration to redeclare overloaded functions" id="AUTOSAR-A7_3_1-a" origId="OOP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_4_1" desc="Do not use the asm declaration" id="AUTOSAR-A7_4_1-a" origId="HICPP-7_5_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_1" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="AUTOSAR-A7_5_1-a" origId="PB-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_2" desc="Functions shall not call themselves, either directly or indirectly" id="AUTOSAR-A7_5_2-a" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_6_1" desc="Never return from functions that should not return" id="AUTOSAR-A7_6_1-a" origId="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_2_1" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="AUTOSAR-A8_2_1-a" origId="TEMPL-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_1" desc="Do not use functions with variable numbers of arguments" id="AUTOSAR-A8_4_1-a" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_10" desc="A parameter shall be passed by reference if it can't be NULL" id="AUTOSAR-A8_4_10-a" origId="BD-PB-REFPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_11" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_11-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not pass std::unique_ptr by const reference" id="AUTOSAR-A8_4_12-a" origId="HICPP-8_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_12-b" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_12-c" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_12-d" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_13-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_13-b" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_13-c" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="AUTOSAR-A8_4_2-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_5" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_5-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_6" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_6-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass built-in-types by value unless you are modifying them" id="AUTOSAR-A8_4_7-a" origId="CODSTA-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass small objects with a trivial copy constructor by value" id="AUTOSAR-A8_4_7-b" origId="HICPP-8_2_3-b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_8" desc="Output parameters shall not be used" id="AUTOSAR-A8_4_8-a" origId="CODSTA-CPP-103" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_9" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_9-a" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_0" desc="Avoid use before initialization" id="AUTOSAR-A8_5_0-a" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_1" desc="List members in an initialization list in the order in which they are declared" id="AUTOSAR-A8_5_1-a" origId="INIT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-A8_5_2" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="AUTOSAR-A8_5_2-a" origId="CODSTA-MCPP-38" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_3" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="AUTOSAR-A8_5_3-a" origId="CODSTA-MCPP-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Public member functions shall not return non-const handles to private/protected class-data" id="AUTOSAR-A9_3_1-a" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Protected member function shall not return non-const handles to private class-data" id="AUTOSAR-A9_3_1-b" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-a" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-b" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="AUTOSAR-A9_6_1-a" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_2" desc="Do not declare member variables as bit-fields" id="AUTOSAR-A9_6_2-a" origId="CODSTA-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="AUTOSAR-M0_1_1-a" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="AUTOSAR-M0_1_1-b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="AUTOSAR-M0_1_1-c" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="AUTOSAR-M0_1_1-d" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="AUTOSAR-M0_1_1-e" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in 'for' loop" id="AUTOSAR-M0_1_1-f" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in switch statement" id="AUTOSAR-M0_1_1-g" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="12;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with external linkage shall be used at least once" id="AUTOSAR-M0_1_10-a" origId="GLOBAL-UNUSEDFUNC" sev="4" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-M0_1_10-b" origId="OPT-30" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-a" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-aa" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-ab" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Avoid conditions that always evaluate to the same value" id="AUTOSAR-M0_1_2-ac" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-b" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-c" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-d" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-e" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-f" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-g" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-h" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-i" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-j" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-k" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-l" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-m" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-n" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-o" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-p" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-q" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-r" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-s" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-t" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-u" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-v" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-w" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-x" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-y" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-z" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused local variables" id="AUTOSAR-M0_1_3-a" origId="OPT-02" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unnecessary local variables" id="AUTOSAR-M0_1_3-b" origId="OPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused private member variables" id="AUTOSAR-M0_1_3-c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="AUTOSAR-M0_1_4" desc="A project shall not contain non-volatile POD variables having only one use" id="AUTOSAR-M0_1_4-a" origId="GLOBAL-ONEUSEVAR" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="All non-empty functions with void return type shall have external side effect(s)" id="AUTOSAR-M0_1_8-a" origId="OPT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="Functions with void return type shall not be empty" id="AUTOSAR-M0_1_8-b" origId="OPT-32_b" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_9" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="AUTOSAR-M0_1_9-a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M0_3_1-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-M0_3_1-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not compare two unrelated pointers" id="AUTOSAR-M0_3_1-c" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M0_3_1-d" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid division by zero" id="AUTOSAR-M0_3_1-e" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid null pointer dereferencing" id="AUTOSAR-M0_3_1-f" origId="BD-PB-NP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-M0_3_1-g" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="AUTOSAR-M0_3_1-h" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when reading from a buffer" id="AUTOSAR-M0_3_1-i" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not check for null after dereferencing" id="AUTOSAR-M0_3_1-j" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_2" desc="If a function returns error information, then that error information shall be tested" id="AUTOSAR-M0_3_2-a" origId="MISRA2004-16_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_4_2" desc="Use of floating-point arithmetic shall be documented" id="AUTOSAR-M0_4_2-a" origId="COMMENT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_1" desc="Classes should not be derived from virtual bases" id="AUTOSAR-M10_1_1-a" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_2" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="AUTOSAR-M10_1_2-a" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_3" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="AUTOSAR-M10_1_3-a" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_2_1" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="AUTOSAR-M10_2_1-a" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_3_3" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="AUTOSAR-M10_3_3-a" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M11_0_1" desc="Member data in non-POD types shall be private" id="AUTOSAR-M11_0_1-a" origId="OOP-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M12_1_1" desc="Do not use dynamic type of an object under construction" id="AUTOSAR-M12_1_1-a" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M12_1_1" desc="Do not use dynamic type of an object under destruction" id="AUTOSAR-M12_1_1-b" origId="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_5_3" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="AUTOSAR-M14_5_3-a" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_6_1" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="AUTOSAR-M14_6_1-a" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_0_3" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="AUTOSAR-M15_0_3-a" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_1" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="AUTOSAR-M15_1_1-a" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_2" desc="NULL shall not be thrown explicitly" id="AUTOSAR-M15_1_2-a" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-M15_1_3-a" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_1" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-M15_3_1-a" origId="EXCEPT-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="AUTOSAR-M15_3_3-a" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-M15_3_4-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-M15_3_4-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="AUTOSAR-M15_3_6-a" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_7" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="AUTOSAR-M15_3_7-a" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="AUTOSAR-M16_0_1-a" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_2" desc="Macros shall not be #define'd or #undef'd within a block" id="AUTOSAR-M16_0_2-a" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="AUTOSAR-M16_0_5-a" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_6" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="AUTOSAR-M16_0_6-a" origId="MISRA2004-19_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_7" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="AUTOSAR-M16_0_7-a" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_8" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="AUTOSAR-M16_0_8-a" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="AUTOSAR-M16_1_1-a" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="AUTOSAR-M16_1_2-a" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_2_3" desc="Use multiple include guards" id="AUTOSAR-M16_2_3-a" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_1" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="AUTOSAR-M16_3_1-a" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_2" desc="The # and ## preprocessor operators should not be used" id="AUTOSAR-M16_3_2-a" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_2" desc="The names of standard library macros and objects shall not be reused" id="AUTOSAR-M17_0_2-a" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M17_0_3" desc="The names of standard library functions shall not be overridden" id="AUTOSAR-M17_0_3-a" origId="CODSTA-93" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_5" desc="The facilities provided by &lt;setjmp.h> should not be used" id="AUTOSAR-M17_0_5-a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-a" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-c" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-d" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_4" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="AUTOSAR-M18_0_4-a" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_5" desc="The unbounded functions of library &lt;cstring> shall not be used" id="AUTOSAR-M18_0_5-a" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_2_1" desc="The macro offsetof, in library stddef.h, shall not be used" id="AUTOSAR-M18_2_1-a" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="AUTOSAR-M18_7_1-b" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M19_3_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-M19_3_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M27_0_1" desc="The input/output library stdio.h shall not be used" id="AUTOSAR-M27_0_1-a" origId="MISRA2004-20_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-M2_10_1" desc="Different identifiers shall be typographically unambiguous" id="AUTOSAR-M2_10_1-a" origId="NAMING-47" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal constants (other than zero) shall not be used" id="AUTOSAR-M2_13_2-a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal escape sequences shall not be used" id="AUTOSAR-M2_13_2-b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M2_13_3" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="AUTOSAR-M2_13_3-a" origId="CODSTA-68" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_4" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="AUTOSAR-M2_13_4-a" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="AUTOSAR-M2_7_1-a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_1_2" desc="Always declare functions at file scope" id="AUTOSAR-M3_1_2-a" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_1" desc="All declarations of an object or function shall have compatible types" id="AUTOSAR-M3_2_1-a" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_2" desc="The One Definition Rule shall not be violated" id="AUTOSAR-M3_2_2-a" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="AUTOSAR-M3_2_3-a" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_4" desc="An identifier with external linkage shall have exactly one external definition" id="AUTOSAR-M3_2_4-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_3_2" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="AUTOSAR-M3_3_2-a" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Declare variables as locally as possible" id="AUTOSAR-M3_4_1-a" origId="OPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="AUTOSAR-M3_4_1-b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_1" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="AUTOSAR-M3_9_1-a" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_3" desc="The underlying bit representations of floating-point values shall not be used" id="AUTOSAR-M3_9_3-a" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-M4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_10_2" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="AUTOSAR-M4_10_2-a" origId="CODSTA-CPP-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_1" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="AUTOSAR-M4_5_1-a" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_3" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="AUTOSAR-M4_5_3-a" origId="CODSTA-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_10" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="AUTOSAR-M5_0_10-a" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_11" desc="The plain char type shall be used only for the storage and use of character values" id="AUTOSAR-M5_0_11-a" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_12" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="AUTOSAR-M5_0_12-a" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_14" desc="The first operand of a conditional-operator shall have type bool" id="AUTOSAR-M5_0_14-a" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_15" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="AUTOSAR-M5_0_15-a" origId="MISRA2004-17_4" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M5_0_16-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-M5_0_16-b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_17" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M5_0_17-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_18" desc="Do not compare two unrelated pointers" id="AUTOSAR-M5_0_18-a" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="AUTOSAR-M5_0_2-a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="No parentheses are required for the operand of a unary operator" id="AUTOSAR-M5_0_2-c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parentheses unless all operators in the expression are the same" id="AUTOSAR-M5_0_2-e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_20" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="AUTOSAR-M5_0_20-a" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_21" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="AUTOSAR-M5_0_21-a" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-a" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-b" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-M5_0_4" desc="Avoid implicit conversions between signed and unsigned integer types" id="AUTOSAR-M5_0_4-a" origId="MISRA2004-10_1_a" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="There shall be no implicit conversions from integral to floating type" id="AUTOSAR-M5_0_5-a" origId="MISRA2004-10_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-M5_0_5-b" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit integral conversions from a wider to a narrower type" id="AUTOSAR-M5_0_6-a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-M5_0_6-b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="AUTOSAR-M5_0_6-c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of floating type should not be cast to an integer type" id="AUTOSAR-M5_0_7-a" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_7-b" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_8-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="AUTOSAR-M5_0_8-b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_9" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_9-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="AUTOSAR-M5_14_1-a" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_17_1" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="AUTOSAR-M5_17_1-a" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_18_1" desc="The comma operator shall not be used" id="AUTOSAR-M5_18_1-a" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="AUTOSAR-M5_19_1-a" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="AUTOSAR-M5_19_1-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_10" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="AUTOSAR-M5_2_10-a" origId="MISRA2004-12_13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading comma operator &quot;,&quot;" id="AUTOSAR-M5_2_11-a" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="AUTOSAR-M5_2_11-b" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_12" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="AUTOSAR-M5_2_12-a" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_2" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="AUTOSAR-M5_2_2-a" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_3" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="AUTOSAR-M5_2_3-a" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_2_6" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-M5_2_6-a" origId="CODSTA-62" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_8" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="AUTOSAR-M5_2_8-a" origId="CODSTA-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_9" desc="A cast should not convert a pointer type to an integral type" id="AUTOSAR-M5_2_9-a" origId="MISRA2004-11_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_1" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="AUTOSAR-M5_3_1-a" origId="CODSTA-CPP-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_2" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="AUTOSAR-M5_3_2-a" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_3" desc="The unary &amp; operator shall not be overloaded" id="AUTOSAR-M5_3_3-a" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="AUTOSAR-M5_3_4-a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="AUTOSAR-M5_3_4-b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="AUTOSAR-M5_3_4-c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_8_1" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="AUTOSAR-M5_8_1-a" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_1" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="AUTOSAR-M6_2_1-a" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_2" desc="Floating-point expressions shall not be tested for equality or inequality" id="AUTOSAR-M6_2_2-a" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_3" desc="A null statement shall occur on a line by itself or be followed by a comment" id="AUTOSAR-M6_2_3-a" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="AUTOSAR-M6_3_1-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M6_4_1" desc="'if' and 'else' should be followed by a compound statement" id="AUTOSAR-M6_4_1-a" origId="MISRA2004-14_9" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="AUTOSAR-M6_4_2-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_3-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_3-b" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_3-c" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="Every switch statement shall have at least one case clause" id="AUTOSAR-M6_4_3-d" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_3-e" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_4" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_4-a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_5" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_5-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_6" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_6-a" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_7-a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_2" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="AUTOSAR-M6_5_2-a" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_3" desc="Do not modify for loop counter within a body of the loop" id="AUTOSAR-M6_5_3-a" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_4" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="AUTOSAR-M6_5_4-a" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_5" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="AUTOSAR-M6_5_5-a" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_6" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="AUTOSAR-M6_5_6-a" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="AUTOSAR-M6_6_1-a" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_2" desc="The goto statement shall jump to a label declared later in the same function body" id="AUTOSAR-M6_6_2-a" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_3" desc="The continue statement shall only be used within a well formed for loop" id="AUTOSAR-M6_6_3-a" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-a" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-b" origId="MISRA2004-16_7" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-M7_1_2-c" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="AUTOSAR-M7_3_1" desc="The global namespace shall only contain main() and namespace declarations" id="AUTOSAR-M7_3_1-a" origId="CODSTA-CPP-36" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_2" desc="The identifier main shall not be used for a function other than the global function main" id="AUTOSAR-M7_3_2-a" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_3" desc="There shall be no unnamed namespaces in header files" id="AUTOSAR-M7_3_3-a" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="AUTOSAR-M7_3_4" desc="using-directives shall not be used" id="AUTOSAR-M7_3_4-a" origId="CODSTA-CPP-75" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="5;" cat="AUTOSAR-M7_3_6" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="AUTOSAR-M7_3_6-a" origId="CODSTA-CPP-90" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_1" desc="All usage of assembler shall be documented" id="AUTOSAR-M7_4_1-a" origId="COMMENT-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_2" desc="Assembler instructions shall only be introduced using the asm declaration" id="AUTOSAR-M7_4_2-a" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_3" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="AUTOSAR-M7_4_3-a" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-M7_5_1-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-M7_5_2-a" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_0_1" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-M8_0_1-a" origId="FORMAT-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_3_1" desc="Do not redefine an inherited virtual function with a different default parameter value" id="AUTOSAR-M8_3_1-a" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_2" desc="The identifiers used in the declaration and definition of a function shall be identical" id="AUTOSAR-M8_4_2-a" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_4" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="AUTOSAR-M8_4_4-a" origId="MISRA2004-16_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="AUTOSAR-M8_5_2-a" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="Arrays shall not be partially initialized" id="AUTOSAR-M8_5_2-b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="AUTOSAR-M8_5_2-c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_1" desc="Const member functions shall not return non-const pointers or references to class-data" id="AUTOSAR-M9_3_1-a" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M9_3_3" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="AUTOSAR-M9_3_3-a" origId="CODSTA-CPP-78" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_6_4" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="AUTOSAR-M9_6_4-a" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify string literals" id="BD-PB-MODSTR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overwriting method parameters" id="BD-PB-POVR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not point to a wrapped object that has been freed" id="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid incorrect shift operations" id="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use the correct byte ordering when transferring data between systems" id="BD-PB-BYTEORD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Consistently check the returned value of non-void functions" id="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always check the returned value of non-void function" id="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not check for null after dereferencing" id="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify the alignment of objects by calling realloc()" id="BD-PB-DNMPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly use errno value" id="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define exit handlers" id="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Reset strings on fgets() or fgetws() failure" id="BD-PB-FGETS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Only use values for fsetpos() that are returned from fgetpos()" id="BD-PB-FSETPOS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid infinite recursion" id="BD-PB-INFREC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="BD-PB-INVENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="BD-PB-INVRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid calls to memory-setting functions that can be optimized out by the compiler" id="BD-PB-MEMOPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define new handlers" id="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid throwing exceptions from functions that are declared not to throw" id="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="BD-PB-NORETDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Never return from functions that should not return" id="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays and pointers out of bounds" id="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="An object shall not be assigned or copied to an overlapping object" id="BD-PB-OVERLAP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not treat arrays polymorphically" id="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not compare two unrelated pointers" id="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subtract two pointers that do not address elements of the same array" id="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define signal handlers" id="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not return from a computational exception signal handler" id="BD-PB-SIGRETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subsequently use the argument to std::forward" id="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on the value of a moved-from object" id="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid switch with unreachable branches" id="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define terminate handlers" id="BD-PB-TERMHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define unexpected handlers" id="BD-PB-UNEXPHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under construction" id="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under destruction" id="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the size of the variable length array is in valid range" id="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The same file shall not be opened for read and write access at the same time on different streams" id="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid writing to a stream which has been opened as read only" id="BD-PB-WRROS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid integer overflows" id="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure strings are zero terminated" id="BD-PB-NZTS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the output buffer is large enough when using path manipulation functions" id="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A parameter shall be passed by reference if it can't be NULL" id="BD-PB-REFPARAM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always throw the created std::exception object" id="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use macros for variable arguments correctly" id="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unused values" id="BD-PB-VOVR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unreachable methods" id="BD-PB-UCMETH" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Guarantee that container indices are within the valid range" id="BD-PB-VALRANGE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use recursion" id="BD-PB-RECFUN" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure deallocation functions guarantee resource freeing" id="BD-RES-BADFREEF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Allocate sufficient memory to hold an object of a given type" id="BD-RES-INSUFMEM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Avoid cyclic shared_ptr references" id="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not create variables on the stack above the defined limits" id="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid tainted data in array indexes" id="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Prevent buffer overflows from tainted data" id="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against integer overflow/underflow from tainted data" id="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer read overflow from tainted data" id="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer write overflow from tainted data" id="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against command injection" id="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid printing tainted data on the output console" id="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against environment injection" id="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against file name injection" id="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Exclude unsanitized user input from format strings" id="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used in the controlling expression of a loop" id="BD-SECURITY-TDLOOP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against SQL injection" id="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing unvalidated binary data to log methods" id="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Properly seed pseudorandom number generators" id="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Sensitive data should be cleared before being deallocated" id="BD-SECURITY-SENSFREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing sensitive data to functions that write to log files" id="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="BD-SECURITY-TDALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use global variable with different locks set" id="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="BD-TRS-ARG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Make const member functions thread-safe" id="BD-TRS-CMF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Variable should be used in context of single critical section" id="BD-TRS-DIFCS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while accessing files" id="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not join or detach a thread that was previously joined or detached" id="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Use locks to prevent race conditions when modifying bit fields" id="BD-TRS-BITLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not destroy another thread's mutex" id="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not release a lock that has not been acquired" id="BD-TRS-REVLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in nonvirtual functions" id="MISRA2008-0_1_11" origId="OPT-31" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="MISRA2008-0_1_12" origId="GLOBAL-UNUSEDVIRTPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'else' block" id="MISRA2008-0_1_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2008-0_1_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'if/else/while/for' block" id="MISRA2008-0_1_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in switch statement" id="MISRA2008-0_1_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'for' loop" id="MISRA2008-0_1_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" id="MISRA2008-0_1_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" id="MISRA2008-0_1_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_a" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_aa" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_b" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_c" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_d" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_e" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_f" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_g" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_h" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_i" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_j" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_k" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_l" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_m" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_n" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_o" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_p" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_q" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_r" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_rz" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_s" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_sz" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_t" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_u" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_v" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_w" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_x" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_y" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_z" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_a" origId="OPT-02" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_b" origId="OPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Eliminate unused private member variables" id="MISRA2008-0_1_3_c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain non-volatile POD variables having only one use" id="MISRA2008-0_1_4" origId="GLOBAL-ONEUSEVAR" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid unused values" id="MISRA2008-0_1_6" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRA2008-0_1_7" origId="CODSTA-CPP-58" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2008-0_1_9" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function generates error information, then that error information shall be tested" id="MISRA2008-0_3_2" origId="MISRA2004-16_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="MISRA2008-10_1_2" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRA2008-10_1_3" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="MISRA2008-10_3_1" origId="OOP-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each overriding virtual function shall be declared with the virtual keyword" id="MISRA2008-10_3_2" origId="OOP-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="MISRA2008-10_3_3" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under construction" id="MISRA2008-12_1_1" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under destruction" id="MISRA2008-12_1_1_b" origId="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="MISRA2008-12_1_3" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" id="MISRA2008-12_8_1" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="MISRA2008-12_8_2" origId="OOP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not declare non-member generic functions in associated namespaces" id="MISRA2008-14_5_1" origId="TEMPL-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="MISRA2008-14_5_2" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="MISRA2008-14_5_3" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRA2008-14_6_1" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="MISRA2008-14_7_3" origId="TEMPL-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Overloaded function templates shall not be explicitly specialized" id="MISRA2008-14_8_1" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="MISRA2008-15_0_3" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="MISRA2008-15_1_1" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be thrown explicitly" id="MISRA2008-15_1_2" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="MISRA2008-15_1_3" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_3_1" origId="EXCEPT-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="MISRA2008-15_3_3" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_b" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class type exception shall always be caught by reference" id="MISRA2008-15_3_5" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRA2008-15_3_6" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" id="MISRA2008-15_3_7" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRA2008-15_4_1" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class destructor shall not exit with an exception" id="MISRA2008-15_5_1" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_2" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_2_b" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="MISRA2008-15_5_3" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="MISRA2008-15_5_3_b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not throw from within destructor" id="MISRA2008-15_5_3_c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_5_3_d" origId="EXCEPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="MISRA2008-15_5_3_e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_5_3_f" origId="EXCEPT-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_5_3_g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_3_h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="MISRA2008-15_5_3_i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Always catch exceptions" id="MISRA2008-15_5_3_j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Properly define exit handlers" id="MISRA2008-15_5_3_k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_3_l" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#include directives in a file shall only be preceded by other preprocessor directives or comments" id="MISRA2008-16_0_1" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Macros shall only be #define'd or #undef'd in the global namespace" id="MISRA2008-16_0_2" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2008-16_0_5" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="MISRA2008-16_0_6" origId="MISRA2004-19_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2008-16_0_7_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" id="MISRA2008-16_0_8" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2008-16_1_1" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2008-16_1_2" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Include guards shall be provided" id="MISRA2008-16_2_3" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRA2008-16_2_4" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2008-16_2_6" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be at most one occurrence of the # or ## operators in a single macro definition" id="MISRA2008-16_3_1" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_b" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_d" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_e" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library macros and objects shall not be reused" id="MISRA2008-17_0_2" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The names of standard library functions shall not be overridden" id="MISRA2008-17_0_3" origId="CODSTA-93" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2008-17_0_5" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2008-17_0_5_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The C library shall not be used" id="MISRA2008-18_0_1" origId="CODSTA-CPP-59" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_2" origId="MISRA2004-20_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_c" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_d" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;ctime> shall not be used" id="MISRA2008-18_0_4" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unbounded functions of library &lt;cstring> shall not be used" id="MISRA2008-18_0_5" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The macro offsetof shall not be used" id="MISRA2008-18_2_1" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="MISRA2008" desc="Dynamic heap memory allocation shall not be used" id="MISRA2008-18_4_1" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;csignal> shall not be used" id="MISRA2008-18_7_1" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The signal handling facilities of &lt;csignal> shall not be used" id="MISRA2008-18_7_1_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The error indicator errno shall not be used" id="MISRA2008-19_3_1" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The stream input/output library &lt;cstdio> shall not be used" id="MISRA2008-27_0_1" origId="MISRA2004-20_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2008" desc="Different identifiers shall be typographically unambiguous" id="MISRA2008-2_10_1" origId="NAMING-47" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_3" origId="GLOBAL-UNIQUETYPEDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4" origId="GLOBAL-UNIQUETYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_a" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_c" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="MISRA2008-2_13_1" origId="CODSTA-CPP-60" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal constants (other than zero) shall not be used" id="MISRA2008-2_13_2_a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal escape sequences (other than &quot;\0&quot;) shall not be used" id="MISRA2008-2_13_2_b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="MISRA2008-2_13_3" origId="CODSTA-68" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Literal suffixes shall be upper case" id="MISRA2008-2_13_4" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Narrow and wide string literals shall not be concatenated" id="MISRA2008-2_13_5" origId="PB-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Trigraphs shall not be used" id="MISRA2008-2_3_1" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2008-2_7_1" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2" origId="MISRA2004-2_4" sev="2" total="18" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1" origId="PFO-01" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be declared at block scope" id="MISRA2008-3_1_2" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" id="MISRA2008-3_1_3" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All declarations of an object or function shall have compatible types" id="MISRA2008-3_2_1" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The One Definition Rule shall not be violated" id="MISRA2008-3_2_2" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="MISRA2008-3_2_3" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2008-3_2_4" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2008-3_3_1" origId="MISRA-023" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="MISRA2008-3_3_2" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_a" origId="OPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="MISRA2008-3_9_1" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2008-3_9_3" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be used as an integer value" id="MISRA2008-4_10_1" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRA2008-4_10_2" origId="CODSTA-CPP-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="MISRA2008-4_5_1" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="MISRA2008-4_5_2" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="MISRA2008-4_5_3" origId="CODSTA-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2008-5_0_10" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The plain char type shall only be used for the storage and use of character values" id="MISRA2008-5_0_11" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="signed char and unsigned char type shall only be used for the storage and use of numeric values" id="MISRA2008-5_0_12" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="MISRA2008-5_0_13" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The first operand of a conditional-operator shall have type bool" id="MISRA2008-5_0_14" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Array indexing shall be the only form of pointer arithmetic" id="MISRA2008-5_0_15" origId="MISRA2004-17_4" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-5_0_16_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2008-5_0_16_b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2008-5_0_17" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2008-5_0_18" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="MISRA2008-5_0_20" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="MISRA2008-5_0_21" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_a" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_b" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_a" origId="MISRA2004-10_1_a" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_a" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_b" origId="MISRA2004-10_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_b" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8_b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="MISRA2008-5_0_9" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2008-5_14_1" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="MISRA2008-5_17_1" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma operator shall not be used" id="MISRA2008-5_18_1" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" id="MISRA2008-5_2_1" origId="CODSTA-90" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The &amp;&amp; operator and the || operator shall not be overloaded" id="MISRA2008-5_2_11" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma &quot;,&quot; operator shall not be overloaded" id="MISRA2008-5_2_11_b" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="MISRA2008-5_2_12" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRA2008-5_2_2" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRA2008-5_2_4" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="MISRA2008-5_2_5" origId="MISRA2004-11_5" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="MISRA2008-5_2_6" origId="CODSTA-62" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" id="MISRA2008-5_2_7" origId="MISRA2004-11_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRA2008-5_2_8" origId="CODSTA-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="MISRA2008-5_3_1" origId="CODSTA-CPP-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2008-5_3_2" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary &amp; operator shall not be overloaded" id="MISRA2008-5_3_3" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="MISRA2008-5_8_1" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assignment operators shall not be used in sub-expressions" id="MISRA2008-6_2_1" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="MISRA2008-6_2_2" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="MISRA2008-6_2_3" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The statement forming the body of a switch, while, do while or for statement shall be a compound statement" id="MISRA2008-6_3_1" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="MISRA2008-6_4_1" origId="MISRA2004-14_9" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All if ... else if constructs shall be terminated with an else clause" id="MISRA2008-6_4_2" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_b" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_c" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_d" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_e" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2008-6_4_4" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="MISRA2008-6_4_5" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The final clause of a switch statement shall be the default-clause" id="MISRA2008-6_4_6" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of a switch statement shall not have bool type" id="MISRA2008-6_4_7" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every switch statement shall have at least one case-clause" id="MISRA2008-6_4_8" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="MISRA2008-6_5_1" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="MISRA2008-6_5_2" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall not be modified within condition or statement" id="MISRA2008-6_5_3" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="MISRA2008-6_5_4" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="MISRA2008-6_5_5" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" id="MISRA2008-6_5_6" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRA2008-6_6_1" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRA2008-6_6_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The continue statement shall only be used within a well-formed for loop" id="MISRA2008-6_6_3" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRA2008-6_6_4" origId="CODSTA-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="MISRA2008" desc="A function shall have a single point of exit at the end of the function" id="MISRA2008-6_6_5" origId="MISRA2004-14_7" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="22;" authUrg="0;" cat="MISRA2008" desc="A variable which is not modified shall be const qualified" id="MISRA2008-7_1_1" origId="CODSTA-CPP-53" sev="2" total="22" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" id="MISRA2008-7_1_2_a" origId="MISRA2004-16_7" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" id="MISRA2008-7_1_2_b" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2008-7_1_2_c" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="MISRA2008-7_2_1" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="MISRA2008" desc="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="MISRA2008-7_3_1" origId="CODSTA-CPP-36" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier main shall not be used for a function other than the global function main" id="MISRA2008-7_3_2" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unnamed namespaces in header files" id="MISRA2008-7_3_3" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="MISRA2008" desc="using-directives shall not be used" id="MISRA2008-7_3_4" origId="CODSTA-CPP-75" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="MISRA2008-7_3_5" origId="CODSTA-CPP-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="5;" cat="MISRA2008" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="MISRA2008-7_3_6" origId="CODSTA-CPP-90" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembler instructions shall only be introduced using the asm declaration" id="MISRA2008-7_4_2" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembly language shall be encapsulated and isolated" id="MISRA2008-7_4_3" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="MISRA2008-7_5_1" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="MISRA2008-7_5_3" origId="PB-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="MISRA2008-8_0_1" origId="FORMAT-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="MISRA2008-8_3_1" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be defined using the ellipsis notation" id="MISRA2008-8_4_1" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="MISRA2008-8_4_2" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2008-8_4_3" origId="MISRA2004-16_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" id="MISRA2008-8_4_4" origId="MISRA2004-16_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All variables shall have a defined value before they are used" id="MISRA2008-8_5_1" origId="MISRA-030" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="MISRA2008-8_5_2" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arrays shall not be partially initialized" id="MISRA2008-8_5_2_b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Structures shall not be partially initialized" id="MISRA2008-8_5_2_c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="MISRA2008-8_5_3" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="const member functions shall not return non-const pointers or references to class-data" id="MISRA2008-9_3_1" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Protected member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_a" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Public member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_b" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Unions shall not be used" id="MISRA2008-9_5_1" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="MISRA2008-9_6_2" origId="CODSTA-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall not have enum type" id="MISRA2008-9_6_3" origId="CODSTA-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2008-9_6_4" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Classes should not be derived from virtual bases" id="MISRA2008-10_1_1" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="MISRA2008-10_2_1" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRA2008-12_1_2" origId="PB-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="MISRA2008-14_8_2" origId="TEMPL-08" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An exception object should not have pointer type" id="MISRA2008-15_0_2" origId="EXCEPT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_3_2" origId="EXCEPT-06" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The \ character should not occur in a header file name" id="MISRA2008-16_2_5" origId="NAMING-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Digraphs should not be used" id="MISRA2008-2_5_1" origId="CODSTA-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3" origId="MISRA2004-2_4" sev="4" total="18" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="49;" authUrg="3;" cat="MISRA2008" desc="typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRA2008-3_9_2" origId="MISRA-013" sev="4" total="49" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2008-5_19_1_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2008-5_19_1_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2008-5_2_10" origId="MISRA2004-12_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="MISRA2008-5_2_3" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast should not convert a pointer type to an integral type" id="MISRA2008-5_2_9" origId="MISRA2004-11_3_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions should not call themselves, either directly or indirectly" id="MISRA2008-7_5_4" origId="MISRA2004-16_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-0_3_1_a" origId="BD-PB-ARRAY" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid null pointer dereferencing" id="MISRA2008-0_3_1_b" origId="BD-PB-NP" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid division by zero" id="MISRA2008-0_3_1_c" origId="BD-PB-ZERO" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2008-0_3_1_d" origId="BD-PB-OVERFFMT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2008-0_3_1_e" origId="BD-PB-OVERFNZT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not check for null after dereferencing" id="MISRA2008-0_3_1_f" origId="BD-PB-DEREF" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when reading from a buffer" id="MISRA2008-0_3_1_g" origId="BD-PB-OVERFRD" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when writing to a buffer" id="MISRA2008-0_3_1_h" origId="BD-PB-OVERFWR" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2008-0_3_1_i" origId="BD-PB-PTRSUB" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not compare two unrelated pointers" id="MISRA2008-0_3_1_j" origId="BD-PB-PTRCMP" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Use of floating-point arithmetic shall be documented" id="MISRA2008-0_4_2" origId="COMMENT-10" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All uses of the #pragma directive shall be documented" id="MISRA2008-16_6_1" origId="MISRA2004-3_4" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All usage of assembler shall be documented" id="MISRA2008-7_4_1" origId="COMMENT-09" sev="5" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="398;" authUrg="47;" id="2" total="398" />
            <Severity authTot="80;" authUrg="3;" id="4" total="80" />
         </SeverityList>
      </Rules>
      
  <Supps />

      
  <StdViols>
    <StdViol msg="The 'getHomeCoreLogicObj' function should be preceded by a comment that contains the '@brief' tag" ln="15" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="15" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="1974479524" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1974479524" unbViolId="ddf1c637-5d63-3587-be84-ea2e83284214" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="daf65f9a-2885-3b01-9249-6f5205f50058" locEndPos="16" locType="sr" urgent="true" hash="1442722041" locEndLn="15" goals="1," />
    <StdViol msg="The 'getHomeCoreLogicObj' function should be preceded by a comment that contains the '@return' tag" ln="15" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="15" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="1974479524" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1974479524" unbViolId="3ae95d64-ec04-34a2-9ce9-42f5d0fad73f" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee9fd5f1-9da6-3066-ae0c-bbb597426dd4" locEndPos="16" locType="sr" hash="1442722041" locEndLn="15" goals="0," />
    <StdViol msg="Conditional statement 'if' in a function 'getHomeCoreLogicObj' should be followed by a block" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="17" sev="2" auth="build" locRef="1" rule="AUTOSAR-M6_4_1-a" lnHash="633337662" rule.header="'if' and 'else' should be followed by a compound statement" tool="c++test" lineHash="633337662" unbViolId="929e66d2-d6db-34ea-bb63-ca83ffa3d385" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eed6a91c-9fc8-3e9f-a1b5-5879c02fde91" locEndPos="5" locType="sr" hash="1442722041" locEndLn="17" goals="0," />
    <StdViol msg="Conditional statement 'if' in a function 'getHomeCoreLogicObj' should be followed by a block" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="17" sev="2" auth="build" locRef="1" rule="MISRA2008-6_4_1" lnHash="633337662" rule.header="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" tool="c++test" lineHash="633337662" unbViolId="9b268b20-8c91-3321-88f0-6c6d3cc745ee" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fea0776f-5f7d-3fa9-849d-b1a024b8ff99" locEndPos="5" locType="sr" hash="1442722041" locEndLn="17" goals="0," />
    <StdViol msg="The 'InitializeHomeCoreLogic' function should be preceded by a comment that contains the '@brief' tag" ln="23" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="23" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-422077307" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-422077307" unbViolId="390f1956-8325-3649-bf2c-9aeff311e9c5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ea6919c-0a02-37e3-b2c5-7c37e2a9ce46" locEndPos="6" locType="sr" hash="1442722041" locEndLn="23" goals="0," />
    <StdViol msg="Conditional statement 'if' in a function 'InitializeHomeCoreLogic' should be followed by a block" ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="25" sev="2" auth="build" locRef="1" rule="AUTOSAR-M6_4_1-a" lnHash="633337662" rule.header="'if' and 'else' should be followed by a compound statement" tool="c++test" lineHash="633337662" unbViolId="cd4adf9c-9d7e-39c5-853a-f9e9afdfe347" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="748fd749-5aa7-3bda-8788-a8e6d5b6f62e" locEndPos="5" locType="sr" hash="1442722041" locEndLn="25" goals="0," />
    <StdViol msg="Conditional statement 'if' in a function 'InitializeHomeCoreLogic' should be followed by a block" ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="25" sev="2" auth="build" locRef="1" rule="MISRA2008-6_4_1" lnHash="633337662" rule.header="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" tool="c++test" lineHash="633337662" unbViolId="94ceac77-31aa-345d-bd9a-50524153f162" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f376699d-890c-37b8-9709-8ee5d958be38" locEndPos="5" locType="sr" hash="1442722041" locEndLn="25" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="26" sev="2" auth="build" locRef="1" rule="MISRA2008-18_4_1" lnHash="-2095288474" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-2095288474" unbViolId="fe7acd8f-c9c6-3fc7-9c5c-511f747f36cc" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="875af29b-8853-374d-bf03-6ca3409b5732" locEndPos="28" locType="sr" urgent="true" hash="1442722041" locEndLn="26" goals="1," />
    <StdViol msg="'new' operator should not be used" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="26" sev="2" auth="build" locRef="1" rule="AUTOSAR-A18_5_2-a" lnHash="-2095288474" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-2095288474" unbViolId="37c5c47d-fefb-3ed6-a36b-a88dd9287b89" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a92fda3-8f3d-340b-86ac-149ea1aa181b" locEndPos="28" locType="sr" hash="1442722041" locEndLn="26" goals="0," />
    <StdViol msg="The 'DeInitializeHomeCoreLogic' function should be preceded by a comment that contains the '@brief' tag" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="29" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-1733915132" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1733915132" unbViolId="6a0ee020-5d65-3e4f-af7a-b32e45449f1c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aff81ff1-e948-32ac-9002-95779d548060" locEndPos="6" locType="sr" hash="1442722041" locEndLn="29" goals="0," />
    <StdViol msg="The 'DeInitializeHomeCoreLogic' function should be declared 'noexcept'" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="29" sev="2" auth="build" locRef="1" rule="AUTOSAR-A15_4_4-a" lnHash="-1733915132" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1733915132" unbViolId="f7174bc3-90eb-3bf0-bb87-582b84c90551" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb937e66-766c-3376-b430-c2846e192bb8" locEndPos="6" locType="sr" hash="1442722041" locEndLn="29" goals="0," />
    <StdViol msg="'delete' operator should not be used" ln="31" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="31" sev="2" auth="build" locRef="1" rule="MISRA2008-18_4_1" lnHash="-1814215697" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-1814215697" unbViolId="065ab24f-127a-3444-8c6e-fb96435c06ef" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d76d96b3-169f-3dbc-a658-367772755619" locEndPos="5" locType="sr" urgent="true" hash="1442722041" locEndLn="31" goals="1," />
    <StdViol msg="'delete' operator should not be used" ln="31" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="31" sev="2" auth="build" locRef="1" rule="AUTOSAR-A18_5_2-a" lnHash="-1814215697" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="-1814215697" unbViolId="8917ef2e-98f7-31ee-b4c2-30c3b21b1fcb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0098b62-8d3a-33b2-b83d-89a7fc12025b" locEndPos="5" locType="sr" urgent="true" hash="1442722041" locEndLn="31" goals="1," />
    <StdViol msg="The 'Init' function should be preceded by a comment that contains the '@brief' tag" ln="35" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="35" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="283261501" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="283261501" unbViolId="5d82431e-c945-3655-a92b-05b23ff7b1d6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ff82eab-d9ad-31ce-a862-68d2d4e72d4f" locEndPos="6" locType="sr" hash="1442722041" locEndLn="35" goals="0," />
    <StdViol msg="The 'Init' function is not used in the testing scope" ln="35" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="35" sev="4" auth="build" locRef="1" rule="AUTOSAR-M0_1_10-a" lnHash="283261501" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="283261501" unbViolId="dc09f477-c9ea-305f-a054-057bbd8653d4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0a5ce8d9-111c-3a96-87dd-3040742be399" locEndPos="6" locType="sr" hash="1442722041" locEndLn="35" goals="0," />
    <StdViol msg="The 'DeInit' function should be preceded by a comment that contains the '@brief' tag" ln="39" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="39" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="1189983006" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1189983006" unbViolId="c5b2736e-f106-36da-8975-cb475465fdfc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab71c342-70e0-37c1-874e-36cc1d8f2065" locEndPos="6" locType="sr" hash="1442722041" locEndLn="39" goals="0," />
    <StdViol msg="The 'DeInit' function is not used in the testing scope" ln="39" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="39" sev="4" auth="build" locRef="1" rule="AUTOSAR-M0_1_10-a" lnHash="1189983006" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="1189983006" unbViolId="0752caf5-5f34-370d-9d8f-7c1b5faa4431" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="36fc324b-006e-3c17-a2d0-25ce6d669c9e" locEndPos="6" locType="sr" hash="1442722041" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="4" auth="build" locRef="1" rule="MISRA2008-3_9_2" lnHash="-215321991" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-215321991" unbViolId="e4c8ff1d-d6f8-3c5b-87b7-369f4d57525d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6dccb996-6cea-31a7-b119-0a1fcbcdf09e" locEndPos="1" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="2" auth="build" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-215321991" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-215321991" unbViolId="669b1d97-6ca4-368e-843d-c413b89dda80" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e904139a-47cc-34e6-b189-b9ca52efcd76" locEndPos="1" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@brief' tag" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-215321991" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-215321991" unbViolId="c37a5d6f-3ed5-351d-8763-a129eec8af15" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd2b9201-8319-31ec-aeae-49bf92ac8060" locEndPos="5" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="The 'componentID' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-215321991" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-215321991" unbViolId="dc46252f-70d0-3599-a2a4-261b13476cc3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8fe1d3c-69c2-3c29-8c46-7ab4c18b0c90" locEndPos="5" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@return' tag" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-215321991" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-215321991" unbViolId="0c8548d9-de69-318f-8004-84da83b18ce6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="244f0509-2abd-3226-a245-6d87acff5e4d" locEndPos="5" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="The 'LaunchApp' function is not used in the testing scope" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="4" auth="build" locRef="1" rule="AUTOSAR-M0_1_10-a" lnHash="-215321991" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-215321991" unbViolId="88d6dcb8-993f-375c-8969-d1a671a68ada" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="332f42c6-1a85-37dd-aa73-7d0170fb1af9" locEndPos="5" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="4" auth="build" locRef="1" rule="MISRA2008-3_9_2" lnHash="-215321991" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-215321991" unbViolId="81c4791e-84c0-3c12-9c3b-abaa133f8a11" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c64d8d8-efcf-3e1f-9b22-276d1f0e8bfd" locEndPos="21" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="2" auth="build" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="-215321991" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-215321991" unbViolId="ad35cb9a-3961-3fdd-887e-36502be3a053" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aba62d15-0ddf-37b8-8382-1a6282c2a492" locEndPos="21" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="Declare parameter 'componentID' as const" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="2" auth="build" locRef="1" rule="AUTOSAR-A7_1_1-a" lnHash="-215321991" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-215321991" unbViolId="bb9566a7-5571-3bf9-9f9f-002299526bc0" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="115954e8-18bf-3ef5-87bc-022cac54a808" locEndPos="27" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="Declare parameter 'componentID' as const" ln="44" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="44" sev="2" auth="build" locRef="1" rule="MISRA2008-7_1_1" lnHash="-215321991" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-215321991" unbViolId="07d938fa-5db8-32f5-b688-530c2ade44f8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0a6a7f8-4b74-358a-b82e-77c8084aaad0" locEndPos="27" locType="sr" hash="1442722041" locEndLn="44" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="4" auth="build" locRef="1" rule="MISRA2008-3_9_2" lnHash="1157137724" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1157137724" unbViolId="ef9bfed0-bfb6-3a11-84c9-bf83b8e1ebaa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bfd13e7-82bd-374c-8a9a-51f3564baae5" locEndPos="1" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="2" auth="build" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="1157137724" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1157137724" unbViolId="b5dfa753-6448-322a-8090-f88eb9b2f072" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef3c22be-d29a-3927-bf95-f6a2a9023d29" locEndPos="1" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="The 'CloseApp' function should be preceded by a comment that contains the '@brief' tag" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="1157137724" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1157137724" unbViolId="e51f37ab-1fcb-300a-b184-7de60cfe39ec" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c75ac170-fa7a-3e43-ad98-81af6dfa09bb" locEndPos="5" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="The 'componentID' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="1157137724" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1157137724" unbViolId="eef2b65a-dc9c-3cb9-ba80-cafcfae75ff1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44b264c1-2d0a-359e-ac45-785ca1df34f3" locEndPos="5" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="The 'CloseApp' function should be preceded by a comment that contains the '@return' tag" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="1157137724" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1157137724" unbViolId="a9bb0bfd-418c-3cbe-b36b-43b5b6251510" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1a3011d-2666-3f8e-86a6-279b18c5651c" locEndPos="5" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="The 'CloseApp' function is not used in the testing scope" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="4" auth="build" locRef="1" rule="AUTOSAR-M0_1_10-a" lnHash="1157137724" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="1157137724" unbViolId="21664f07-1348-33f5-a917-448889d6d970" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b087ea02-bc05-3143-bd80-d86bfabba876" locEndPos="5" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="4" auth="build" locRef="1" rule="MISRA2008-3_9_2" lnHash="1157137724" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1157137724" unbViolId="aeac3777-7a6b-30cf-9fd7-7346e326f8ed" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78ed47d8-c507-3bb5-ab84-7b6bd37ca455" locEndPos="20" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="2" auth="build" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="1157137724" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1157137724" unbViolId="10b8edcb-aea2-3539-81be-ba8367cdd393" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8526a53c-9a35-3123-b13b-4cf1e895c821" locEndPos="20" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="Declare parameter 'componentID' as const" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="2" auth="build" locRef="1" rule="AUTOSAR-A7_1_1-a" lnHash="1157137724" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1157137724" unbViolId="2c640171-e178-3052-84e5-8d89f2d9489a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69e770bd-c6b1-3bfd-90d0-783718c3def9" locEndPos="26" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="Declare parameter 'componentID' as const" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="49" sev="2" auth="build" locRef="1" rule="MISRA2008-7_1_1" lnHash="1157137724" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1157137724" unbViolId="72ef7b2d-e66a-3cdd-bb23-0a04f90d7170" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc252463-43d8-3a6e-8873-2fe2fd2e7bf6" locEndPos="26" locType="sr" hash="1442722041" locEndLn="49" goals="0," />
    <StdViol msg="The 'PublishEvent' function should be preceded by a comment that contains the '@brief' tag" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="2028491425" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2028491425" unbViolId="37c16caa-6b65-3a62-9599-17b5d84b19a7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f2bbe98-c2e4-3dc9-9e3e-bfde01e685d5" locEndPos="6" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="The 'topic' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="2028491425" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2028491425" unbViolId="ce72e832-213c-37bc-bcea-bda44cfe0c89" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd2fcb6f-5e4a-393b-8c00-4c709c7a112b" locEndPos="6" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="The 'data' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="2028491425" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2028491425" unbViolId="935b272e-4716-3479-8dad-9220dec7eca8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="327fc940-16dd-3aac-8778-e9fb491659b8" locEndPos="6" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="The 'size' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="2028491425" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2028491425" unbViolId="7e11b4d6-77d2-383a-8c99-bf086e87dbd8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23a00d2f-b8ab-3813-a336-d7e86c3f0367" locEndPos="6" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="The 'PublishEvent' function is not used in the testing scope" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="4" auth="build" locRef="1" rule="AUTOSAR-M0_1_10-a" lnHash="2028491425" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="2028491425" unbViolId="79ad5431-fc2b-3ea2-b9f8-5add7cb41192" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="17a2a314-b9ec-39b6-acf8-07a9ff3dd5d8" locEndPos="6" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="4" auth="build" locRef="1" rule="MISRA2008-3_9_2" lnHash="2028491425" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="2028491425" unbViolId="82756dbb-bfca-38b9-818c-d722b36960ba" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2d64194-36f8-30df-8152-15745a2be163" locEndPos="25" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="2028491425" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="2028491425" unbViolId="5c845ece-225d-3386-b42a-cf7727b9ffb7" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="998cca62-385a-370a-b888-8d218688a667" locEndPos="25" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="Declare parameter 'topic' as const" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A7_1_1-a" lnHash="2028491425" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2028491425" unbViolId="6c458c0c-401b-3fff-a055-68f0ee719c6b" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea97f4fe-b2fa-3243-a6fb-af1421055f94" locEndPos="31" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="Declare parameter 'topic' as const" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="MISRA2008-7_1_1" lnHash="2028491425" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="2028491425" unbViolId="7f380dc8-fb34-3986-863d-d95f2dd781a6" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb999917-45d2-3ea7-8208-1becf5d3bde1" locEndPos="31" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="4" auth="build" locRef="1" rule="MISRA2008-3_9_2" lnHash="2028491425" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="2028491425" unbViolId="e0091e72-d681-3223-b1cf-094a950261e7" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="477b9027-28e0-31a6-a1ba-a35e437518c7" locEndPos="44" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="2028491425" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="2028491425" unbViolId="c775f864-517c-33cb-a932-9b4730f95d57" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ade2d4b6-6c4a-34d8-b8c2-df0dee6a3025" locEndPos="44" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="Declare parameter 'data' as const" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A7_1_1-a" lnHash="2028491425" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2028491425" unbViolId="65a58cac-38f2-32b2-943f-6cd1fd9e4a3a" locStartPos="50" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31a7da02-f959-3399-a698-4a2f6f586792" locEndPos="51" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="Declare parameter 'data' as const" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="MISRA2008-7_1_1" lnHash="2028491425" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="2028491425" unbViolId="26d9e6d1-0927-3aab-840b-22f90d99bbe6" locStartPos="50" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4236d1b1-8cef-33c1-b413-6609de6964fe" locEndPos="51" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="4" auth="build" locRef="1" rule="MISRA2008-3_9_2" lnHash="2028491425" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="2028491425" unbViolId="5183f512-c46d-336f-b1d0-8df71c163c66" locStartPos="56" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69e19858-105b-3f59-a957-c726998e7853" locEndPos="57" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A3_9_1-b" lnHash="2028491425" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="2028491425" unbViolId="dbf8f1bf-39e5-37c3-8d06-8bc5b81674c4" locStartPos="56" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a6b97df-d59e-3a57-ac1e-f6734ee04572" locEndPos="57" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="Declare parameter 'size' as const" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="AUTOSAR-A7_1_1-a" lnHash="2028491425" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2028491425" unbViolId="ae135884-6663-3bd0-941a-e1838f4f3288" locStartPos="60" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbc70875-024e-3807-b628-095242bbf138" locEndPos="61" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="Declare parameter 'size' as const" ln="55" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locStartln="55" sev="2" auth="build" locRef="1" rule="MISRA2008-7_1_1" lnHash="2028491425" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="2028491425" unbViolId="62e99b12-8f64-35bf-aac2-dcc9951960ed" locStartPos="60" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b735f90-df79-3d7c-9b05-1461b7999570" locEndPos="61" locType="sr" hash="1442722041" locEndLn="55" goals="0," />
    <StdViol msg="The 'HomeCoreLogic' function should be preceded by a comment that contains the '@brief' tag" ln="21" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="21" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="263325121" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="263325121" unbViolId="4a085558-3670-3239-873d-205d1c9c386b" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="605d5aeb-625d-32c6-8f8a-6a66e281626a" locEndPos="20" locType="sr" hash="716930667" locEndLn="21" goals="0," />
    <StdViol msg="The 'HomeCoreLogic' function should be defined with =default" ln="21" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="21" sev="2" auth="build" locRef="2" rule="AUTOSAR-A12_7_1-a" lnHash="263325121" rule.header="Define special members as =default when the behavior is equivalent to the compiler's behavior" tool="c++test" lineHash="263325121" unbViolId="f0e39d86-f828-3395-be25-d016c4abf90d" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52065093-6171-376b-a9ff-03227a5458e9" locEndPos="20" locType="sr" hash="716930667" locEndLn="21" goals="0," />
    <StdViol msg="The 'HomeCoreLogic' function should be declared 'noexcept'" ln="21" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="21" sev="2" auth="build" locRef="2" rule="AUTOSAR-A15_4_4-a" lnHash="263325121" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="263325121" unbViolId="63816b51-7ebf-34d7-818f-6ffb978822de" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a18f185-d44b-3d29-8fb4-59df232f3ba8" locEndPos="20" locType="sr" hash="716930667" locEndLn="21" goals="0," />
    <StdViol msg="The '~HomeCoreLogic' function should be preceded by a comment that contains the '@brief' tag" ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="25" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="313661827" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="313661827" unbViolId="4d16516b-2954-3dd4-af19-07cd2d0c42cb" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26dcbaa0-e2ee-35e1-a8fa-9a5e3df8fafc" locEndPos="20" locType="sr" hash="716930667" locEndLn="25" goals="0," />
    <StdViol msg="The '~HomeCoreLogic' function should be defined with =default" ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="25" sev="2" auth="build" locRef="2" rule="AUTOSAR-A12_7_1-a" lnHash="313661827" rule.header="Define special members as =default when the behavior is equivalent to the compiler's behavior" tool="c++test" lineHash="313661827" unbViolId="80781f17-52f0-397d-a42f-527a2c68d21f" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff382c59-b0a6-3bd4-8c90-481eca152108" locEndPos="20" locType="sr" hash="716930667" locEndLn="25" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="29" sev="4" auth="build" locRef="2" rule="MISRA2008-3_9_2" lnHash="1889313463" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1889313463" unbViolId="9da72be6-d868-3e6d-8460-7ddb81fad29e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c098d0f-8956-3384-bf35-3fdec0784a61" locEndPos="5" locType="sr" hash="716930667" locEndLn="29" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="29" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="1889313463" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1889313463" unbViolId="5b60ffbf-900e-3940-b632-a894c04dcb94" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab3a877f-ecc7-364a-9a0a-8fa479bfdb69" locEndPos="5" locType="sr" hash="716930667" locEndLn="29" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@brief' tag" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="29" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="1889313463" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1889313463" unbViolId="98326d24-1137-3c9f-bfcd-9d35ea75cfd9" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="809464f4-4e58-3098-8b4b-954e59dd1cb4" locEndPos="24" locType="sr" hash="716930667" locEndLn="29" goals="0," />
    <StdViol msg="The 'componentID' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="29" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="1889313463" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1889313463" unbViolId="b64ec139-8e2a-36d8-b6b5-3e6dd7141043" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebf92c08-ed70-3946-8930-c45cc8892f57" locEndPos="24" locType="sr" hash="716930667" locEndLn="29" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@return' tag" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="29" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="1889313463" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1889313463" unbViolId="fe964a20-659e-3ca1-88b4-49dc9bb92b61" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f19ecbd-82ab-3b02-9abc-7000d2fb6700" locEndPos="24" locType="sr" hash="716930667" locEndLn="29" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="29" sev="4" auth="build" locRef="2" rule="MISRA2008-3_9_2" lnHash="1889313463" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1889313463" unbViolId="a202ddff-b38c-307c-a0a5-9958e78ac88c" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbb954c7-729f-340b-a2ff-ad8938f98cc5" locEndPos="40" locType="sr" hash="716930667" locEndLn="29" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="29" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="1889313463" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1889313463" unbViolId="d94edbf6-15cd-3398-ac45-4e0246f39c2e" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd6eb8eb-b2b3-380d-a687-c522e3f383b8" locEndPos="40" locType="sr" hash="716930667" locEndLn="29" goals="0," />
    <StdViol msg="Declare parameter 'componentID' as const" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="29" sev="2" auth="build" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="1889313463" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1889313463" unbViolId="b37b3890-8366-3f0e-a86b-fd31e0fa1fb9" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ba4e874-8c2b-34a9-9d82-b2957c2f4bdf" locEndPos="46" locType="sr" hash="716930667" locEndLn="29" goals="0," />
    <StdViol msg="Declare parameter 'componentID' as const" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="29" sev="2" auth="build" locRef="2" rule="MISRA2008-7_1_1" lnHash="1889313463" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1889313463" unbViolId="bcaf6fdc-b475-3e12-9e75-5bc09515d114" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dee7aa57-010a-34d9-9205-9018ce2556df" locEndPos="46" locType="sr" hash="716930667" locEndLn="29" goals="0," />
    <StdViol msg="Cast from 'const char *' removes 'const' qualifier" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="34" sev="2" auth="build" locRef="2" rule="AUTOSAR-A5_2_3-a" lnHash="683968310" rule.header="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" tool="c++test" lineHash="683968310" unbViolId="30c5b3a1-1871-38ba-8b28-4998cfa345b4" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62c1bfe0-c5d4-33b2-bc2c-5c556685e654" locEndPos="37" locType="sr" hash="716930667" locEndLn="34" goals="0," />
    <StdViol msg="Cast from 'const char *' removes 'const' qualifier" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="34" sev="2" auth="build" locRef="2" rule="MISRA2008-5_2_5" lnHash="683968310" rule.header="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" tool="c++test" lineHash="683968310" unbViolId="71bd26b1-b4e4-3c0b-be61-f6ba1a0f7007" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d09c6224-822e-30ad-ac7c-c58325b805b0" locEndPos="37" locType="sr" hash="716930667" locEndLn="34" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="34" sev="4" auth="build" locRef="2" rule="MISRA2008-3_9_2" lnHash="683968310" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="683968310" unbViolId="14dfd9f5-1672-3f25-9c3e-688bf83ad075" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a89cc74-d5c0-331f-af6d-cba6c2a22329" locEndPos="48" locType="sr" hash="716930667" locEndLn="34" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="34" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="683968310" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="683968310" unbViolId="1b95b8c8-1d8f-3156-a39e-ed7acc3ba52f" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90906a62-c702-3847-acf9-33e9f5fe01f4" locEndPos="48" locType="sr" hash="716930667" locEndLn="34" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="37" sev="4" auth="build" locRef="2" rule="MISRA2008-3_9_2" lnHash="947934526" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="947934526" unbViolId="2bf4ffe6-e839-3c1d-97d9-388cfbba4564" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c637d5e8-2c23-340e-9b8a-ca954afc7a92" locEndPos="5" locType="sr" hash="716930667" locEndLn="37" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="37" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="947934526" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="947934526" unbViolId="92015883-1cdd-37fc-997f-dafb75c1bae3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ab0d570-a81d-34a2-a2c2-6c13df1cfc68" locEndPos="5" locType="sr" hash="716930667" locEndLn="37" goals="0," />
    <StdViol msg="The 'CloseApp' function should be preceded by a comment that contains the '@brief' tag" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="37" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="947934526" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="947934526" unbViolId="aee9c6db-8c9c-3c0d-a923-80e5ec3e3fc6" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3785f67-b71d-3431-bade-443ede8badae" locEndPos="24" locType="sr" hash="716930667" locEndLn="37" goals="0," />
    <StdViol msg="The 'componentID' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="37" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="947934526" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="947934526" unbViolId="e261ae48-a63b-3d69-b316-6d0bbbed17c6" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88a3e9c8-5265-392e-be4f-cb001c661df1" locEndPos="24" locType="sr" hash="716930667" locEndLn="37" goals="0," />
    <StdViol msg="The 'CloseApp' function should be preceded by a comment that contains the '@return' tag" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="37" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="947934526" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="947934526" unbViolId="31bf25f5-3aaa-3587-b22f-5b711661bb82" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="443cc290-d485-330d-849b-9aea067d69ad" locEndPos="24" locType="sr" hash="716930667" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="37" sev="4" auth="build" locRef="2" rule="MISRA2008-3_9_2" lnHash="947934526" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="947934526" unbViolId="c9b8dbbd-88e1-3201-80b8-205171d6bcf1" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3af1505d-baee-336a-b0d3-4c3d4b4675ce" locEndPos="39" locType="sr" hash="716930667" locEndLn="37" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="37" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="947934526" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="947934526" unbViolId="bcfcb30e-0f52-31ad-8ac7-0dcce3715d6b" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fe753c2-55da-3807-ac96-df576daf3886" locEndPos="39" locType="sr" hash="716930667" locEndLn="37" goals="0," />
    <StdViol msg="Declare parameter 'componentID' as const" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="37" sev="2" auth="build" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="947934526" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="947934526" unbViolId="ed0f288c-2abb-3892-84a0-728e033f9701" locStartPos="44" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de14c492-691e-30a1-a4b1-9a56bd756c78" locEndPos="45" locType="sr" hash="716930667" locEndLn="37" goals="0," />
    <StdViol msg="Declare parameter 'componentID' as const" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="37" sev="2" auth="build" locRef="2" rule="MISRA2008-7_1_1" lnHash="947934526" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="947934526" unbViolId="647fde5d-dca3-32c8-bd42-8afae7bffb33" locStartPos="44" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23f541a2-0703-398d-95e2-03efa29674e7" locEndPos="45" locType="sr" hash="716930667" locEndLn="37" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="42" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="42" sev="4" auth="build" locRef="2" rule="MISRA2008-2_7_3" lnHash="378985039" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="378985039" unbViolId="31d68d98-885b-3b73-9209-ff21e483bcbd" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1fcc1e4-6955-3353-9261-5a1fac665526" locEndPos="9" locType="sr" hash="716930667" locEndLn="42" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="42" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="42" sev="2" auth="build" locRef="2" rule="MISRA2008-2_7_2" lnHash="378985039" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="378985039" unbViolId="dbd0736a-38b8-3572-8122-cc2446905161" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="990aa6df-c08e-35c1-aa54-3382c54b67a7" locEndPos="9" locType="sr" hash="716930667" locEndLn="42" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="42" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="42" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_2-a" lnHash="378985039" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="378985039" unbViolId="4dcdcb60-df91-3a87-bcf5-710fbac9a9dc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb9f94a6-8dce-396d-8637-ce1612f5a152" locEndPos="9" locType="sr" hash="716930667" locEndLn="42" goals="0," />
    <StdViol msg="The 'PublishEvent' function should be preceded by a comment that contains the '@brief' tag" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="-1434154231" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1434154231" unbViolId="c9272549-3581-3a8e-a8d6-f86d439e4e32" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="794ef8da-09a9-328e-86bc-c4930c36d152" locEndPos="25" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="The 'topic' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1434154231" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1434154231" unbViolId="b6d00c36-63ee-3cab-baa6-915173ee4d7d" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b613ec6-a01f-3770-9209-b991e5408f1b" locEndPos="25" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="The 'data' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1434154231" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1434154231" unbViolId="9afe193e-b13d-3e28-9858-b9534f3a1c3b" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a639918-bbea-3dca-a909-2080af950a6b" locEndPos="25" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="The 'size' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1434154231" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1434154231" unbViolId="b6dd049a-6cf9-3317-9e98-6f318cb3577c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="699c486c-ddd3-3821-9150-9fd8e8c09680" locEndPos="25" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="The function 'PublishEvent' should be made static" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-M9_3_3-a" lnHash="-1434154231" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="-1434154231" unbViolId="91f86a30-5e6c-3b8d-9325-736da63c38e0" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99dcf1ca-8ef0-38b2-b7b7-b9b641ea27fb" locEndPos="25" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="4" auth="build" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1434154231" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1434154231" unbViolId="22776a27-0508-3ca4-8234-03b50024c552" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d01828a-5781-3e1f-8130-ea841815ba4f" locEndPos="44" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="-1434154231" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1434154231" unbViolId="dd5330bf-1d41-3b91-b352-57c12a982b46" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06272c66-57f1-3aef-bf62-cc58d1d639c1" locEndPos="44" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Declare parameter 'topic' as const" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="-1434154231" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1434154231" unbViolId="0815b1d3-1afc-36bf-ac00-3c1ec7dcf514" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22003ba9-f84f-3933-9975-8470e93beacc" locEndPos="50" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Declare parameter 'topic' as const" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="MISRA2008-7_1_1" lnHash="-1434154231" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1434154231" unbViolId="c98b2cf2-d597-39fc-a267-4f64528aa35b" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6ba8a72-4beb-3eaf-a966-cd0488a3f816" locEndPos="50" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="4" auth="build" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1434154231" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1434154231" unbViolId="23c07107-ea3d-31e6-8229-627f86f76a91" locStartPos="62" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8622e70-45a9-30cf-a568-0a1ff44bf8e8" locEndPos="63" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="-1434154231" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1434154231" unbViolId="95d281ba-e8ff-3c4f-9d10-c0da75cfb5bd" locStartPos="62" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84377bd8-fa7c-3d8d-bf1e-8cd6a8cffd9e" locEndPos="63" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Declare parameter 'data' as const" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="-1434154231" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1434154231" unbViolId="3516829c-67dd-3546-8d26-8eabd4c650cd" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cd7e19e-6a21-33dd-99df-f3d7e6c9efd6" locEndPos="70" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Declare parameter 'data' as const" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="MISRA2008-7_1_1" lnHash="-1434154231" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1434154231" unbViolId="9e25f646-5f6b-39b8-b10b-35534ee43576" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da24d6b2-50c6-3511-9bab-8e07bb379700" locEndPos="70" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Pass parameter &quot;data&quot; with const specifier" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1434154231" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1434154231" unbViolId="aad0299c-9d55-3b73-8b31-d21757955ec6" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bc7b86a-9b6f-3b49-aba7-de4b731106db" locEndPos="70" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Pass parameter &quot;data&quot; with const specifier" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1434154231" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1434154231" unbViolId="451781e9-95d5-3cc2-a1db-45669eea1704" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e441a14c-4be2-3a9f-8558-e700dcc5e840" locEndPos="70" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="4" auth="build" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1434154231" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1434154231" unbViolId="295c1d66-6941-3374-a0fe-cad269d94a1c" locStartPos="75" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0409cefe-a37a-3286-ad9e-d99b81f14415" locEndPos="76" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="-1434154231" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1434154231" unbViolId="8230fb02-5219-3859-a9fb-2b87ce48ed91" locStartPos="75" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2aeacfc-afad-37ce-8954-cc16b745382d" locEndPos="76" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Declare parameter 'size' as const" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="-1434154231" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1434154231" unbViolId="a921b24d-965a-384e-a8e3-7211d79120d8" locStartPos="79" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba269109-9476-34f2-9eb3-ab0b112ec3ec" locEndPos="80" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="Declare parameter 'size' as const" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="47" sev="2" auth="build" locRef="2" rule="MISRA2008-7_1_1" lnHash="-1434154231" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1434154231" unbViolId="9b7a0659-9b9e-3558-b577-36fe6858f88e" locStartPos="79" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="869bba5d-31fe-3f07-9912-a5d0927f8bcb" locEndPos="80" locType="sr" hash="716930667" locEndLn="47" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="50" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="50" sev="2" auth="build" locRef="2" rule="AUTOSAR-A8_5_2-a" lnHash="-1075978280" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1075978280" unbViolId="13e2f549-c309-3462-b5d2-1f9d5d96e05f" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5947114d-458c-3807-ad51-ba6b2e7cc68b" locEndPos="21" locType="sr" hash="716930667" locEndLn="50" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the 'i' variable initialization shall not be used" ln="50" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="50" sev="2" auth="build" locRef="2" rule="MISRA2008-5_0_4_a" lnHash="-1075978280" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1075978280" unbViolId="5cc037af-5edd-3923-9d3d-78a00520f338" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e785b4a8-faaa-3a76-9526-e82125042310" locEndPos="21" locType="sr" hash="716930667" locEndLn="50" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the 'i' variable initialization shall not be used" ln="50" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="50" sev="2" auth="build" locRef="2" rule="AUTOSAR-M5_0_4-a" lnHash="-1075978280" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1075978280" unbViolId="b7fd66c3-5468-35d9-a850-c2ee46db28a9" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1892fa37-9c93-3199-95fa-c53c0df140b5" locEndPos="21" locType="sr" hash="716930667" locEndLn="50" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="50" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="50" sev="2" auth="build" locRef="2" rule="AUTOSAR-M2_13_3-a" lnHash="-1075978280" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1075978280" unbViolId="314ce596-7d2d-37f3-8ccb-fa40f4f9e7b2" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0142b0f0-52c3-34a8-b8e2-0b5bb83fa701" locEndPos="25" locType="sr" hash="716930667" locEndLn="50" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="50" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="50" sev="2" auth="build" locRef="2" rule="MISRA2008-2_13_3" lnHash="-1075978280" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="-1075978280" unbViolId="54ff9177-cf46-3795-90c1-e29a5a18e117" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6de6668e-05e5-3ad2-8f3e-3452b85fc8d5" locEndPos="25" locType="sr" hash="716930667" locEndLn="50" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="50" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="50" sev="2" auth="build" locRef="2" rule="MISRA2008-5_0_4_a" lnHash="-1075978280" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="-1075978280" unbViolId="58f4889d-2b39-396d-8f96-a3ce2cd23a37" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e6af330-2d11-3c57-8765-bf82840db1eb" locEndPos="28" locType="sr" hash="716930667" locEndLn="50" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="50" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="50" sev="2" auth="build" locRef="2" rule="AUTOSAR-M5_0_4-a" lnHash="-1075978280" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="-1075978280" unbViolId="35621ce4-2da4-38cd-a9ac-b7cfb65bbf5e" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61747fe7-5eee-3e2f-9870-591a128a87fe" locEndPos="28" locType="sr" hash="716930667" locEndLn="50" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="51" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="51" sev="2" auth="build" locRef="2" rule="MISRA2008-5_0_15" lnHash="-563481615" rule.header="Array indexing shall be the only form of pointer arithmetic" tool="c++test" lineHash="-563481615" unbViolId="b79a408e-e87a-387a-98dd-4fe72f82b647" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c65989b-e345-345b-82f5-8441880466f2" locEndPos="33" locType="sr" hash="716930667" locEndLn="51" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="51" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="51" sev="2" auth="build" locRef="2" rule="AUTOSAR-M5_0_15-a" lnHash="-563481615" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="-563481615" unbViolId="ad20eeff-ff9a-3dcd-93bd-24bd4ccc0353" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae96449a-44b8-3c88-a0e1-17ac35d64e20" locEndPos="33" locType="sr" hash="716930667" locEndLn="51" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="56" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="56" sev="4" auth="build" locRef="2" rule="MISRA2008-3_9_2" lnHash="-2059138738" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-2059138738" unbViolId="9698bdc7-f0e5-3dab-b0de-1b85b7ab0611" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="812cd84b-f27d-3702-98d3-d66d11eb75f7" locEndPos="5" locType="sr" hash="716930667" locEndLn="56" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="56" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="56" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="-2059138738" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-2059138738" unbViolId="1249e140-c8f8-37c1-b701-63689902ea16" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="963f7f49-0d93-3f94-a8e3-d7357ead350d" locEndPos="5" locType="sr" hash="716930667" locEndLn="56" goals="0," />
    <StdViol msg="The 'GenRandomNumber' function should be preceded by a comment that contains the '@brief' tag" ln="56" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="56" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="-2059138738" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-2059138738" unbViolId="6b148942-e56b-3ee2-b82f-3258d6dc6876" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb8dc6d8-7073-36ee-b9dc-46ab1b7c740e" locEndPos="24" locType="sr" hash="716930667" locEndLn="56" goals="0," />
    <StdViol msg="The 'GenRandomNumber' function should be preceded by a comment that contains the '@return' tag" ln="56" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="56" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-2059138738" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-2059138738" unbViolId="92f2e07e-ccc4-36cc-9d9d-1b3c05f0a53f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="224505d1-af30-3470-b3a9-55a48fb902d7" locEndPos="24" locType="sr" hash="716930667" locEndLn="56" goals="0," />
    <StdViol msg="The 'GenRandomNumber' function should be declared 'noexcept'" ln="56" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="56" sev="2" auth="build" locRef="2" rule="AUTOSAR-A15_4_4-a" lnHash="-2059138738" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-2059138738" unbViolId="2c9040cc-2a38-3316-b052-b9ffe8e7d155" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f90690d0-5931-34d3-9fd2-3ebc7ce79f64" locEndPos="24" locType="sr" hash="716930667" locEndLn="56" goals="0," />
    <StdViol msg="The function 'GenRandomNumber' should be made static" ln="56" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="56" sev="2" auth="build" locRef="2" rule="AUTOSAR-M9_3_3-a" lnHash="-2059138738" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="-2059138738" unbViolId="1306fd4b-ad13-3c01-8006-bac8f1f8ab0f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edf44c2f-5d46-37dc-9e92-84d4000b194f" locEndPos="24" locType="sr" hash="716930667" locEndLn="56" goals="0," />
    <StdViol msg="C-style cast to 'unsigned int' type is used" ln="58" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="58" sev="2" auth="build" locRef="2" rule="AUTOSAR-A5_2_2-a" lnHash="1950877589" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="1950877589" unbViolId="9c740d50-4e3f-39ba-b79b-92c1d649e022" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a65e988-c3cf-39d9-a5de-80b1b15650f5" locEndPos="15" locType="sr" hash="716930667" locEndLn="58" goals="0," />
    <StdViol msg="C-style cast to 'unsigned int' type is used" ln="58" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="58" sev="2" auth="build" locRef="2" rule="MISRA2008-5_2_4" lnHash="1950877589" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="1950877589" unbViolId="c4abf675-22e6-3910-99a6-3650c8d016b7" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="524fb852-4d86-3c6f-b050-742d8cd70d14" locEndPos="15" locType="sr" hash="716930667" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'unsigned' basic numerical type" ln="58" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="58" sev="2" auth="build" locRef="2" rule="AUTOSAR-A3_9_1-b" lnHash="1950877589" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1950877589" unbViolId="3f19e289-e6a5-3c12-a927-35ef49265a53" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b73aae37-eace-3630-9ede-e24bf83ac3bb" locEndPos="16" locType="sr" hash="716930667" locEndLn="58" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '__null' as the null pointer value" ln="58" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="58" sev="2" auth="build" locRef="2" rule="AUTOSAR-A4_10_1-b" lnHash="1950877589" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="1950877589" unbViolId="0f9984ea-9469-361a-b6a2-85cf9a0d6c1c" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45b129e7-312b-3c51-9f42-bed4b212a77a" locEndPos="29" locType="sr" hash="716930667" locEndLn="58" goals="0," />
    <StdViol msg="The library function 'rand()' should not be used" ln="59" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="59" sev="2" auth="build" locRef="2" rule="AUTOSAR-A26_5_1-a" lnHash="243423781" rule.header="Do not use the rand() function for generating pseudorandom numbers" tool="c++test" lineHash="243423781" unbViolId="0a693bf9-e058-3d70-a648-04238ad6c11c" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6f0153e-dd99-373c-a19e-50ce84e1c883" locEndPos="16" locType="sr" hash="716930667" locEndLn="59" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="62" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="62" sev="4" auth="build" locRef="2" rule="MISRA2008-2_7_3" lnHash="-1189336247" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="-1189336247" unbViolId="6f7e4d0c-8f5d-3177-8635-82de4681f870" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1de512b7-2b0e-38b2-9a38-0d6a7e6243ff" locEndPos="5" locType="sr" hash="716930667" locEndLn="62" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="62" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="62" sev="2" auth="build" locRef="2" rule="MISRA2008-2_7_2" lnHash="-1189336247" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="-1189336247" unbViolId="1573c442-01b7-3051-9010-3f4bc221e69a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ace7f31c-b264-319b-a619-8046fbbf786b" locEndPos="5" locType="sr" hash="716930667" locEndLn="62" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="62" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="62" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_2-a" lnHash="-1189336247" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="-1189336247" unbViolId="a7c127f4-843b-35d7-a054-dea962f2ca42" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e096b8e4-2b25-3b49-86d2-3a3dd7686b46" locEndPos="5" locType="sr" hash="716930667" locEndLn="62" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="66" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="66" sev="4" auth="build" locRef="2" rule="MISRA2008-2_7_3" lnHash="1357735519" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="1357735519" unbViolId="085a5160-ec9a-3032-a2cd-670dc3208e73" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="949e68d3-db56-3118-8df0-cb70a00b98df" locEndPos="5" locType="sr" hash="716930667" locEndLn="66" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="66" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="66" sev="2" auth="build" locRef="2" rule="MISRA2008-2_7_2" lnHash="1357735519" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="1357735519" unbViolId="82f2580f-8bdc-32a5-9160-5fdd778bfd8c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8becdfa-7064-31cd-8ba8-609d70522a97" locEndPos="5" locType="sr" hash="716930667" locEndLn="66" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="66" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="66" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_2-a" lnHash="1357735519" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="1357735519" unbViolId="1c7be7c0-7e83-302b-be7d-78d1625d2416" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c1910a9-817c-30f8-aedc-b8d9e011dcf3" locEndPos="5" locType="sr" hash="716930667" locEndLn="66" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="72" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="72" sev="4" auth="build" locRef="2" rule="MISRA2008-2_7_3" lnHash="1512831063" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="1512831063" unbViolId="0d174472-e76c-3fa7-a208-41c7c998f117" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63848a1a-4f7a-3f2c-a550-5afae390bf02" locEndPos="5" locType="sr" hash="716930667" locEndLn="72" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="72" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="72" sev="2" auth="build" locRef="2" rule="MISRA2008-2_7_2" lnHash="1512831063" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="1512831063" unbViolId="f11c0cac-9687-3881-89b6-0ccea2ca6951" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5484fd3f-f025-347b-b674-fb83f223b2e4" locEndPos="5" locType="sr" hash="716930667" locEndLn="72" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="72" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locStartln="72" sev="2" auth="build" locRef="2" rule="AUTOSAR-A2_7_2-a" lnHash="1512831063" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="1512831063" unbViolId="4eb7c7f4-0603-321e-be5c-28402ff4ff74" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c7bfed7-ad5d-3dc5-8fdb-471d9dea0494" locEndPos="5" locType="sr" hash="716930667" locEndLn="72" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="16" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="16" sev="4" auth="build" locRef="3" rule="MISRA2008-3_9_2" lnHash="916938913" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="916938913" unbViolId="9880def1-4c96-357d-b085-5df1a0e75e09" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="598b04a3-1ee4-39af-9e27-e2c6293cb2c0" locEndPos="5" locType="sr" hash="-363852788" locEndLn="16" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="16" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="16" sev="2" auth="build" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="916938913" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="916938913" unbViolId="a00f7afd-d1b0-359d-92e1-ce2aae6ccd0f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="732564e4-51c8-330d-9fe3-077eab2103b6" locEndPos="5" locType="sr" hash="-363852788" locEndLn="16" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@brief' tag" ln="16" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="16" sev="2" auth="build" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="916938913" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="916938913" unbViolId="3675d8e3-557f-3719-9b25-f27bd7c31ce1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c553a9fb-2bc3-399c-80cd-e1cb08c08338" locEndPos="9" locType="sr" hash="-363852788" locEndLn="16" goals="0," />
    <StdViol msg="The 'uri' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="16" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="16" sev="2" auth="build" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="916938913" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="916938913" unbViolId="fc0ca0f4-69c0-37b0-8795-d5824ba499b0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7c8e485-94cd-3fb1-8945-41bf15f299e1" locEndPos="9" locType="sr" hash="-363852788" locEndLn="16" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@return' tag" ln="16" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="16" sev="2" auth="build" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="916938913" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="916938913" unbViolId="0f95ff6c-50ed-3e7b-90ac-b1202db0411b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42362e29-c1c9-3363-ae76-7df2bb02d957" locEndPos="9" locType="sr" hash="-363852788" locEndLn="16" goals="0," />
    <StdViol msg="Declare parameter 'uri' as const" ln="16" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="16" sev="2" auth="build" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="916938913" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="916938913" unbViolId="eeae002c-8cd3-3a53-a051-78d58be83a2a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2973b6e-1d7a-312d-84ad-eb2aa9176f88" locEndPos="26" locType="sr" hash="-363852788" locEndLn="16" goals="0," />
    <StdViol msg="Declare parameter 'uri' as const" ln="16" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="16" sev="2" auth="build" locRef="3" rule="MISRA2008-7_1_1" lnHash="916938913" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="916938913" unbViolId="52ed72e5-7d4f-34f6-b7b2-4fec60d20889" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cec66100-ef8d-3dd7-ad29-ca20da42fbdf" locEndPos="26" locType="sr" hash="-363852788" locEndLn="16" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="18" sev="4" auth="build" locRef="3" rule="MISRA2008-2_7_3" lnHash="-207690297" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="-207690297" unbViolId="b23aa590-a687-3ffb-a53e-84e09ad4cef8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c553bd53-f038-3268-b71b-1c6560eda3c2" locEndPos="9" locType="sr" hash="-363852788" locEndLn="18" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="18" sev="2" auth="build" locRef="3" rule="MISRA2008-2_7_2" lnHash="-207690297" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="-207690297" unbViolId="e7d63f1a-2b9c-3254-85a5-5e37959a7582" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31dfad30-ad1a-3723-8225-2592a1068376" locEndPos="9" locType="sr" hash="-363852788" locEndLn="18" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locStartln="18" sev="2" auth="build" locRef="3" rule="AUTOSAR-A2_7_2-a" lnHash="-207690297" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="-207690297" unbViolId="ebb2e754-bb29-364a-b67c-dce8cecfff61" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f357efc0-9ccd-3b10-8e12-72e4ccaa6226" locEndPos="9" locType="sr" hash="-363852788" locEndLn="18" goals="0," />
    <StdViol msg="Function 'VectorToString' has external linkage and is not declared in the header" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="17" sev="2" auth="build" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="1668074857" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1668074857" unbViolId="ea47aeda-e345-3962-9579-383f14c3d497" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f02c4321-2126-3df9-bb26-ac6ae3b9c682" locEndPos="12" locType="sr" hash="-980710421" locEndLn="17" goals="0," />
    <StdViol msg="Function 'VectorToString' has external linkage and is not declared in the header" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="17" sev="2" auth="build" locRef="4" rule="MISRA2008-3_3_1" lnHash="1668074857" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1668074857" unbViolId="b49d0fd2-0861-3d2f-a752-987439f9faf4" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61dcf375-320b-30aa-b945-2271d7842348" locEndPos="12" locType="sr" hash="-980710421" locEndLn="17" goals="0," />
    <StdViol msg="The 'VectorToString' function should be preceded by a comment that contains the '@brief' tag" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="17" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="1668074857" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1668074857" unbViolId="8c55fcf9-d159-3eca-b464-f39730d98778" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="374c34d5-896d-352f-b176-d880ef11821b" locEndPos="12" locType="sr" hash="-980710421" locEndLn="17" goals="0," />
    <StdViol msg="The 'strings' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="17" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1668074857" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1668074857" unbViolId="e6831f4d-814d-34b1-9cf5-6d41c055a67a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5eb36dfe-6562-36d5-a5e3-4d85c09c0ee8" locEndPos="12" locType="sr" hash="-980710421" locEndLn="17" goals="0," />
    <StdViol msg="The 'VectorToString' function should be preceded by a comment that contains the '@return' tag" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="17" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1668074857" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1668074857" unbViolId="47c6f55b-bce5-3138-941c-9deffee0f190" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f0b23f3-644c-3a55-8438-2df7f041a3bb" locEndPos="12" locType="sr" hash="-980710421" locEndLn="17" goals="0," />
    <StdViol msg="The 'Publish' function should be preceded by a comment that contains the '@brief' tag" ln="31" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="31" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="297557240" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="297557240" unbViolId="77844559-8a12-3f30-8650-e9066533b753" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09fd5b8d-d4a4-32cf-9485-de31869dc14e" locEndPos="10" locType="sr" hash="-980710421" locEndLn="31" goals="0," />
    <StdViol msg="The 'topic' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="31" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="31" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="297557240" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="297557240" unbViolId="d08692b3-9e22-3cd9-aca7-1bcaabb55cfa" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ca19340-b51a-3080-aca1-13c321c01d8a" locEndPos="10" locType="sr" hash="-980710421" locEndLn="31" goals="0," />
    <StdViol msg="The 'eventData' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="31" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="31" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="297557240" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="297557240" unbViolId="e0567774-e681-3071-81a5-da031532192f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26eaeed0-30b5-3032-b13b-581a3d32731c" locEndPos="10" locType="sr" hash="-980710421" locEndLn="31" goals="0," />
    <StdViol msg="Declare parameter 'topic' as const" ln="31" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="31" sev="2" auth="build" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="297557240" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="297557240" unbViolId="936ee05f-dd04-3916-9829-5351126a3f52" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="681d05a3-b6dc-3c00-b63d-a2f888f11b92" locEndPos="25" locType="sr" hash="-980710421" locEndLn="31" goals="0," />
    <StdViol msg="Declare parameter 'topic' as const" ln="31" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="31" sev="2" auth="build" locRef="4" rule="MISRA2008-7_1_1" lnHash="297557240" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="297557240" unbViolId="cd893419-7826-31e7-9b9b-6af191e2fa61" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bd9b4e3-5e76-3ed0-9bcb-9772e9ccbb7c" locEndPos="25" locType="sr" hash="-980710421" locEndLn="31" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="35" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="35" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="1835759212" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="1835759212" unbViolId="44d4af0f-b856-3f42-85e4-7b136f62c555" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b16ce52-e28f-3192-956e-9a03f9d047a8" locEndPos="9" locType="sr" hash="-980710421" locEndLn="35" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="35" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="35" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="1835759212" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="1835759212" unbViolId="18df0d00-44c9-340b-b5df-f23d5e5cd14d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d22e6111-4b12-3d68-9ce7-002d92079b0f" locEndPos="9" locType="sr" hash="-980710421" locEndLn="35" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="35" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="35" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="1835759212" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="1835759212" unbViolId="a4a578c2-026b-39a5-b5bc-51e60eb46f2d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b96abd26-5eab-3c60-bf22-05486ec6e61e" locEndPos="9" locType="sr" hash="-980710421" locEndLn="35" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="37" sev="2" auth="build" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="1374140622" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1374140622" unbViolId="2bae6b75-3538-3203-b004-e2e0e3430d3d" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2119ed28-43b2-3adb-8414-e4c73fa02b36" locEndPos="21" locType="sr" hash="-980710421" locEndLn="37" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the 'i' variable initialization shall not be used" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="37" sev="2" auth="build" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="1374140622" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1374140622" unbViolId="abb4cf22-027e-30ff-a3ff-1087d1c177b0" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="168e70ad-efa1-3de2-9896-f58caabf43a7" locEndPos="21" locType="sr" hash="-980710421" locEndLn="37" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the 'i' variable initialization shall not be used" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="37" sev="2" auth="build" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="1374140622" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1374140622" unbViolId="606a45c2-00ae-346a-8979-474259131e5e" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa25bdf6-93e0-3e45-ac3a-b535d2a2b0b7" locEndPos="21" locType="sr" hash="-980710421" locEndLn="37" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="37" sev="2" auth="build" locRef="4" rule="AUTOSAR-M2_13_3-a" lnHash="1374140622" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="1374140622" unbViolId="23ed211e-0700-3055-a102-b9f11bc592aa" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60536d56-8c80-3111-9fc8-c778da5a5f15" locEndPos="25" locType="sr" hash="-980710421" locEndLn="37" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="37" sev="2" auth="build" locRef="4" rule="MISRA2008-2_13_3" lnHash="1374140622" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="1374140622" unbViolId="bf8cb0cc-f8aa-3e35-b06b-69e6e5f48377" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab06e384-8d31-3d24-bf35-720ba8e879db" locEndPos="25" locType="sr" hash="-980710421" locEndLn="37" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="41" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="-164594068" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="-164594068" unbViolId="b9789bab-149c-376d-88f4-358332247463" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f1e8f36-df13-3233-b4e4-27dbc80a8637" locEndPos="13" locType="sr" hash="-980710421" locEndLn="41" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="41" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="-164594068" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="-164594068" unbViolId="cc5c54cf-5e77-3cdb-b998-9313f8fdb37d" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="567e93ad-7fdb-31ed-b324-788e0fadfbf0" locEndPos="13" locType="sr" hash="-980710421" locEndLn="41" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="41" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="-164594068" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="-164594068" unbViolId="1628f505-660a-37cd-9b7e-b7d4d1924772" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c787acda-efcd-3b2e-9081-18e81e6342c0" locEndPos="13" locType="sr" hash="-980710421" locEndLn="41" goals="0," />
    <StdViol msg="The definition of the 'event' variable should contain a braced initializer" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="47" sev="2" auth="build" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="-1980051580" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1980051580" unbViolId="8d87da7d-a625-30b7-90fa-7c47352dd029" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04624f9a-1502-3bc3-a2d9-2602685d2d6b" locEndPos="15" locType="sr" hash="-980710421" locEndLn="47" goals="0," />
    <StdViol msg="Identifier name: 'event' differs only by case from its type name: 'Event'" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="47" sev="2" auth="build" locRef="4" rule="MISRA2008-2_10_1" lnHash="-1980051580" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1980051580" unbViolId="6cad2c14-1bae-3f8e-b231-966043e8c5e4" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f567553-8caf-3e82-95a1-307911a8e85d" locEndPos="15" locType="sr" hash="-980710421" locEndLn="47" goals="0," />
    <StdViol msg="Identifier name: 'event' differs only by case from its type name: 'Event'" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="47" sev="2" auth="build" locRef="4" rule="AUTOSAR-M2_10_1-a" lnHash="-1980051580" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1980051580" unbViolId="d419fc86-481f-32d7-aa28-838f77191985" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52cfb587-d286-3dba-a70f-f209494c0925" locEndPos="15" locType="sr" hash="-980710421" locEndLn="47" goals="0," />
    <StdViol msg="Declare local variable 'event' as const" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="47" sev="2" auth="build" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="-1980051580" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1980051580" unbViolId="b0fd7029-6066-398b-9b9b-fba8351cd266" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12e2d51a-1f28-3087-8a46-0c3d2347b987" locEndPos="15" locType="sr" hash="-980710421" locEndLn="47" goals="0," />
    <StdViol msg="Declare local variable 'event' as const" ln="47" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="47" sev="2" auth="build" locRef="4" rule="MISRA2008-7_1_1" lnHash="-1980051580" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1980051580" unbViolId="42eaf1d2-9777-32c5-ae31-0f57d3f63931" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48e2811a-213b-3071-ab8b-5c179c5e352b" locEndPos="15" locType="sr" hash="-980710421" locEndLn="47" goals="0," />
    <StdViol msg="Unused function's 'publish' return value" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="49" sev="2" auth="build" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="695653248" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="695653248" unbViolId="9ac313a2-5f0c-323c-b36e-d5841d14c717" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="746d1a25-02e8-399d-a16f-ddfcd052d4de" locEndPos="9" locType="sr" hash="-980710421" locEndLn="49" goals="0," />
    <StdViol msg="Unused function's 'publish' return value" ln="49" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="49" sev="2" auth="build" locRef="4" rule="MISRA2008-0_1_7" lnHash="695653248" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="695653248" unbViolId="d62c795c-0b32-3f53-974f-1c45be89cf9e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fc101d2-ee8d-33e4-88e2-e6d028412543" locEndPos="9" locType="sr" hash="-980710421" locEndLn="49" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="4" auth="build" locRef="4" rule="MISRA2008-3_9_2" lnHash="1141254297" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1141254297" unbViolId="eb8c42ba-357f-35aa-9add-d2a9f472638a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ffa616a-2f4d-3480-860b-ea77602cf71b" locEndPos="5" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1141254297" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1141254297" unbViolId="4e9b7baf-011c-3f52-85c6-8b437a1fbd27" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdc521b9-ae18-3397-be71-95a1a7b4f0cf" locEndPos="5" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Function '_LaunchStateCallback' has external linkage and is not declared in the header" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="1141254297" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1141254297" unbViolId="464559ee-c9c1-34fd-8c2a-0dff660a6c03" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c1265d4-5e4e-3301-9790-fa255b8865f8" locEndPos="9" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Function '_LaunchStateCallback' has external linkage and is not declared in the header" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="MISRA2008-3_3_1" lnHash="1141254297" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1141254297" unbViolId="8a406d3a-2702-3d98-b86f-c37505f9e460" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20eccce2-78a7-3902-9d77-2bbf94db6e56" locEndPos="9" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Reserved name '_LaunchStateCallback' used" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="MISRA2008-17_0_3" lnHash="1141254297" rule.header="The names of standard library functions shall not be overridden" tool="c++test" lineHash="1141254297" unbViolId="c728f786-3ac7-3c7f-b255-dbf127318c89" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a87c3eb6-6664-3905-813e-dc4c5a565b29" locEndPos="9" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Reserved name '_LaunchStateCallback' used" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="AUTOSAR-M17_0_3-a" lnHash="1141254297" rule.header="The names of standard library functions shall not be overridden" tool="c++test" lineHash="1141254297" unbViolId="ee0bf5d3-5240-3431-8c9f-bf4c4da51e09" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="babc7d53-bc39-322a-bcea-32775a151da3" locEndPos="9" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="The '_LaunchStateCallback' function should be preceded by a comment that contains the '@brief' tag" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="1141254297" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1141254297" unbViolId="885b90dd-71e0-3a44-83f2-bed1dc55515a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1918508-7775-3e02-8d3a-a23f3f037df0" locEndPos="9" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="The 'event' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1141254297" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1141254297" unbViolId="33109cf9-9a8c-35d3-84ed-4082b63c52b5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73d5270b-cf3c-332d-8fc1-1942b4824aa9" locEndPos="9" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="The 'context' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1141254297" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1141254297" unbViolId="ca659320-783c-3a7a-bf08-c9d521a90888" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="849387a9-f92f-31cb-8f02-6816d0c67f99" locEndPos="9" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="The '_LaunchStateCallback' function should be preceded by a comment that contains the '@return' tag" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1141254297" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1141254297" unbViolId="15dca14a-fd02-3991-b33e-8f4fdf499f0f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cae4b979-4c5a-3013-bd4e-dffa666e4d1e" locEndPos="9" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Identifier name: 'event' differs only by case from its type name: 'Event'" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="MISRA2008-2_10_1" lnHash="1141254297" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1141254297" unbViolId="e41b422c-9df8-32f2-9c35-a8dcb7f68c6f" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccec1440-daf3-3dc5-b283-e7fcf7178a3d" locEndPos="37" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Identifier name: 'event' differs only by case from its type name: 'Event'" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="AUTOSAR-M2_10_1-a" lnHash="1141254297" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1141254297" unbViolId="6ab541c3-1a4a-3bc9-97db-b78fdcf00a75" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00974fc7-2ae7-3a24-9d7f-53ac89ccdb27" locEndPos="37" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Declare parameter 'context' as const" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="1141254297" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1141254297" unbViolId="60341237-1b3f-3d41-b549-9fa9fd94682e" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f89414b8-ca50-3b32-be8e-223d1bfb0f73" locEndPos="50" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Declare parameter 'context' as const" ln="52" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="52" sev="2" auth="build" locRef="4" rule="MISRA2008-7_1_1" lnHash="1141254297" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1141254297" unbViolId="e72de82c-753b-3456-ad4f-c6b50bceae7b" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb0edd08-bf62-3fed-b65f-6a207eb7bb99" locEndPos="50" locType="sr" hash="-980710421" locEndLn="52" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="54" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="54" sev="2" auth="build" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="1520164146" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1520164146" unbViolId="276987cf-d42d-3e48-bde9-f442532a45aa" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="820de0f6-e71b-37d0-ace5-317c34f718e5" locEndPos="13" locType="sr" hash="-980710421" locEndLn="54" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type shall not be used" ln="54" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="54" sev="2" auth="build" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="1520164146" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1520164146" unbViolId="d63d59bf-2175-3a9b-a0a9-f3eb13e526e3" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58de6127-1f44-336a-ab41-562249852aeb" locEndPos="13" locType="sr" hash="-980710421" locEndLn="54" goals="0," />
    <StdViol msg="The LHS operand of a logical operator '||' should be parenthesized" ln="54" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="54" sev="2" auth="build" locRef="4" rule="AUTOSAR-A5_2_6-a" lnHash="1520164146" rule.header="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" tool="c++test" lineHash="1520164146" unbViolId="39bdcd01-e00d-3cfe-82d3-30723bfb3c8b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="caa4236c-bd12-3ee3-ae59-cc673f64cd2f" locEndPos="13" locType="sr" hash="-980710421" locEndLn="54" goals="0," />
    <StdViol msg="The operands of a logical '||' in function '_LaunchStateCallback' should be parenthesized" ln="54" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="54" sev="2" auth="build" locRef="4" rule="MISRA2008-5_2_1" lnHash="1520164146" rule.header="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" tool="c++test" lineHash="1520164146" unbViolId="1131ef96-c2e7-3198-b17e-9ca7d3277651" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc136017-e72c-34e8-a0ba-125ee1d88acc" locEndPos="13" locType="sr" hash="-980710421" locEndLn="54" goals="0," />
    <StdViol msg="The RHS operand of a logical operator '||' should be parenthesized" ln="54" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="54" sev="2" auth="build" locRef="4" rule="AUTOSAR-A5_2_6-a" lnHash="1520164146" rule.header="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" tool="c++test" lineHash="1520164146" unbViolId="511c8f21-3d70-355f-b254-c722e5db792c" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74df4c8f-1470-3cd9-9934-51becdb7169a" locEndPos="46" locType="sr" hash="-980710421" locEndLn="54" goals="0," />
    <StdViol msg="The operands of a logical '||' in function '_LaunchStateCallback' should be parenthesized" ln="54" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="54" sev="2" auth="build" locRef="4" rule="MISRA2008-5_2_1" lnHash="1520164146" rule.header="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" tool="c++test" lineHash="1520164146" unbViolId="55a97cbe-9695-316f-9b9e-f204e20a3cdc" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7a055b4-954e-3491-b5a4-f3fefb7622eb" locEndPos="46" locType="sr" hash="-980710421" locEndLn="54" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="56" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="56" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="1072198088" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="1072198088" unbViolId="eade517f-1729-3bd5-b22f-76f3c558bdad" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68e4f121-ccee-3880-bc53-67e243266bed" locEndPos="13" locType="sr" hash="-980710421" locEndLn="56" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="56" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="56" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="1072198088" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="1072198088" unbViolId="b4052f54-1915-38e7-8298-860e37894128" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="969784c9-0af6-331f-8b0f-10424d28b45d" locEndPos="13" locType="sr" hash="-980710421" locEndLn="56" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="56" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="56" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="1072198088" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="1072198088" unbViolId="9f636caa-7fa1-3fe4-8f58-44afaec11734" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ba5d997-6365-3158-9bd3-5f5c6b1471f1" locEndPos="13" locType="sr" hash="-980710421" locEndLn="56" goals="0," />
    <StdViol msg="Provide only one exit point in '_LaunchStateCallback' function" ln="57" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="57" sev="2" auth="build" locRef="4" rule="MISRA2008-6_6_5" lnHash="285112359" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="285112359" unbViolId="d9c8c495-4aff-3f4e-ab3e-e0a3c2025340" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13956b8e-9d38-313f-a131-222a67f9b65c" locEndPos="13" locType="sr" hash="-980710421" locEndLn="57" goals="0," />
    <StdViol msg="The definition of the 's' variable should contain a braced initializer" ln="60" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="60" sev="2" auth="build" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="-564125432" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-564125432" unbViolId="337aef0e-786e-37ec-b55a-455c051fb09a" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac49a2ff-78f6-319d-8971-fa690a63d2bd" locEndPos="16" locType="sr" hash="-980710421" locEndLn="60" goals="0," />
    <StdViol msg="Declare local variable 's' as const" ln="60" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="60" sev="2" auth="build" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="-564125432" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-564125432" unbViolId="4c4afd39-dc27-3744-aa06-69361bd49e82" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2bd83e2-efc7-3ef2-9bbc-fbbb763c32bc" locEndPos="16" locType="sr" hash="-980710421" locEndLn="60" goals="0," />
    <StdViol msg="Declare local variable 's' as const" ln="60" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="60" sev="2" auth="build" locRef="4" rule="MISRA2008-7_1_1" lnHash="-564125432" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-564125432" unbViolId="461d0679-4e1e-31cb-8b0f-636e538bfcef" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50adc476-d811-389f-8d87-1460b2212b1f" locEndPos="16" locType="sr" hash="-980710421" locEndLn="60" goals="0," />
    <StdViol msg="Local variable 's' declared but not used" ln="60" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="60" sev="2" auth="build" locRef="4" rule="AUTOSAR-M0_1_3-a" lnHash="-564125432" rule.header="Avoid unused local variables" tool="c++test" lineHash="-564125432" unbViolId="ea1e81a2-588e-3bce-9088-c3c6ed2b4207" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64f9b682-b2ef-352e-b460-c6762d437867" locEndPos="16" locType="sr" hash="-980710421" locEndLn="60" goals="0," />
    <StdViol msg="Local variable 's' declared but not used" ln="60" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="60" sev="2" auth="build" locRef="4" rule="MISRA2008-0_1_3_a" lnHash="-564125432" rule.header="A project shall not contain unused variables" tool="c++test" lineHash="-564125432" unbViolId="36a61122-2b20-3493-b21b-d620abf943f9" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e25887a2-aa5e-338c-85b6-c3a4e95f006c" locEndPos="16" locType="sr" hash="-980710421" locEndLn="60" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="61" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="61" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="-959229874" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="-959229874" unbViolId="cd2816c4-b320-3a4f-aa51-6c97393c94f8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89281c1b-6f5f-34a6-b01d-5e086d1045bf" locEndPos="9" locType="sr" hash="-980710421" locEndLn="61" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="61" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="61" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="-959229874" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="-959229874" unbViolId="45348dfa-2842-306d-8be9-0f7f2b165e9e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef388ed4-a866-3e85-8d44-9ce3a1f3a63d" locEndPos="9" locType="sr" hash="-980710421" locEndLn="61" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="61" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="61" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="-959229874" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="-959229874" unbViolId="3c403381-ae88-3409-aef8-404e966d0fb5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37f6fc09-de48-329e-90f8-d69ed34e1982" locEndPos="9" locType="sr" hash="-980710421" locEndLn="61" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="69" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="69" sev="2" auth="build" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="1374140622" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1374140622" unbViolId="6721772b-dbea-3961-8aaa-5e19537b9396" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4af569cf-b1dd-3621-81d8-eeccd5881678" locEndPos="21" locType="sr" hash="-980710421" locEndLn="69" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the 'i' variable initialization shall not be used" ln="69" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="69" sev="2" auth="build" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="1374140622" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1374140622" unbViolId="f1ac2c12-e11b-3b80-9570-ffdd004fb2a7" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="727085de-fed1-34ba-8ce2-e27b4526929f" locEndPos="21" locType="sr" hash="-980710421" locEndLn="69" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the 'i' variable initialization shall not be used" ln="69" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="69" sev="2" auth="build" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="1374140622" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1374140622" unbViolId="cf621b5e-a766-3b35-8dd2-45989530434d" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79e1d55a-948d-3b84-82a8-93d0fa42bf1d" locEndPos="21" locType="sr" hash="-980710421" locEndLn="69" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="69" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="69" sev="2" auth="build" locRef="4" rule="AUTOSAR-M2_13_3-a" lnHash="1374140622" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="1374140622" unbViolId="12b09b54-098b-3a0f-bc4b-201efb8f203c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea6073a6-df99-3917-b962-0fd571b3ce19" locEndPos="25" locType="sr" hash="-980710421" locEndLn="69" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 0" ln="69" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="69" sev="2" auth="build" locRef="4" rule="MISRA2008-2_13_3" lnHash="1374140622" rule.header="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" tool="c++test" lineHash="1374140622" unbViolId="d453d825-92eb-3da0-b9a1-f482d42c34d9" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ec8b4b1-60f8-3caf-a73a-f56d51cf53b9" locEndPos="25" locType="sr" hash="-980710421" locEndLn="69" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="73" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="73" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="-164594068" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="-164594068" unbViolId="7062286b-af28-39a8-95b3-c4e0936e1143" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d493d28e-fe0e-39d4-964d-8582e0438277" locEndPos="13" locType="sr" hash="-980710421" locEndLn="73" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="73" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="73" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="-164594068" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="-164594068" unbViolId="15a539c9-ed3c-33bf-a48d-59147c7c8dba" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b712204-64a1-323a-ad79-e0062808e724" locEndPos="13" locType="sr" hash="-980710421" locEndLn="73" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="73" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="73" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="-164594068" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="-164594068" unbViolId="a96d2df7-3eaa-3996-b86f-194e9f0be21b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2836f086-4071-3e0b-b0dd-a81627e452b9" locEndPos="13" locType="sr" hash="-980710421" locEndLn="73" goals="0," />
    <StdViol msg="'reinterpret_cast' should not be used" ln="76" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="76" sev="2" auth="build" locRef="4" rule="AUTOSAR-A5_2_4-a" lnHash="848910963" rule.header="Avoid using reinterpret_cast" tool="c++test" lineHash="848910963" unbViolId="65a170d4-63fb-3bb9-b471-641d614ce13a" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbf30e89-a452-3051-b59d-bd643a81c234" locEndPos="37" locType="sr" hash="-980710421" locEndLn="76" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="79" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="79" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="-206607036" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="-206607036" unbViolId="d292f96a-1831-3672-b1ca-47cb5e67ecc2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a0fbd35-e06b-36b4-9f85-c20a89654fd8" locEndPos="9" locType="sr" hash="-980710421" locEndLn="79" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="79" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="79" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="-206607036" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="-206607036" unbViolId="c0c8c9d4-4cbb-31e1-8dcb-178ce50cc9e7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58e5d782-b220-3409-bd94-54136accb7c7" locEndPos="9" locType="sr" hash="-980710421" locEndLn="79" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="79" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="79" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="-206607036" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="-206607036" unbViolId="d00b9f7a-128b-3440-b837-7033c3a9b276" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64d6d416-9e05-3e87-9c94-d33ee6adcc97" locEndPos="9" locType="sr" hash="-980710421" locEndLn="79" goals="0," />
    <StdViol msg="Provide only one exit point in '_LaunchStateCallback' function" ln="81" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="81" sev="2" auth="build" locRef="4" rule="MISRA2008-6_6_5" lnHash="1941627643" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="1941627643" unbViolId="8b614216-84eb-350c-ad08-8bd5b98fbd7e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e7251f5-02d3-3e61-96f9-61ac1b54b1b1" locEndPos="9" locType="sr" hash="-980710421" locEndLn="81" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="4" auth="build" locRef="4" rule="MISRA2008-3_9_2" lnHash="227528810" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="227528810" unbViolId="d81fab3a-149a-3cdb-9d2b-c495ff96598e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21d08975-497d-379e-ae05-9a733ae27843" locEndPos="6" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="2" auth="build" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="227528810" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="227528810" unbViolId="bc57ce76-dcc6-32fb-8493-7b09910c11b5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="595359a0-22b7-3728-9f35-1201d58142a8" locEndPos="6" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="The 'SubscribeLaunchState' function should be preceded by a comment that contains the '@brief' tag" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="227528810" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="227528810" unbViolId="0ec47f2a-e32c-380e-9e34-5edca732b2ec" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e807f7a0-5024-3387-bf21-7d54ed47b75a" locEndPos="10" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="The 'topic' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="227528810" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="227528810" unbViolId="50798ed6-51a3-3582-bc9c-7083d5189b29" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03a2636a-284e-3195-8b3f-d37bc39b8efe" locEndPos="10" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="The 'callback' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="227528810" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="227528810" unbViolId="d5e3c209-1c94-3de7-ab89-aa9ae618d2df" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b19f8eb4-4736-365c-90fa-584c5a9363ab" locEndPos="10" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="The 'SubscribeLaunchState' function should be preceded by a comment that contains the '@return' tag" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="227528810" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="227528810" unbViolId="84008a4d-bdf0-38bf-9287-7430f1bf7a30" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24642c15-044d-3ec3-84f9-5a1fc732b7a1" locEndPos="10" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="The 'SubscribeLaunchState' function is not used in the testing scope" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="4" auth="build" locRef="4" rule="AUTOSAR-M0_1_10-a" lnHash="227528810" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="227528810" unbViolId="300dedff-ba82-3523-a771-e4d0ee36acda" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="78042814-41de-34a6-b98d-9a4a17128c48" locEndPos="10" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="4" auth="build" locRef="4" rule="MISRA2008-3_9_2" lnHash="227528810" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="227528810" unbViolId="446d88ce-d6fa-358c-bdde-7027ccec1aac" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="daf579fc-0ed4-3ee7-bdbb-c35b3eca1352" locEndPos="37" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="2" auth="build" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="227528810" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="227528810" unbViolId="f011b07d-bc3c-3b2b-b5f5-a75c8556f046" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ddf9057-ab2d-347a-8de9-f664590cf253" locEndPos="37" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="Declare parameter 'topic' as const" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="2" auth="build" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="227528810" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="227528810" unbViolId="d979acf5-97dd-3851-83e7-79841e7a4134" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d2df21e-626c-3b23-98f2-cdca30c3c02b" locEndPos="44" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="Declare parameter 'topic' as const" ln="85" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="85" sev="2" auth="build" locRef="4" rule="MISRA2008-7_1_1" lnHash="227528810" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="227528810" unbViolId="61c8666c-5b7d-31bc-b12b-54a3336ff8fb" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd17b20d-6dd1-39c5-9df9-fdc3bc9e32b2" locEndPos="44" locType="sr" hash="-980710421" locEndLn="85" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="87" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="87" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="652282461" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="652282461" unbViolId="88435e8e-87ce-349a-bfbb-d0f41b6d420d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59808967-270c-3149-8532-379eed1ad788" locEndPos="9" locType="sr" hash="-980710421" locEndLn="87" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="87" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="87" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="652282461" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="652282461" unbViolId="ad6c5070-9d69-330f-aad1-f98d256bfdd1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ae11737-f5ce-3547-8219-b5b550593ea2" locEndPos="9" locType="sr" hash="-980710421" locEndLn="87" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="87" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="87" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="652282461" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="652282461" unbViolId="248dbed4-e80c-3325-80fe-dd8bc1ccf6c8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="241b8b33-b2c8-3bdc-a3c6-09a0b92c0fb6" locEndPos="9" locType="sr" hash="-980710421" locEndLn="87" goals="0," />
    <StdViol msg="The definition of the 'event' variable should contain a braced initializer" ln="89" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="89" sev="2" auth="build" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="1036516003" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1036516003" unbViolId="6a0eabe8-cd03-3f75-a394-896f180bc187" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0a3f29a-f65f-3027-9830-77199a748d26" locEndPos="15" locType="sr" hash="-980710421" locEndLn="89" goals="0," />
    <StdViol msg="Identifier name: 'event' differs only by case from its type name: 'Event'" ln="89" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="89" sev="2" auth="build" locRef="4" rule="MISRA2008-2_10_1" lnHash="1036516003" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1036516003" unbViolId="edf0bd31-b5a3-3773-a61b-bfba84e57805" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e31b8cc-3274-331d-9b97-927d9330c84b" locEndPos="15" locType="sr" hash="-980710421" locEndLn="89" goals="0," />
    <StdViol msg="Identifier name: 'event' differs only by case from its type name: 'Event'" ln="89" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="89" sev="2" auth="build" locRef="4" rule="AUTOSAR-M2_10_1-a" lnHash="1036516003" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1036516003" unbViolId="99b71f5f-09b4-3105-8432-5ff13d292082" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8299ef8-d830-3e67-b7ea-064b42ae7255" locEndPos="15" locType="sr" hash="-980710421" locEndLn="89" goals="0," />
    <StdViol msg="The definition of the 'status' variable should contain a braced initializer" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="178362633" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="178362633" unbViolId="1de2339c-145c-3c87-a344-e00876dbdb06" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b46a7c9d-c06e-323e-b35b-954135661a0e" locEndPos="16" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="Identifier name: 'status' differs only by case from its type name: 'Status'" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="MISRA2008-2_10_1" lnHash="178362633" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="178362633" unbViolId="70a81012-9267-37d4-aefd-f16319ff92dc" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3faa518d-c007-3469-a1e6-dd3c5123f50a" locEndPos="16" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="Identifier name: 'status' differs only by case from its type name: 'Status'" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="AUTOSAR-M2_10_1-a" lnHash="178362633" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="178362633" unbViolId="e1d3db43-9b4b-3f6b-bc58-473598a5815e" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05126e34-23b5-3f86-ba46-bd23e860152a" locEndPos="16" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="Declare local variable 'status' as const" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="178362633" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="178362633" unbViolId="87f28de4-a9ad-309d-bad0-0fd47c49c238" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d38838f-abf6-3bc6-ab68-fda5a9f44a43" locEndPos="16" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="Declare local variable 'status' as const" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="MISRA2008-7_1_1" lnHash="178362633" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="178362633" unbViolId="f9c66337-bf8c-3687-ac4d-b64b558ca3f4" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa2eca08-9426-3623-8f7e-8eb7fb1d2629" locEndPos="16" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="AUTOSAR-A5_2_2-a" lnHash="178362633" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="178362633" unbViolId="53314448-e3dc-3432-8279-2d70f44e7c2b" locStartPos="83" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84e2c56d-14eb-3be3-9ffe-3ecff04e2304" locEndPos="84" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="MISRA2008-5_2_4" lnHash="178362633" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="178362633" unbViolId="e3f78736-7f91-3b83-ac7a-b610ec9655fd" locStartPos="83" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26ad86ed-4a26-3315-b6e7-9461b9d6a0f7" locEndPos="84" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="Do not convert a pointer to function 'callback' to any other pointer type" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="AUTOSAR-M5_2_6-a" lnHash="178362633" rule.header="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" tool="c++test" lineHash="178362633" unbViolId="0d8230a8-2c60-3038-a695-8fd1115328e4" locStartPos="83" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c4be08b-b869-3635-b348-651cf9c8c6f6" locEndPos="84" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="Do not convert a pointer to function 'callback' to any other pointer type" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="AUTOSAR-A5_5_1-a" lnHash="178362633" rule.header="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" tool="c++test" lineHash="178362633" unbViolId="c0263519-9bee-3622-b556-6979685aebe6" locStartPos="83" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60126852-0ea8-3442-ae73-62476b0377ae" locEndPos="84" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="Do not convert a pointer to function 'callback' to any other pointer type" ln="90" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="90" sev="2" auth="build" locRef="4" rule="MISRA2008-5_2_6" lnHash="178362633" rule.header="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" tool="c++test" lineHash="178362633" unbViolId="476bb288-4493-3ecd-bd29-274ec156d0d9" locStartPos="83" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcc123f4-cb1c-325e-b10e-9bd154a6a209" locEndPos="84" locType="sr" hash="-980710421" locEndLn="90" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="96" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="96" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="134090060" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="134090060" unbViolId="e87f8c3f-fdc1-372c-b945-9c4a55c17066" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3726f65b-925a-3ea7-b70e-a5c7b15573ac" locEndPos="13" locType="sr" hash="-980710421" locEndLn="96" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="96" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="96" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="134090060" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="134090060" unbViolId="1126003b-925c-33df-895f-924a147f5517" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be8f5bf2-0581-30fd-991c-1d4211ea923a" locEndPos="13" locType="sr" hash="-980710421" locEndLn="96" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="96" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="96" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="134090060" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="134090060" unbViolId="233e01e5-8e41-37a8-93e2-f58d4e51623c" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc8e00d5-495b-3b63-96b8-1f05a72fb009" locEndPos="13" locType="sr" hash="-980710421" locEndLn="96" goals="0," />
    <StdViol msg="Provide only one exit point in 'SubscribeLaunchState' function" ln="97" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="97" sev="2" auth="build" locRef="4" rule="MISRA2008-6_6_5" lnHash="285112359" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="285112359" unbViolId="fdc6a4c6-cae9-3675-8b72-175e0b1dfc18" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="099f37dc-e8c9-350d-b469-be84bd403920" locEndPos="13" locType="sr" hash="-980710421" locEndLn="97" goals="0," />
    <StdViol msg="Provide only one exit point in 'SubscribeLaunchState' function" ln="99" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="99" sev="2" auth="build" locRef="4" rule="MISRA2008-6_6_5" lnHash="1941627643" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="1941627643" unbViolId="0fd62be8-1842-3134-a1ed-7ae5f114a23c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="225b5b05-95a6-3586-a0f5-534d00c4b466" locEndPos="9" locType="sr" hash="-980710421" locEndLn="99" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="102" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="102" sev="4" auth="build" locRef="4" rule="MISRA2008-3_9_2" lnHash="-752903649" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-752903649" unbViolId="22fdc241-f1c7-31cd-ab5f-d089e053fc63" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="280806e0-0036-339a-b2e0-23551d122811" locEndPos="5" locType="sr" hash="-980710421" locEndLn="102" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="102" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="102" sev="2" auth="build" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-752903649" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-752903649" unbViolId="fcbade71-24d9-3093-a4c0-8c159f07c2d5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="885f479a-10a1-3e75-bc6e-5550e26a94fe" locEndPos="5" locType="sr" hash="-980710421" locEndLn="102" goals="0," />
    <StdViol msg="The 'UnSubscribeLaunchState' function should be preceded by a comment that contains the '@brief' tag" ln="102" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="102" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-752903649" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-752903649" unbViolId="ef4d38b2-73c2-3a3e-9e64-2c46d45a4d8b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a20dcdc7-006a-3f8d-bd55-f3d695767faf" locEndPos="9" locType="sr" hash="-980710421" locEndLn="102" goals="0," />
    <StdViol msg="The 'UnSubscribeLaunchState' function should be preceded by a comment that contains the '@return' tag" ln="102" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="102" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-752903649" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-752903649" unbViolId="df162f90-5cdd-3c91-af2f-11d3e6f69365" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad5a80b4-fb04-310a-9c21-63f367729995" locEndPos="9" locType="sr" hash="-980710421" locEndLn="102" goals="0," />
    <StdViol msg="The 'UnSubscribeLaunchState' function is not used in the testing scope" ln="102" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="102" sev="4" auth="build" locRef="4" rule="AUTOSAR-M0_1_10-a" lnHash="-752903649" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-752903649" unbViolId="9616a173-ded4-3bc4-9282-3448e35f05ef" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="2d16d16f-0ac2-3a58-a752-1c1e9504229f" locEndPos="9" locType="sr" hash="-980710421" locEndLn="102" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="104" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="104" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="-809184156" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="-809184156" unbViolId="ad7025be-348b-36f5-b948-cbacee8d01d0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3acf2e4f-d06f-3882-95bc-060cd6477f37" locEndPos="9" locType="sr" hash="-980710421" locEndLn="104" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="104" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="104" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="-809184156" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="-809184156" unbViolId="6d691846-f61e-3d83-83ed-fecc14ed834a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e2aa934-a642-395b-b51a-eba8e80e1adc" locEndPos="9" locType="sr" hash="-980710421" locEndLn="104" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="104" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="104" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="-809184156" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="-809184156" unbViolId="c7f90d0a-ce85-3ef1-a4bf-76adcf02fea5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d33e841-c006-330d-843e-0ede9ccab625" locEndPos="9" locType="sr" hash="-980710421" locEndLn="104" goals="0," />
    <StdViol msg="The definition of the 'status' variable should contain a braced initializer" ln="106" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="106" sev="2" auth="build" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="-621340114" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-621340114" unbViolId="d61149f9-59a6-3249-80b2-73caf3bb45e9" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="623e2235-1fd3-3256-8af5-b151b1e9e36e" locEndPos="16" locType="sr" hash="-980710421" locEndLn="106" goals="0," />
    <StdViol msg="Identifier name: 'status' differs only by case from its type name: 'Status'" ln="106" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="106" sev="2" auth="build" locRef="4" rule="MISRA2008-2_10_1" lnHash="-621340114" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-621340114" unbViolId="196fdfe6-5872-343b-85d9-bb8376a1afa2" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="857e7248-edf8-31df-8d3b-a9b0f380db51" locEndPos="16" locType="sr" hash="-980710421" locEndLn="106" goals="0," />
    <StdViol msg="Identifier name: 'status' differs only by case from its type name: 'Status'" ln="106" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="106" sev="2" auth="build" locRef="4" rule="AUTOSAR-M2_10_1-a" lnHash="-621340114" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-621340114" unbViolId="d0bd5332-a70e-3576-829c-b26858439c10" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77d1c9fe-093e-3712-99b0-e333b14c905d" locEndPos="16" locType="sr" hash="-980710421" locEndLn="106" goals="0," />
    <StdViol msg="Declare local variable 'status' as const" ln="106" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="106" sev="2" auth="build" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="-621340114" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-621340114" unbViolId="9737a365-dd63-3dab-b32b-209e47a96b37" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66e60c81-4953-3d9f-bc7e-7bae34c20228" locEndPos="16" locType="sr" hash="-980710421" locEndLn="106" goals="0," />
    <StdViol msg="Declare local variable 'status' as const" ln="106" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="106" sev="2" auth="build" locRef="4" rule="MISRA2008-7_1_1" lnHash="-621340114" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-621340114" unbViolId="8b79e73a-12f0-3cf5-8e53-333eaaf08583" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0e43db9-c264-3f84-9257-543faacba1b0" locEndPos="16" locType="sr" hash="-980710421" locEndLn="106" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="111" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="111" sev="4" auth="build" locRef="4" rule="MISRA2008-2_7_3" lnHash="134090060" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="134090060" unbViolId="187c11f8-4cae-3e67-a808-5ddf56b6ac39" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9cab0b3-f7be-315e-a3b0-b099989d9e0b" locEndPos="13" locType="sr" hash="-980710421" locEndLn="111" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="111" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="111" sev="2" auth="build" locRef="4" rule="MISRA2008-2_7_2" lnHash="134090060" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="134090060" unbViolId="0b0cd30f-4b4a-35b6-a420-c185f3d008d0" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82a39e6b-a002-38c7-ab14-cf793573699f" locEndPos="13" locType="sr" hash="-980710421" locEndLn="111" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="111" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="111" sev="2" auth="build" locRef="4" rule="AUTOSAR-A2_7_2-a" lnHash="134090060" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="134090060" unbViolId="46731d5d-f82b-356d-922b-dd2694820f82" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca29c577-c1a3-308a-ad36-2c5f649e1f8d" locEndPos="13" locType="sr" hash="-980710421" locEndLn="111" goals="0," />
    <StdViol msg="Provide only one exit point in 'UnSubscribeLaunchState' function" ln="112" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="112" sev="2" auth="build" locRef="4" rule="MISRA2008-6_6_5" lnHash="285112359" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="285112359" unbViolId="cf96f4bb-3ed3-35bc-8d47-7dd4813ab4b0" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49fd0697-e04e-3a57-a112-66312d75a1d1" locEndPos="13" locType="sr" hash="-980710421" locEndLn="112" goals="0," />
    <StdViol msg="Provide only one exit point in 'UnSubscribeLaunchState' function" ln="114" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locStartln="114" sev="2" auth="build" locRef="4" rule="MISRA2008-6_6_5" lnHash="1941627643" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="1941627643" unbViolId="9e1271ce-0315-3d69-b134-d9eb860ab766" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bb39752-6ab3-31ab-ab0d-7f4f516d3c6a" locEndPos="9" locType="sr" hash="-980710421" locEndLn="114" goals="0," />
    <StdViol msg="The 'g_logTag' variable has only one use" ln="15" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="15" sev="2" auth="build" locRef="5" rule="AUTOSAR-M0_1_4-a" lnHash="-690998555" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-690998555" unbViolId="ad4d28f0-12f1-34bf-a3c0-1fbfbeaa207b" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8d9e0c01-417f-3ecf-801c-c7348fbaef4b" locEndPos="22" locType="sr" hash="2063078945" locEndLn="15" goals="0," />
    <StdViol msg="The 'g_logTag' variable has only one use" ln="15" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="15" sev="2" auth="build" locRef="5" rule="MISRA2008-0_1_4" lnHash="-690998555" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-690998555" unbViolId="ff2dba60-bd09-32a6-b3c9-0ddbf1a873d9" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="986ce6bb-ed63-3b56-a73b-7e688cf99796" locEndPos="22" locType="sr" hash="2063078945" locEndLn="15" goals="0," />
    <StdViol msg="The 'EnableFileLogging' function should be preceded by a comment that contains the '@brief' tag" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="17" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="1403186377" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1403186377" unbViolId="19e79806-bc82-3df7-9230-0f4a54ac8563" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2960047c-42a8-3899-8a90-009f5cd41a3c" locEndPos="6" locType="sr" hash="2063078945" locEndLn="17" goals="0," />
    <StdViol msg="The 'path' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="17" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="1403186377" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1403186377" unbViolId="191c71ae-b1ab-38e1-9cca-49a81a69c907" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="485a2b93-326f-3cb8-8e84-5db9422e65bf" locEndPos="6" locType="sr" hash="2063078945" locEndLn="17" goals="0," />
    <StdViol msg="The 'EnableFileLogging' function should be preceded by a comment that contains the '@return' tag" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="17" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="1403186377" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1403186377" unbViolId="1d5fabcf-83e1-3444-8089-8aaa7a0942bd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="178374e5-8939-3b43-b70f-affb293e4056" locEndPos="6" locType="sr" hash="2063078945" locEndLn="17" goals="0," />
    <StdViol msg="The 'EnableFileLogging' function is not used in the testing scope" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="17" sev="4" auth="build" locRef="5" rule="AUTOSAR-M0_1_10-a" lnHash="1403186377" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="1403186377" unbViolId="5b6dcd05-da1e-39b3-97e3-f687382b24c2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="99e2ab0d-6d25-39ce-b95c-43fa76d0a0a8" locEndPos="6" locType="sr" hash="2063078945" locEndLn="17" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="17" sev="4" auth="build" locRef="5" rule="MISRA2008-3_9_2" lnHash="1403186377" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1403186377" unbViolId="5dd17043-6cb8-360b-aa49-e58388c56431" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9663c71-f2cb-33b1-9fac-d6b7d584eeea" locEndPos="30" locType="sr" hash="2063078945" locEndLn="17" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="17" sev="2" auth="build" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="1403186377" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1403186377" unbViolId="a62dca26-8866-3241-84cc-cf9e8f41051d" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00d23911-4221-3f08-8e8f-2ab106826f64" locEndPos="30" locType="sr" hash="2063078945" locEndLn="17" goals="0," />
    <StdViol msg="Declare parameter 'path' as const" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="17" sev="2" auth="build" locRef="5" rule="AUTOSAR-A7_1_1-a" lnHash="1403186377" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1403186377" unbViolId="62be7ea1-29f1-3d8e-a8c0-e3c29a8f67f1" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0093a201-8e08-35bb-bfb1-0ffcc8774e6e" locEndPos="36" locType="sr" hash="2063078945" locEndLn="17" goals="0," />
    <StdViol msg="Declare parameter 'path' as const" ln="17" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="17" sev="2" auth="build" locRef="5" rule="MISRA2008-7_1_1" lnHash="1403186377" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1403186377" unbViolId="c9f1631f-4521-358a-90de-d78594d5c0c4" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77ae768f-6b0d-39af-92ec-3c36c4df3e72" locEndPos="36" locType="sr" hash="2063078945" locEndLn="17" goals="0," />
    <StdViol msg="The 'DisableFileLogging' function should be preceded by a comment that contains the '@brief' tag" ln="22" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="22" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="458985490" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="458985490" unbViolId="4bec6642-8c6b-3e2e-a510-6c552242d68c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc533edd-82ce-38ca-a644-af95703c887c" locEndPos="6" locType="sr" hash="2063078945" locEndLn="22" goals="0," />
    <StdViol msg="The 'DisableFileLogging' function should be preceded by a comment that contains the '@return' tag" ln="22" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="22" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="458985490" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="458985490" unbViolId="90ee15c9-af5d-3f0f-899f-f1c90e03bbef" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfeea966-659f-31a8-97ef-cdcdf44ad4a6" locEndPos="6" locType="sr" hash="2063078945" locEndLn="22" goals="0," />
    <StdViol msg="The 'DisableFileLogging' function is not used in the testing scope" ln="22" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="22" sev="4" auth="build" locRef="5" rule="AUTOSAR-M0_1_10-a" lnHash="458985490" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="458985490" unbViolId="c38c9ded-b55a-3163-9398-41fa9bb07a50" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="82c6b18c-a64c-3cd7-b1a4-67d26bd60c4c" locEndPos="6" locType="sr" hash="2063078945" locEndLn="22" goals="0," />
    <StdViol msg="The 'LogErr' function should be preceded by a comment that contains the '@brief' tag" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="1203610024" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1203610024" unbViolId="4bb998a5-9587-359c-8196-dc9c84967a84" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a13796f-223f-31e7-8ff6-0899597db44b" locEndPos="6" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="The 'content' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="1203610024" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1203610024" unbViolId="0308cc6d-1601-3ebd-9a2c-29fa7b5c6a26" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c625f58-2cae-3337-bf7b-2399feba4fb2" locEndPos="6" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="The 'LogErr' function should be declared 'noexcept'" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="2" auth="build" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="1203610024" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="1203610024" unbViolId="7e4f9cea-e18e-3d27-aef1-1e86f0cccc58" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dd6037e-6e03-36ba-862b-63289ef053ae" locEndPos="6" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="Function 'LogErr' is empty" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="2" auth="build" locRef="5" rule="AUTOSAR-M0_1_8-b" lnHash="1203610024" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="1203610024" unbViolId="24cc8b61-b4e4-352d-9486-4c68b85f1043" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47734cfe-7434-3883-a40a-45b241c5c785" locEndPos="6" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="The 'LogErr' function is not used in the testing scope" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="4" auth="build" locRef="5" rule="AUTOSAR-M0_1_10-a" lnHash="1203610024" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="1203610024" unbViolId="2cd1f052-9a51-3ce4-bba7-81d75b52a878" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="49131f4c-6245-3e16-99d1-8a64679f0869" locEndPos="6" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="4" auth="build" locRef="5" rule="MISRA2008-3_9_2" lnHash="1203610024" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1203610024" unbViolId="701ff0aa-6bc6-35b4-990f-880014f424b3" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8aa47ce-0f53-35bf-a477-d3f7f400fe95" locEndPos="19" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="2" auth="build" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="1203610024" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1203610024" unbViolId="a74485fe-193b-3b2e-bb35-0a46fbad7aca" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7857b067-5ab2-3260-a40c-0de8da0a2c9c" locEndPos="19" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="Parameter 'content' is not used" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="2" auth="build" locRef="5" rule="AUTOSAR-A0_1_4-a" lnHash="1203610024" rule.header="Eliminate unused parameters" tool="c++test" lineHash="1203610024" unbViolId="a43d0ce9-b8eb-3e22-b20f-a47f14e1e8df" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bc90ff8-c6c0-3540-9661-4470b3a07127" locEndPos="25" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="Parameter 'content' is not used" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="2" auth="build" locRef="5" rule="MISRA2008-0_1_11" lnHash="1203610024" rule.header="There shall be no unused parameters (named or unnamed) in nonvirtual functions" tool="c++test" lineHash="1203610024" unbViolId="8fd3134a-b7ce-3bca-b634-9f985165cdde" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22d7f38a-6754-3fa9-8748-1e82fbf9c31a" locEndPos="25" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="Declare parameter 'content' as const" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="2" auth="build" locRef="5" rule="AUTOSAR-A7_1_1-a" lnHash="1203610024" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1203610024" unbViolId="a555f798-2044-3e4e-b4a2-11b321860b4b" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4368bd7c-5204-3baf-a2f6-8665f3336d4b" locEndPos="25" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="Declare parameter 'content' as const" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="27" sev="2" auth="build" locRef="5" rule="MISRA2008-7_1_1" lnHash="1203610024" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1203610024" unbViolId="b4cc60da-1708-39f3-8316-92f9d06c75b7" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ba82c91-cde3-34d2-83dc-5bf480094a2d" locEndPos="25" locType="sr" hash="2063078945" locEndLn="27" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="29" sev="4" auth="build" locRef="5" rule="MISRA2008-2_7_3" lnHash="-1384115956" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="-1384115956" unbViolId="99bddad3-f64a-3788-82b0-3fb45a115891" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3371e11a-62ef-395a-8759-d01c9ee6dc4a" locEndPos="5" locType="sr" hash="2063078945" locEndLn="29" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="29" sev="2" auth="build" locRef="5" rule="MISRA2008-2_7_2" lnHash="-1384115956" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="-1384115956" unbViolId="951c101f-518a-34fd-a83c-d51c7bd069d7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ed44bc2-37cc-38d9-96ea-212ea94207e4" locEndPos="5" locType="sr" hash="2063078945" locEndLn="29" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="29" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_2-a" lnHash="-1384115956" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="-1384115956" unbViolId="4a3c9469-f468-304d-b7fb-321d58b597c6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c6d0124-e024-392c-b7e4-2b1e2b672ce9" locEndPos="5" locType="sr" hash="2063078945" locEndLn="29" goals="0," />
    <StdViol msg="The 'LogWarning' function should be preceded by a comment that contains the '@brief' tag" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="641480657" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="641480657" unbViolId="a3b67211-9cd5-30e2-9159-4d7507ab8eb7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad3c31e3-ca20-3f13-b415-260712e94daa" locEndPos="6" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="The 'content' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="641480657" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="641480657" unbViolId="16adff8b-2621-348c-9ca4-d0847ea11c1e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d99e0bc8-ddf3-360e-bea7-915bb435c567" locEndPos="6" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="The 'LogWarning' function should be declared 'noexcept'" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="2" auth="build" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="641480657" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="641480657" unbViolId="5e1833d8-5bdd-3cb9-9d8a-80227e3ce3ef" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84377a09-9e87-3b99-99a6-05735524c1c5" locEndPos="6" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="Function 'LogWarning' is empty" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="2" auth="build" locRef="5" rule="AUTOSAR-M0_1_8-b" lnHash="641480657" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="641480657" unbViolId="ba8b97b0-15c8-3fea-a579-cc1f3d47b033" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60b71a87-a6da-332b-ad4f-32072957e63c" locEndPos="6" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="The 'LogWarning' function is not used in the testing scope" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="4" auth="build" locRef="5" rule="AUTOSAR-M0_1_10-a" lnHash="641480657" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="641480657" unbViolId="104e710e-a41e-3ead-be51-ac1d7f413e61" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6215b8e3-11c9-3ee4-b33f-c2b0ae83d1b2" locEndPos="6" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="4" auth="build" locRef="5" rule="MISRA2008-3_9_2" lnHash="641480657" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="641480657" unbViolId="b6932486-07a0-39ee-8d05-3c899cc92ede" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="187ee92e-ee25-347d-86d3-bb291383a623" locEndPos="23" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="2" auth="build" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="641480657" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="641480657" unbViolId="4c13fdb5-b67d-3439-846a-14110f45100a" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ddae240-0755-300b-96d1-36432531655a" locEndPos="23" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="Parameter 'content' is not used" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="2" auth="build" locRef="5" rule="AUTOSAR-A0_1_4-a" lnHash="641480657" rule.header="Eliminate unused parameters" tool="c++test" lineHash="641480657" unbViolId="e52607f3-d29a-3e58-a5d6-693e47a248a8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fb8aa0d-786e-3616-90f2-8745134f31d5" locEndPos="29" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="Parameter 'content' is not used" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="2" auth="build" locRef="5" rule="MISRA2008-0_1_11" lnHash="641480657" rule.header="There shall be no unused parameters (named or unnamed) in nonvirtual functions" tool="c++test" lineHash="641480657" unbViolId="4c39bef9-5435-3ece-a8ad-97f9f18bc858" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd78f726-028a-3b9b-9687-a37de3c3a9b2" locEndPos="29" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="Declare parameter 'content' as const" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="2" auth="build" locRef="5" rule="AUTOSAR-A7_1_1-a" lnHash="641480657" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="641480657" unbViolId="3e71c4e2-fb1d-326e-853b-08a6ad7d0630" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00a71cd2-3877-3ebd-b3f3-04fb480b1736" locEndPos="29" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="Declare parameter 'content' as const" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="32" sev="2" auth="build" locRef="5" rule="MISRA2008-7_1_1" lnHash="641480657" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="641480657" unbViolId="c133f015-3a19-3c52-8707-60498241654b" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee987d60-bcdc-350e-8b17-b59411c3d2dd" locEndPos="29" locType="sr" hash="2063078945" locEndLn="32" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="34" sev="4" auth="build" locRef="5" rule="MISRA2008-2_7_3" lnHash="1929953208" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="1929953208" unbViolId="968a9f99-2b7a-3135-8882-06d73cf9bd1a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6af13c2e-e9ae-3b2f-b317-5523dc61282f" locEndPos="5" locType="sr" hash="2063078945" locEndLn="34" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="34" sev="2" auth="build" locRef="5" rule="MISRA2008-2_7_2" lnHash="1929953208" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="1929953208" unbViolId="00ad082f-3984-3ecc-bfb5-6f7a1e040618" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e194b5d4-6d5e-328b-b995-b0cc319b8f2a" locEndPos="5" locType="sr" hash="2063078945" locEndLn="34" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="34" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_2-a" lnHash="1929953208" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="1929953208" unbViolId="6733cf6d-8cad-344d-8520-79fe16fbdcc8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7af7a39a-2dd4-3488-924f-5b53255c38a9" locEndPos="5" locType="sr" hash="2063078945" locEndLn="34" goals="0," />
    <StdViol msg="The 'LogInfo' function should be preceded by a comment that contains the '@brief' tag" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="297418639" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="297418639" unbViolId="a97af511-9c14-3264-883f-695b1cd7c99a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2563189-08cb-31d0-bc67-0e316cc7cb50" locEndPos="6" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="The 'content' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="297418639" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="297418639" unbViolId="cbd098eb-6115-3abe-be33-81f84888c425" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de8726c2-7315-36a0-ba84-dbafb656b560" locEndPos="6" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="The 'LogInfo' function should be declared 'noexcept'" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="2" auth="build" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="297418639" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="297418639" unbViolId="44580b7c-6fcd-30c7-8e4b-3bdb5d2a9971" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11ea6a22-726b-3265-802f-a92e6b41009f" locEndPos="6" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="Function 'LogInfo' is empty" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="2" auth="build" locRef="5" rule="AUTOSAR-M0_1_8-b" lnHash="297418639" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="297418639" unbViolId="d45bf7b6-9100-3482-a175-bbe6bdf03cab" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fde41512-682c-3cf0-a078-379e5232323a" locEndPos="6" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="The 'LogInfo' function is not used in the testing scope" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="4" auth="build" locRef="5" rule="AUTOSAR-M0_1_10-a" lnHash="297418639" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="297418639" unbViolId="29b7ca04-5e82-3f60-a7cd-0981344a2597" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="38c7748e-5a1f-3ce4-83af-38b71b022024" locEndPos="6" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="4" auth="build" locRef="5" rule="MISRA2008-3_9_2" lnHash="297418639" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="297418639" unbViolId="a1205776-0505-3a11-a72d-cd23c43537a5" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4806d921-f8f0-39ef-9e8c-5e0c72659239" locEndPos="20" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="2" auth="build" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="297418639" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="297418639" unbViolId="56133fb9-b877-318d-a071-e0fe9615f740" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="377dfbf3-1af9-338f-abba-5009730ffb78" locEndPos="20" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="Parameter 'content' is not used" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="2" auth="build" locRef="5" rule="AUTOSAR-A0_1_4-a" lnHash="297418639" rule.header="Eliminate unused parameters" tool="c++test" lineHash="297418639" unbViolId="e00f74ca-d73b-3174-a113-8d610b528e48" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f0dfb89-715b-3229-bb67-dcf9f70a2d11" locEndPos="26" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="Parameter 'content' is not used" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="2" auth="build" locRef="5" rule="MISRA2008-0_1_11" lnHash="297418639" rule.header="There shall be no unused parameters (named or unnamed) in nonvirtual functions" tool="c++test" lineHash="297418639" unbViolId="1ff8351f-c8b3-3691-a079-b9c98e568af5" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84589962-b5ed-3341-b37d-ac168433befb" locEndPos="26" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="Declare parameter 'content' as const" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="2" auth="build" locRef="5" rule="AUTOSAR-A7_1_1-a" lnHash="297418639" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="297418639" unbViolId="69fa8b11-fba6-3d9d-bbfa-8f1aeb99835b" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29ae4628-69f6-3c39-a25c-eeb24b1286ad" locEndPos="26" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="Declare parameter 'content' as const" ln="37" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="37" sev="2" auth="build" locRef="5" rule="MISRA2008-7_1_1" lnHash="297418639" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="297418639" unbViolId="2d586411-d21a-3be0-bedc-fb9825d1850a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26cd7725-d247-3d24-b592-70915e1f06e7" locEndPos="26" locType="sr" hash="2063078945" locEndLn="37" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="39" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="39" sev="4" auth="build" locRef="5" rule="MISRA2008-2_7_3" lnHash="1345270764" rule.header="Sections of code should not be &quot;commented out&quot; using C++ comments" tool="c++test" lineHash="1345270764" unbViolId="eac1e8d9-5aa6-3f12-9be1-b4c3ad891d32" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01943328-a4bf-3b36-9d85-4535852a388e" locEndPos="5" locType="sr" hash="2063078945" locEndLn="39" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="39" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="39" sev="2" auth="build" locRef="5" rule="MISRA2008-2_7_2" lnHash="1345270764" rule.header="Sections of code shall not be &quot;commented out&quot; using C-style comments" tool="c++test" lineHash="1345270764" unbViolId="0e127f1a-7c71-3432-baf3-57b6243c2e5a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e600581-ebe5-3f47-85cf-0addb44051a5" locEndPos="5" locType="sr" hash="2063078945" locEndLn="39" goals="0," />
    <StdViol msg="Section of code should not be 'commented out'" ln="39" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locStartln="39" sev="2" auth="build" locRef="5" rule="AUTOSAR-A2_7_2-a" lnHash="1345270764" rule.header="Sections of code should not be &quot;commented out&quot;" tool="c++test" lineHash="1345270764" unbViolId="711c05b5-f94a-329a-9ed3-f975610f12b4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20c6486f-d524-3ac1-b4f1-c9ac4017e54b" locEndPos="5" locType="sr" hash="2063078945" locEndLn="39" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="18" sev="2" auth="build" locRef="6" rule="MISRA2008-7_3_6" lnHash="1817627741" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="1817627741" unbViolId="82c84b28-fbf8-3648-bf22-50a0b0b1a03d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e8362e0-bb9b-3aed-b169-d5830cb7c3f0" locEndPos="1" locType="sr" urgent="true" hash="-793331324" locEndLn="18" goals="1," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="18" sev="2" auth="build" locRef="6" rule="AUTOSAR-M7_3_6-a" lnHash="1817627741" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="1817627741" unbViolId="f8cae658-50e9-3d6e-ad88-d368c5780030" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23f4c2d4-4676-38d9-bed1-a46f714756e5" locEndPos="1" locType="sr" urgent="true" hash="-793331324" locEndLn="18" goals="1," />
    <StdViol msg="'using' directive was found: namespace 'HomeBusinessLogic' " ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="18" sev="2" auth="build" locRef="6" rule="AUTOSAR-M7_3_4-a" lnHash="1817627741" rule.header="using-directives shall not be used" tool="c++test" lineHash="1817627741" unbViolId="4e81ed09-16be-36f9-92de-6d24e2fb39f2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76b2df28-841b-342a-999a-292b3cb7e5a7" locEndPos="1" locType="sr" hash="-793331324" locEndLn="18" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'HomeBusinessLogic' " ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="18" sev="2" auth="build" locRef="6" rule="MISRA2008-7_3_4" lnHash="1817627741" rule.header="using-directives shall not be used" tool="c++test" lineHash="1817627741" unbViolId="71b79eeb-5d40-3e59-9d33-950436c3c260" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3ed674d-22a4-3a4f-a186-269099da5861" locEndPos="1" locType="sr" hash="-793331324" locEndLn="18" goals="0," />
    <StdViol msg="Global variable 'homeCoreLogicObj' is declared in global namespace" ln="19" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="19" sev="2" auth="build" locRef="6" rule="AUTOSAR-M7_3_1-a" lnHash="305848218" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="305848218" unbViolId="f07b74c9-47e7-3a5f-b57c-5df97293d006" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c572349d-4bb9-3041-90f3-2a937d77aa9c" locEndPos="16" locType="sr" urgent="true" hash="-793331324" locEndLn="19" goals="1," />
    <StdViol msg="Global variable 'homeCoreLogicObj' is declared in global namespace" ln="19" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="19" sev="2" auth="build" locRef="6" rule="MISRA2008-7_3_1" lnHash="305848218" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="305848218" unbViolId="63300b97-0f5c-3a27-b13c-af05ff38ad0b" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07c8c374-99a7-3a36-9e19-e7ffb7eb1371" locEndPos="16" locType="sr" urgent="true" hash="-793331324" locEndLn="19" goals="1," />
    <StdViol msg="Variable 'homeCoreLogicObj' is defined in header file" ln="19" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="19" sev="2" auth="build" locRef="6" rule="MISRA2008-3_1_1" lnHash="305848218" rule.header="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" tool="c++test" lineHash="305848218" unbViolId="75c27f83-3295-3135-a5ca-04ac2a2e3b7a" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32b5b868-dc76-336b-b6b8-9c5051df75ff" locEndPos="16" locType="sr" hash="-793331324" locEndLn="19" goals="0," />
    <StdViol msg="Variable 'homeCoreLogicObj' is defined in header file" ln="19" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="19" sev="2" auth="build" locRef="6" rule="AUTOSAR-A3_3_1-b" lnHash="305848218" rule.header="Don't define entities with linkage in a header file" tool="c++test" lineHash="305848218" unbViolId="40e03584-0b27-308e-b2c1-4d3c8bf103b8" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b76024b3-b994-3c34-bf41-1b1693300f85" locEndPos="16" locType="sr" hash="-793331324" locEndLn="19" goals="0," />
    <StdViol msg="Variable 'homeCoreLogicObj' is defined in header file" ln="19" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="19" sev="2" auth="build" locRef="6" rule="AUTOSAR-A3_1_1-a" lnHash="305848218" rule.header="Don't define entities with linkage in a header file" tool="c++test" lineHash="305848218" unbViolId="9efbd1b5-d161-3679-9d96-67d04c8520c0" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fab2fd97-7ddb-36ce-a1dd-23d93df240e8" locEndPos="16" locType="sr" hash="-793331324" locEndLn="19" goals="0," />
    <StdViol msg="The 'getHomeCoreLogicObj' function should be preceded by a comment that contains the '@brief' tag" ln="23" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="23" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="42672663" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="42672663" unbViolId="c5f64f7d-5951-39ea-948c-b08f5ae1cf0c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7206eb2f-c41d-3ff7-938d-aec39da12789" locEndPos="20" locType="sr" urgent="true" hash="-793331324" locEndLn="23" goals="1," />
    <StdViol msg="The 'getHomeCoreLogicObj' function should be preceded by a comment that contains the '@return' tag" ln="23" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="23" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="42672663" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="42672663" unbViolId="939f37c1-5b5d-3a83-a2d2-f29545b20838" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abdccd8b-81a7-30b3-b08a-83408543f267" locEndPos="20" locType="sr" urgent="true" hash="-793331324" locEndLn="23" goals="1," />
    <StdViol msg="The 'InitializeHomeCoreLogic' function should be preceded by a comment that contains the '@brief' tag" ln="24" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="24" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="875293782" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="875293782" unbViolId="973b3982-c248-36c2-b9cc-7a69562880ae" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76687fc0-66a4-3cb9-a32c-d573fbe88bf1" locEndPos="10" locType="sr" urgent="true" hash="-793331324" locEndLn="24" goals="1," />
    <StdViol msg="The 'DeInitializeHomeCoreLogic' function should be preceded by a comment that contains the '@brief' tag" ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="25" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-132306249" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-132306249" unbViolId="13917c2b-875a-361a-ace0-c2e86a7c5ade" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3174ea6-65b6-365e-a8db-4d93b83e0bb8" locEndPos="10" locType="sr" urgent="true" hash="-793331324" locEndLn="25" goals="1," />
    <StdViol msg="The 'Init' function should be preceded by a comment that contains the '@brief' tag" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="27" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-2060970594" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-2060970594" unbViolId="bb8f3884-598a-3f07-a595-a4fa9bf14b3b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44d5d7c6-f411-38f8-963f-3aad621895a8" locEndPos="10" locType="sr" urgent="true" hash="-793331324" locEndLn="27" goals="1," />
    <StdViol msg="The 'DeInit' function should be preceded by a comment that contains the '@brief' tag" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="28" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-1410746147" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1410746147" unbViolId="1f60930a-1874-36ec-94a2-3920a18b64f2" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ea0f942-b293-393c-ba96-3e76b4246e1f" locEndPos="10" locType="sr" urgent="true" hash="-793331324" locEndLn="28" goals="1," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="30" sev="4" auth="build" locRef="6" rule="MISRA2008-3_9_2" lnHash="2126238946" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="2126238946" unbViolId="5439be84-6856-36ad-96fa-7ce8876c2e0f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6332d4ad-bed4-3026-8d6b-f90de8270616" locEndPos="5" locType="sr" hash="-793331324" locEndLn="30" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="30" sev="2" auth="build" locRef="6" rule="AUTOSAR-A3_9_1-b" lnHash="2126238946" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="2126238946" unbViolId="61cce20a-ab16-323e-bd0f-056943c73e34" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="953978ec-e1b5-3c6c-ae38-3cc3509dd0a2" locEndPos="5" locType="sr" hash="-793331324" locEndLn="30" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@brief' tag" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="30" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="2126238946" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2126238946" unbViolId="1e963e7c-8c7a-3867-b9af-1214bf34a96d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39209263-a080-3c37-a015-d6f878889bdf" locEndPos="9" locType="sr" urgent="true" hash="-793331324" locEndLn="30" goals="1," />
    <StdViol msg="The 'componentID' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="30" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="2126238946" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2126238946" unbViolId="9f5fa58a-95ea-3df6-9dc3-10a0e14ff396" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44b5bc86-1c94-3a73-b75d-f4dc57ef1488" locEndPos="9" locType="sr" urgent="true" hash="-793331324" locEndLn="30" goals="1," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@return' tag" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="30" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="2126238946" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2126238946" unbViolId="8ea94389-20be-33b1-b1a8-2d1ab29811d6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4276d3f6-ccfb-3da9-8235-68f65dc14111" locEndPos="9" locType="sr" urgent="true" hash="-793331324" locEndLn="30" goals="1," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="30" sev="4" auth="build" locRef="6" rule="MISRA2008-3_9_2" lnHash="2126238946" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="2126238946" unbViolId="2e6ae8fe-76cf-3c34-a321-905ffbafff79" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2577e71-b4ef-3fe5-a39e-512e24cd2ceb" locEndPos="25" locType="sr" hash="-793331324" locEndLn="30" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="30" sev="2" auth="build" locRef="6" rule="AUTOSAR-A3_9_1-b" lnHash="2126238946" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="2126238946" unbViolId="2737ac6c-c925-39cf-99ee-aed1309a3eac" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0837c794-10e1-3933-a5c5-44c6944a3ab9" locEndPos="25" locType="sr" hash="-793331324" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="32" sev="4" auth="build" locRef="6" rule="MISRA2008-3_9_2" lnHash="-559863169" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-559863169" unbViolId="4a9e0e49-f73b-3ea0-8a38-32ebd8c70e35" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bdc54a5-c241-36ea-9fea-078f12f61b12" locEndPos="5" locType="sr" hash="-793331324" locEndLn="32" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="32" sev="2" auth="build" locRef="6" rule="AUTOSAR-A3_9_1-b" lnHash="-559863169" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-559863169" unbViolId="1465564e-51e4-327b-807e-59380b23d470" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0cd9d33-5771-30e2-b284-6a930e0ff37a" locEndPos="5" locType="sr" hash="-793331324" locEndLn="32" goals="0," />
    <StdViol msg="The 'CloseApp' function should be preceded by a comment that contains the '@brief' tag" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="32" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-559863169" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-559863169" unbViolId="1120e33c-5e01-3e77-a457-6704bd0d6eff" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5127d46a-86aa-3bda-83ca-118c39e32891" locEndPos="9" locType="sr" urgent="true" hash="-793331324" locEndLn="32" goals="1," />
    <StdViol msg="The 'componentID' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="32" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-559863169" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-559863169" unbViolId="894d845e-9abe-3110-8307-d0bfa18d8859" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ed5e9b1-d9a5-3394-b65d-cd7e81c70dc7" locEndPos="9" locType="sr" urgent="true" hash="-793331324" locEndLn="32" goals="1," />
    <StdViol msg="The 'CloseApp' function should be preceded by a comment that contains the '@return' tag" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="32" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-559863169" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-559863169" unbViolId="91486d22-2718-374b-af3c-232840aef6ac" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c9e0b85-2243-3962-a8cd-84825ddc20ec" locEndPos="9" locType="sr" urgent="true" hash="-793331324" locEndLn="32" goals="1," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="32" sev="4" auth="build" locRef="6" rule="MISRA2008-3_9_2" lnHash="-559863169" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-559863169" unbViolId="b5abdf19-2823-3c6e-abeb-071be9346a23" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08ee3e19-b398-3e3f-a9cc-f094f992c616" locEndPos="24" locType="sr" hash="-793331324" locEndLn="32" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="32" sev="2" auth="build" locRef="6" rule="AUTOSAR-A3_9_1-b" lnHash="-559863169" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-559863169" unbViolId="0dc0dfd9-da15-3acb-93fe-22db3d4b7b4e" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="baa83223-4c54-31ab-b156-0599d188874e" locEndPos="24" locType="sr" hash="-793331324" locEndLn="32" goals="0," />
    <StdViol msg="The 'PublishEvent' function should be preceded by a comment that contains the '@brief' tag" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-263255622" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-263255622" unbViolId="dd3195b5-44c2-3f33-b3ec-b7c1b758fb12" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42f0b130-fc9e-3203-aa64-0db449a6192d" locEndPos="10" locType="sr" urgent="true" hash="-793331324" locEndLn="34" goals="1," />
    <StdViol msg="The 'topic' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-263255622" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-263255622" unbViolId="9dd931cb-466c-36eb-a8d2-ce9d298e16b9" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1fb640b-6051-3334-b597-504b4f53fbbf" locEndPos="10" locType="sr" urgent="true" hash="-793331324" locEndLn="34" goals="1," />
    <StdViol msg="The 'data' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-263255622" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-263255622" unbViolId="658258ed-c83b-3513-8108-5331bf71a519" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4de419c2-118f-3125-b9f3-2db74bf2b4cb" locEndPos="10" locType="sr" urgent="true" hash="-793331324" locEndLn="34" goals="1," />
    <StdViol msg="The 'size' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="2" auth="build" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-263255622" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-263255622" unbViolId="131152bf-3a37-37d5-ba53-98d0b2d3b9fc" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30860b8b-0c42-3a90-874a-86533fb31f74" locEndPos="10" locType="sr" hash="-793331324" locEndLn="34" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="4" auth="build" locRef="6" rule="MISRA2008-3_9_2" lnHash="-263255622" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-263255622" unbViolId="7023de91-ef0f-34f7-afa0-4345d6aca788" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d022d52-e74f-370a-b932-dcc1bb88de50" locEndPos="29" locType="sr" hash="-793331324" locEndLn="34" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="2" auth="build" locRef="6" rule="AUTOSAR-A3_9_1-b" lnHash="-263255622" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-263255622" unbViolId="33a897d4-ca1f-3137-bbf3-2f3105b48dcd" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58f6eb04-71dc-37dd-9c79-943b29653300" locEndPos="29" locType="sr" hash="-793331324" locEndLn="34" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="4" auth="build" locRef="6" rule="MISRA2008-3_9_2" lnHash="-263255622" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-263255622" unbViolId="a6c7908a-e5e2-312b-8e38-609f83706f9f" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8935e636-beab-3014-8738-f7713659b028" locEndPos="48" locType="sr" hash="-793331324" locEndLn="34" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="2" auth="build" locRef="6" rule="AUTOSAR-A3_9_1-b" lnHash="-263255622" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-263255622" unbViolId="5b10d2bb-bc14-3705-953f-ac85529c030d" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa9fdbb2-3f16-318d-8804-99726c129fc7" locEndPos="48" locType="sr" hash="-793331324" locEndLn="34" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="4" auth="build" locRef="6" rule="MISRA2008-3_9_2" lnHash="-263255622" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-263255622" unbViolId="787a9c5e-a0ba-3a7b-989e-5171b17d5baf" locStartPos="60" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="529cffbd-a183-3185-8911-a760a4286403" locEndPos="61" locType="sr" hash="-793331324" locEndLn="34" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locStartln="34" sev="2" auth="build" locRef="6" rule="AUTOSAR-A3_9_1-b" lnHash="-263255622" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-263255622" unbViolId="28f212ed-f2bf-3d71-8ffe-145ad9a56862" locStartPos="60" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbd2779e-fe1b-33d0-94e3-579823407803" locEndPos="61" locType="sr" hash="-793331324" locEndLn="34" goals="0," />
    <StdViol msg="The directly included &quot;Event.h&quot; header does not contain declarations required to compile the 'HomeCoreLogic.h' file" ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="18" sev="2" auth="build" locRef="7" rule="AUTOSAR-A16_2_2-a" lnHash="-68559979" rule.header="A file should directly include only the headers that contain declarations and definitions required to compile that file" tool="c++test" lineHash="-68559979" unbViolId="6f42f38b-72c9-3845-bf35-76894715ddce" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0754252-9c9f-3576-bc80-c60ce7045444" locEndPos="1" locType="sr" urgent="true" hash="1501198083" locEndLn="18" goals="1," />
    <StdViol msg="The 'g_logTag' variable has only one use" ln="23" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="23" sev="2" auth="build" locRef="7" rule="AUTOSAR-M0_1_4-a" lnHash="-103844439" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-103844439" unbViolId="08626375-d12c-3c53-9894-6b5c1d8c994b" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="bd5359ad-04e2-33f0-b6dc-696131626da5" locEndPos="29" locType="sr" hash="1501198083" locEndLn="23" goals="0," />
    <StdViol msg="The 'g_logTag' variable has only one use" ln="23" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="23" sev="2" auth="build" locRef="7" rule="MISRA2008-0_1_4" lnHash="-103844439" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-103844439" unbViolId="a14b9ac2-cd67-34ab-8f61-82213bdf3787" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0337e491-414a-3531-b2ce-cfbe2cc0cb9a" locEndPos="29" locType="sr" hash="1501198083" locEndLn="23" goals="0," />
    <StdViol msg="The declaration of the 'HomeCoreLogic' type should be preceded by a comment that contains the '@brief' tag" ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="25" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-a" lnHash="-605453288" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-605453288" unbViolId="da874fce-b67e-332d-a702-1cb1cb312caf" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="698bf512-76e7-38e9-87d0-3ef90a8b5960" locEndPos="11" locType="sr" urgent="true" hash="1501198083" locEndLn="25" goals="1," />
    <StdViol msg="Class 'HomeCoreLogic' should be final" ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="25" sev="4" auth="build" locRef="7" rule="AUTOSAR-A12_4_2-a" lnHash="-605453288" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-605453288" unbViolId="ae50d047-366b-356e-a646-243436c572ce" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0afcffc-2317-3a0a-8efa-c5f7d5be6e7b" locEndPos="11" locType="sr" hash="1501198083" locEndLn="25" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="28" sev="4" auth="build" locRef="7" rule="MISRA2008-3_9_2" lnHash="-670776209" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-670776209" unbViolId="37d192e9-ebb6-34f1-a3ac-d37ff343a38c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8df793c5-699c-319a-a7b0-a671c37247b6" locEndPos="9" locType="sr" urgent="true" hash="1501198083" locEndLn="28" goals="1," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="28" sev="2" auth="build" locRef="7" rule="AUTOSAR-A3_9_1-b" lnHash="-670776209" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-670776209" unbViolId="49120166-2212-39b5-a603-0fa51b8063e7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98a51bda-eaf5-3794-8536-c04348a49329" locEndPos="9" locType="sr" hash="1501198083" locEndLn="28" goals="0," />
    <StdViol msg="The 'GenRandomNumber' function should be preceded by a comment that contains the '@brief' tag" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="28" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-a" lnHash="-670776209" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-670776209" unbViolId="941cebc5-fe18-3c81-ae4d-c47d7a455d2a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d22dd73-00fa-3444-9327-1b2f729adf80" locEndPos="13" locType="sr" urgent="true" hash="1501198083" locEndLn="28" goals="1," />
    <StdViol msg="The 'GenRandomNumber' function should be preceded by a comment that contains the '@return' tag" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="28" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-b" lnHash="-670776209" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-670776209" unbViolId="86e33643-c774-3632-a288-dacc807c7b11" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a036ee6-0589-34ae-8e9d-aa0d87f07d68" locEndPos="13" locType="sr" urgent="true" hash="1501198083" locEndLn="28" goals="1," />
    <StdViol msg="The 'HomeCoreLogic' function should be preceded by a comment that contains the '@brief' tag" ln="31" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="31" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-a" lnHash="2118472346" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2118472346" unbViolId="4e7d1cc5-bc90-3046-981d-3668dc9ee6f9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bcbe913-471a-33d9-89eb-116e2c59b6d0" locEndPos="9" locType="sr" urgent="true" hash="1501198083" locEndLn="31" goals="1," />
    <StdViol msg="The 'HomeCoreLogic' function should be defined with =default" ln="31" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="31" sev="2" auth="build" locRef="7" rule="AUTOSAR-A12_7_1-a" lnHash="2118472346" rule.header="Define special members as =default when the behavior is equivalent to the compiler's behavior" tool="c++test" lineHash="2118472346" unbViolId="fab5dc88-c937-315b-9e0b-cd4586cf97f3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1f43396-8ec5-33c3-8b70-7216c927f1ed" locEndPos="9" locType="sr" hash="1501198083" locEndLn="31" goals="0," />
    <StdViol msg="The '~HomeCoreLogic' function should be preceded by a comment that contains the '@brief' tag" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="32" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-a" lnHash="-1565624552" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1565624552" unbViolId="8d085dbc-dbda-36cc-8f8c-da72c07013e7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34c18072-3701-3ccc-a513-0307988df18b" locEndPos="9" locType="sr" urgent="true" hash="1501198083" locEndLn="32" goals="1," />
    <StdViol msg="The '~HomeCoreLogic' function should be defined with =default" ln="32" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="32" sev="2" auth="build" locRef="7" rule="AUTOSAR-A12_7_1-a" lnHash="-1565624552" rule.header="Define special members as =default when the behavior is equivalent to the compiler's behavior" tool="c++test" lineHash="-1565624552" unbViolId="34d5f60f-d0fb-3106-b5e7-793f30d5cac4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0ec1c03-1ed1-309b-88a7-1971917cf8b8" locEndPos="9" locType="sr" hash="1501198083" locEndLn="32" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="34" sev="4" auth="build" locRef="7" rule="MISRA2008-3_9_2" lnHash="244829410" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="244829410" unbViolId="cf24c69f-1622-315c-aecb-b01715568456" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc121113-5bbe-3003-8313-72c639b965f1" locEndPos="9" locType="sr" urgent="true" hash="1501198083" locEndLn="34" goals="1," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="34" sev="2" auth="build" locRef="7" rule="AUTOSAR-A3_9_1-b" lnHash="244829410" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="244829410" unbViolId="378fdb1e-1eed-34ec-917d-165d8987ab07" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c92eaaf-8320-3a47-b501-e8ce8199e1c6" locEndPos="9" locType="sr" hash="1501198083" locEndLn="34" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@brief' tag" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="34" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-a" lnHash="244829410" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="244829410" unbViolId="95b90684-ee46-3ab2-aabe-106d67299034" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87217536-9d24-3ba5-8bb8-cc5995ec297f" locEndPos="13" locType="sr" urgent="true" hash="1501198083" locEndLn="34" goals="1," />
    <StdViol msg="The 'componentID' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="34" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-b" lnHash="244829410" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="244829410" unbViolId="2135aa0b-3daf-34a0-91e2-1e893d9bcbad" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="211a0521-a04f-3440-bae5-383b53158727" locEndPos="13" locType="sr" urgent="true" hash="1501198083" locEndLn="34" goals="1," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@return' tag" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="34" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-b" lnHash="244829410" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="244829410" unbViolId="ef4ddae7-4804-3259-8c4a-58a112b72502" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2de66379-7549-3dce-a2b2-ee1b8ee018a8" locEndPos="13" locType="sr" urgent="true" hash="1501198083" locEndLn="34" goals="1," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="34" sev="4" auth="build" locRef="7" rule="MISRA2008-3_9_2" lnHash="244829410" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="244829410" unbViolId="63649420-225d-3586-bd9e-10e1e54b839c" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9381b7c2-3fa2-3ed3-9fe1-cbedab4f7881" locEndPos="29" locType="sr" urgent="true" hash="1501198083" locEndLn="34" goals="1," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="34" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="34" sev="2" auth="build" locRef="7" rule="AUTOSAR-A3_9_1-b" lnHash="244829410" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="244829410" unbViolId="2f6b5297-d878-3b44-8dd0-33eba263b5f8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cb1e8a2-77c3-3b52-bf2e-459894b4a49c" locEndPos="29" locType="sr" hash="1501198083" locEndLn="34" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="36" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="36" sev="4" auth="build" locRef="7" rule="MISRA2008-3_9_2" lnHash="1734750847" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1734750847" unbViolId="936ccf41-7803-3fbb-a55c-eca073939663" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c1d9014-e753-3a5e-9b69-08d0825c83cc" locEndPos="9" locType="sr" hash="1501198083" locEndLn="36" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="36" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="36" sev="2" auth="build" locRef="7" rule="AUTOSAR-A3_9_1-b" lnHash="1734750847" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1734750847" unbViolId="a5531b0c-aacd-32a2-892d-97690e34df3d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79b0ae1e-2173-30f1-9b1c-ca52e228afd4" locEndPos="9" locType="sr" hash="1501198083" locEndLn="36" goals="0," />
    <StdViol msg="The 'CloseApp' function should be preceded by a comment that contains the '@brief' tag" ln="36" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="36" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-a" lnHash="1734750847" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1734750847" unbViolId="605c0e25-95d8-316e-bee7-677fea0c3ca4" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15de3d04-f741-3a74-b901-6eed8164d4cf" locEndPos="13" locType="sr" urgent="true" hash="1501198083" locEndLn="36" goals="1," />
    <StdViol msg="The 'componentID' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="36" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="36" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-b" lnHash="1734750847" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1734750847" unbViolId="af189a7d-ff11-3b4a-aad5-4922762f0d59" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67b92cee-6cf0-3a1f-ba9a-d71b756d0bd9" locEndPos="13" locType="sr" urgent="true" hash="1501198083" locEndLn="36" goals="1," />
    <StdViol msg="The 'CloseApp' function should be preceded by a comment that contains the '@return' tag" ln="36" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="36" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-b" lnHash="1734750847" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1734750847" unbViolId="d0209b96-8978-3740-a70d-bbab5081ffe3" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="780a99ae-41e7-3e99-a363-f15cda7192b7" locEndPos="13" locType="sr" urgent="true" hash="1501198083" locEndLn="36" goals="1," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="36" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="36" sev="4" auth="build" locRef="7" rule="MISRA2008-3_9_2" lnHash="1734750847" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1734750847" unbViolId="a341fc30-6984-3b5e-9042-5300834877f8" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="123d50d2-fd67-318f-9142-9ef2665ec565" locEndPos="28" locType="sr" hash="1501198083" locEndLn="36" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="36" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="36" sev="2" auth="build" locRef="7" rule="AUTOSAR-A3_9_1-b" lnHash="1734750847" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1734750847" unbViolId="80ec6012-6b94-3ea6-9fc3-b69a08bbf660" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f0de38d-b497-3e9b-97ba-2e1bd949da4a" locEndPos="28" locType="sr" hash="1501198083" locEndLn="36" goals="0," />
    <StdViol msg="The 'PublishEvent' function should be preceded by a comment that contains the '@brief' tag" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-a" lnHash="-826797638" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-826797638" unbViolId="948035e6-6508-33f3-ad99-a4216ed8d000" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eca94fe6-4e84-3f66-9e33-0a7d49266437" locEndPos="14" locType="sr" urgent="true" hash="1501198083" locEndLn="38" goals="1," />
    <StdViol msg="The 'topic' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-b" lnHash="-826797638" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-826797638" unbViolId="14df848d-0ca8-31c7-a7ea-29cb935034e2" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a85f7a97-3ec6-3a20-99fa-1d575c75442b" locEndPos="14" locType="sr" urgent="true" hash="1501198083" locEndLn="38" goals="1," />
    <StdViol msg="The 'data' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-b" lnHash="-826797638" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-826797638" unbViolId="31685694-91b4-3ad3-b84a-023388ead4f5" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8c552fe-44a7-3a70-b544-7922c38a31b7" locEndPos="14" locType="sr" urgent="true" hash="1501198083" locEndLn="38" goals="1," />
    <StdViol msg="The 'size' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="2" auth="build" locRef="7" rule="AUTOSAR-A2_7_3-b" lnHash="-826797638" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-826797638" unbViolId="9ec54e57-905b-3f80-ac99-fba79fc603fd" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1995871-0f8b-33a8-9aa6-d9724de9451e" locEndPos="14" locType="sr" urgent="true" hash="1501198083" locEndLn="38" goals="1," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="4" auth="build" locRef="7" rule="MISRA2008-3_9_2" lnHash="-826797638" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-826797638" unbViolId="ff3b09a4-5674-3a03-8603-5138d820c951" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cb06d90-2f04-3567-857f-bcf6acbe5fe6" locEndPos="33" locType="sr" hash="1501198083" locEndLn="38" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="2" auth="build" locRef="7" rule="AUTOSAR-A3_9_1-b" lnHash="-826797638" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-826797638" unbViolId="eed766ae-4f26-3edb-8cc6-eaf38fdff48e" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c6a4802-05ec-3a2a-9853-5a6dabb3c3e2" locEndPos="33" locType="sr" hash="1501198083" locEndLn="38" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="4" auth="build" locRef="7" rule="MISRA2008-3_9_2" lnHash="-826797638" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-826797638" unbViolId="db238105-a43f-3164-bb0f-b9060dd6d4ab" locStartPos="51" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf126fb0-fde8-322b-a21f-b350905d361f" locEndPos="52" locType="sr" hash="1501198083" locEndLn="38" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="2" auth="build" locRef="7" rule="AUTOSAR-A3_9_1-b" lnHash="-826797638" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-826797638" unbViolId="b90d79b8-d7c5-3c55-9891-9700866f9259" locStartPos="51" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21f60ca3-49d6-3ace-802d-ca975564606a" locEndPos="52" locType="sr" hash="1501198083" locEndLn="38" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="4" auth="build" locRef="7" rule="MISRA2008-3_9_2" lnHash="-826797638" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-826797638" unbViolId="4ed8e96d-6b73-3954-94da-aeb8140d3346" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c40645f-0c30-36ce-acbd-86fb3dabb7d5" locEndPos="65" locType="sr" hash="1501198083" locEndLn="38" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="38" locFile="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locStartln="38" sev="2" auth="build" locRef="7" rule="AUTOSAR-A3_9_1-b" lnHash="-826797638" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-826797638" unbViolId="5e366160-057b-30bb-9359-831b20b5b3c7" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb6eb6e3-a1cf-3f50-a179-32a8b81c3875" locEndPos="65" locType="sr" hash="1501198083" locEndLn="38" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="19" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="19" sev="2" auth="build" locRef="8" rule="MISRA2008-7_3_6" lnHash="316495161" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="316495161" unbViolId="225c67e1-ef71-3cf7-bba5-ef5d1464c6dd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="722b0c74-0d50-32a8-9912-25683c377c40" locEndPos="1" locType="sr" urgent="true" hash="-1697377942" locEndLn="19" goals="1," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="19" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="19" sev="2" auth="build" locRef="8" rule="AUTOSAR-M7_3_6-a" lnHash="316495161" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="316495161" unbViolId="d3962e14-af86-34e0-bf61-4990aa81540d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b32db15c-3bdb-37c1-8d1e-d9a18c4b444c" locEndPos="1" locType="sr" urgent="true" hash="-1697377942" locEndLn="19" goals="1," />
    <StdViol msg="'using' directive was found: namespace 'std' " ln="19" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="19" sev="2" auth="build" locRef="8" rule="AUTOSAR-M7_3_4-a" lnHash="316495161" rule.header="using-directives shall not be used" tool="c++test" lineHash="316495161" unbViolId="30e36d95-8810-3b39-aead-fce16e79543c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa6fe7ae-43c7-30aa-81c1-1b3e56eb8eb8" locEndPos="1" locType="sr" hash="-1697377942" locEndLn="19" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'std' " ln="19" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="19" sev="2" auth="build" locRef="8" rule="MISRA2008-7_3_4" lnHash="316495161" rule.header="using-directives shall not be used" tool="c++test" lineHash="316495161" unbViolId="8011a49d-203c-3531-9480-1f8b9697635f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5d2cc99-9b47-30b5-8a6e-15f69305e962" locEndPos="1" locType="sr" hash="-1697377942" locEndLn="19" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="20" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="20" sev="2" auth="build" locRef="8" rule="MISRA2008-7_3_6" lnHash="-1886170847" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-1886170847" unbViolId="6b07e45c-f321-3451-a10b-0482bcaf3ecc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f39c3b7-ff07-3dce-bf98-d9184aa5a695" locEndPos="1" locType="sr" urgent="true" hash="-1697377942" locEndLn="20" goals="1," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="20" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="20" sev="2" auth="build" locRef="8" rule="AUTOSAR-M7_3_6-a" lnHash="-1886170847" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-1886170847" unbViolId="36c74ecd-4351-3b69-b6bb-409dde4ad756" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62fcf244-e2e3-3eb7-828e-8d326369cf16" locEndPos="1" locType="sr" urgent="true" hash="-1697377942" locEndLn="20" goals="1," />
    <StdViol msg="'using' directive was found: namespace 'lifecycleManager' " ln="20" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="20" sev="2" auth="build" locRef="8" rule="AUTOSAR-M7_3_4-a" lnHash="-1886170847" rule.header="using-directives shall not be used" tool="c++test" lineHash="-1886170847" unbViolId="00516964-9ede-340f-8054-3384505e32f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e251ddf1-b9a3-3ab5-933d-daeddd68ded0" locEndPos="1" locType="sr" hash="-1697377942" locEndLn="20" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'lifecycleManager' " ln="20" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="20" sev="2" auth="build" locRef="8" rule="MISRA2008-7_3_4" lnHash="-1886170847" rule.header="using-directives shall not be used" tool="c++test" lineHash="-1886170847" unbViolId="8c516275-44dd-3cc0-9887-fbae4ff9df0a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0fcd8c5-96f8-3815-8809-3877a14df8fe" locEndPos="1" locType="sr" hash="-1697377942" locEndLn="20" goals="0," />
    <StdViol msg="The 'g_logTag' variable has only one use" ln="24" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="24" sev="2" auth="build" locRef="8" rule="AUTOSAR-M0_1_4-a" lnHash="1237911031" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="1237911031" unbViolId="ef281b72-e9a8-3af4-875c-dbf27a27e444" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c4aa186e-706b-3d30-8326-afa08fcf8c26" locEndPos="29" locType="sr" hash="-1697377942" locEndLn="24" goals="0," />
    <StdViol msg="The 'g_logTag' variable has only one use" ln="24" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="24" sev="2" auth="build" locRef="8" rule="MISRA2008-0_1_4" lnHash="1237911031" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="1237911031" unbViolId="cb3896e4-b3ef-39d0-b44d-7d0c107736c9" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6d913e1a-1856-3a72-8c17-4fce5ba86b5a" locEndPos="29" locType="sr" hash="-1697377942" locEndLn="24" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="26" sev="4" auth="build" locRef="8" rule="MISRA2008-3_9_2" lnHash="-1639664710" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1639664710" unbViolId="f4f3a4ba-15cf-3fa3-8648-5303b0397c38" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5cf677f-04d0-3736-bbd7-fe1d93fad902" locEndPos="5" locType="sr" hash="-1697377942" locEndLn="26" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="26" sev="2" auth="build" locRef="8" rule="AUTOSAR-A3_9_1-b" lnHash="-1639664710" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1639664710" unbViolId="4da0d1bc-68ee-3e1d-bbd8-304fca2b7796" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8e3d44a-3d7e-32ae-9a9e-743693d2bb1b" locEndPos="5" locType="sr" hash="-1697377942" locEndLn="26" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@brief' tag" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="26" sev="2" auth="build" locRef="8" rule="AUTOSAR-A2_7_3-a" lnHash="-1639664710" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1639664710" unbViolId="7c2e5c62-d842-35d8-b2d0-655e1eaabe1b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a36b24f2-042d-32c8-a800-7151bfe104c7" locEndPos="9" locType="sr" hash="-1697377942" locEndLn="26" goals="0," />
    <StdViol msg="The 'uri' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="26" sev="2" auth="build" locRef="8" rule="AUTOSAR-A2_7_3-b" lnHash="-1639664710" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1639664710" unbViolId="569ea27b-c9c2-312b-8f99-ac0f4521de43" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a3f8c23-6d6f-3557-a096-2cb910b5fd88" locEndPos="9" locType="sr" hash="-1697377942" locEndLn="26" goals="0," />
    <StdViol msg="The 'LaunchApp' function should be preceded by a comment that contains the '@return' tag" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locStartln="26" sev="2" auth="build" locRef="8" rule="AUTOSAR-A2_7_3-b" lnHash="-1639664710" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1639664710" unbViolId="114148bf-b795-3b5c-9042-9c8998a982e0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bedd7fc1-1d95-39ba-9aaa-1c1c0823571b" locEndPos="9" locType="sr" hash="-1697377942" locEndLn="26" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="24" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="24" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_6" lnHash="316495161" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="316495161" unbViolId="c9c96e0e-e30f-3622-a23f-b8ba52987819" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fc05126-78b1-3e10-a8bb-35838c81afe1" locEndPos="1" locType="sr" urgent="true" hash="-426736768" locEndLn="24" goals="1," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="24" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="24" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_6-a" lnHash="316495161" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="316495161" unbViolId="2a2d652c-2010-3087-8ca9-b790415cc7be" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbc7d3bc-5b4c-3e4f-86ab-c24249351042" locEndPos="1" locType="sr" urgent="true" hash="-426736768" locEndLn="24" goals="1," />
    <StdViol msg="'using' directive was found: namespace 'std' " ln="24" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="24" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_4-a" lnHash="316495161" rule.header="using-directives shall not be used" tool="c++test" lineHash="316495161" unbViolId="733045f1-088f-36db-ad4c-3866fe493d4a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2165b37-314d-35be-a6c3-539997288837" locEndPos="1" locType="sr" hash="-426736768" locEndLn="24" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'std' " ln="24" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="24" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_4" lnHash="316495161" rule.header="using-directives shall not be used" tool="c++test" lineHash="316495161" unbViolId="b32ffed3-5b8e-309a-8b23-1c24d435cd6e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6290bb0-5986-3944-b5da-c9a87a0cfbb7" locEndPos="1" locType="sr" hash="-426736768" locEndLn="24" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="25" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_6" lnHash="-1362114351" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-1362114351" unbViolId="dbe9bd54-e1d8-3e2f-80dd-3ebbf5bf5c01" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54d65cad-9670-3f85-9051-7111ba2dda79" locEndPos="1" locType="sr" urgent="true" hash="-426736768" locEndLn="25" goals="1," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="25" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_6-a" lnHash="-1362114351" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-1362114351" unbViolId="325c326e-7b9c-3202-a785-e1401b775032" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ad2cae7-4eb7-34ce-bf15-34582482d1d6" locEndPos="1" locType="sr" urgent="true" hash="-426736768" locEndLn="25" goals="1," />
    <StdViol msg="'using' directive was found: namespace 'eventManager' " ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="25" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_4-a" lnHash="-1362114351" rule.header="using-directives shall not be used" tool="c++test" lineHash="-1362114351" unbViolId="3873e9aa-7849-3ea5-94bd-816fe1462ba3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97654ba1-165d-316e-8ae5-d51f1d239c15" locEndPos="1" locType="sr" hash="-426736768" locEndLn="25" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'eventManager' " ln="25" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="25" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_4" lnHash="-1362114351" rule.header="using-directives shall not be used" tool="c++test" lineHash="-1362114351" unbViolId="191f2419-6f81-31b3-af76-e3e235be1a0e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74656446-51a5-3d26-b666-d2a4ee8d13eb" locEndPos="1" locType="sr" hash="-426736768" locEndLn="25" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="26" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_6" lnHash="-1942823906" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-1942823906" unbViolId="9db7c270-548e-32aa-afb9-35a9addec4ab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9c1a3a4-53c2-3d83-ba69-211e9ea5f751" locEndPos="1" locType="sr" hash="-426736768" locEndLn="26" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="26" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_6-a" lnHash="-1942823906" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-1942823906" unbViolId="1609920c-4f86-387d-83fc-a52e646ea558" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b959f2c-1a0d-3ef6-be7f-04f3e9aaeef5" locEndPos="1" locType="sr" hash="-426736768" locEndLn="26" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'utils' " ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="26" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_4-a" lnHash="-1942823906" rule.header="using-directives shall not be used" tool="c++test" lineHash="-1942823906" unbViolId="c16eaa0f-b07e-3b35-bfed-86e95f0ad09d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="591e39d3-b3c0-3365-950f-e1b107c72b82" locEndPos="1" locType="sr" hash="-426736768" locEndLn="26" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'utils' " ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="26" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_4" lnHash="-1942823906" rule.header="using-directives shall not be used" tool="c++test" lineHash="-1942823906" unbViolId="033e10a4-3e56-3eb6-8d57-bfab4c0952fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bb19b27-2cce-3685-aab3-11c700fe4ebe" locEndPos="1" locType="sr" hash="-426736768" locEndLn="26" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="27" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_6" lnHash="426399538" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="426399538" unbViolId="bc9a1a4a-e6f2-34bb-874e-6faff0e49a57" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96b409a2-7b32-3544-b023-ffeed6da5ea6" locEndPos="1" locType="sr" hash="-426736768" locEndLn="27" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="27" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_6-a" lnHash="426399538" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="426399538" unbViolId="5d24336a-a153-335e-8d63-a2551128694c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0502dcb4-74b2-32dd-8406-d2719eca4730" locEndPos="1" locType="sr" hash="-426736768" locEndLn="27" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'status' " ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="27" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_4-a" lnHash="426399538" rule.header="using-directives shall not be used" tool="c++test" lineHash="426399538" unbViolId="63bf2983-3746-398a-835b-6523b621501f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5010e60-3e58-3b16-8c5f-725391528608" locEndPos="1" locType="sr" hash="-426736768" locEndLn="27" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'status' " ln="27" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="27" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_4" lnHash="426399538" rule.header="using-directives shall not be used" tool="c++test" lineHash="426399538" unbViolId="d69c33f3-3dfa-32c4-b6a1-c2c67949cf4b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1367cf9c-4ee9-384c-a8fc-e45127a00c3a" locEndPos="1" locType="sr" hash="-426736768" locEndLn="27" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="28" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_6" lnHash="-864038620" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-864038620" unbViolId="2d1a2511-b9a3-3c75-9554-a166d16afd08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0dbc1d3-39d3-3384-9f30-0d3ba48ccec7" locEndPos="1" locType="sr" hash="-426736768" locEndLn="28" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="28" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_6-a" lnHash="-864038620" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-864038620" unbViolId="6ca36ac4-3a0d-39c9-bd54-db4e770b646c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fa4b3da-2b7b-37fe-9d68-8e0e17f07669" locEndPos="1" locType="sr" hash="-426736768" locEndLn="28" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'framework' " ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="28" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_4-a" lnHash="-864038620" rule.header="using-directives shall not be used" tool="c++test" lineHash="-864038620" unbViolId="790a45c0-91ff-3cb0-aa96-621d349bfa4e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ae79767-a791-3c50-8360-2f7c971d1f7c" locEndPos="1" locType="sr" hash="-426736768" locEndLn="28" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'framework' " ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="28" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_4" lnHash="-864038620" rule.header="using-directives shall not be used" tool="c++test" lineHash="-864038620" unbViolId="76f8e235-87f0-3000-a359-7ae4c9f57425" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a06ebfd1-3df0-3a30-8160-b8900e3d88f6" locEndPos="1" locType="sr" hash="-426736768" locEndLn="28" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="29" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_6" lnHash="-864038620" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-864038620" unbViolId="2c10058d-c464-391d-a745-ddf6c821c2a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b02c640-494d-3817-ab55-d71876c6ad01" locEndPos="1" locType="sr" hash="-426736768" locEndLn="29" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="29" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_6-a" lnHash="-864038620" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-864038620" unbViolId="f7c18c4d-16e4-3d0b-8e33-4d418f792c25" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcdcc8bb-65c5-3853-af08-3850cd6b65dd" locEndPos="1" locType="sr" hash="-426736768" locEndLn="29" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'framework' " ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="29" sev="2" auth="build" locRef="9" rule="AUTOSAR-M7_3_4-a" lnHash="-864038620" rule.header="using-directives shall not be used" tool="c++test" lineHash="-864038620" unbViolId="a2c1b602-2196-3e3d-b9d4-d8440eea4e9c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d698c8ae-8c54-3a4a-bcfc-9c7635e810cf" locEndPos="1" locType="sr" hash="-426736768" locEndLn="29" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'framework' " ln="29" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="29" sev="2" auth="build" locRef="9" rule="MISRA2008-7_3_4" lnHash="-864038620" rule.header="using-directives shall not be used" tool="c++test" lineHash="-864038620" unbViolId="b42f9bb3-4921-3543-b6c6-ac3ebf6a893f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="665836eb-8c31-3e60-bd92-0f62ea32d0e2" locEndPos="1" locType="sr" hash="-426736768" locEndLn="29" goals="0," />
    <StdViol msg="The 'g_logTag' variable has only one use" ln="33" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="33" sev="2" auth="build" locRef="9" rule="AUTOSAR-M0_1_4-a" lnHash="183931028" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="183931028" unbViolId="0a2aa561-2396-3d02-9270-b8956f95cc74" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="82ecdd39-47a1-39db-a381-c14b0e3ece38" locEndPos="29" locType="sr" hash="-426736768" locEndLn="33" goals="0," />
    <StdViol msg="The 'g_logTag' variable has only one use" ln="33" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="33" sev="2" auth="build" locRef="9" rule="MISRA2008-0_1_4" lnHash="183931028" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="183931028" unbViolId="87d3738f-aee3-3fc7-b230-d14aa6e33977" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="eec90352-f168-38bb-abae-02ba57b9d798" locEndPos="29" locType="sr" hash="-426736768" locEndLn="33" goals="0," />
    <StdViol msg="The 'Publish' function should be preceded by a comment that contains the '@brief' tag" ln="35" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="35" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-a" lnHash="634339907" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="634339907" unbViolId="b3e394bc-6b57-30fc-811d-4f5084fab7df" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e26923b-4912-3ec3-b16b-27b1920c2115" locEndPos="10" locType="sr" hash="-426736768" locEndLn="35" goals="0," />
    <StdViol msg="The 'topic' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="35" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="35" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-b" lnHash="634339907" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="634339907" unbViolId="eae05e4f-be89-3da6-b9f0-ecadc5bad4af" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0d9fee7-a24f-39af-8705-237cc6d79035" locEndPos="10" locType="sr" hash="-426736768" locEndLn="35" goals="0," />
    <StdViol msg="The 'eventData' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="35" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="35" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-b" lnHash="634339907" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="634339907" unbViolId="48e31430-e4c9-3a37-8a53-2ff6ce11753c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="849200ce-af7e-30c0-b9a4-5d4ff6cec18a" locEndPos="10" locType="sr" hash="-426736768" locEndLn="35" goals="0," />
    <StdViol msg="The typedef should be preceded by a comment that contains '@brief' tag" ln="39" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="39" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-a" lnHash="178932896" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="178932896" unbViolId="cd9c0efb-35fb-3bba-a157-7985e9594662" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="443afd54-7132-3e48-a8db-e33edbd45f39" locEndPos="15" locType="sr" hash="-426736768" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="39" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="39" sev="4" auth="build" locRef="9" rule="MISRA2008-3_9_2" lnHash="178932896" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="178932896" unbViolId="80fc8f4e-43d3-3639-855c-3f985b763a47" locStartPos="51" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2724283-4f42-36de-8afc-f62435525981" locEndPos="52" locType="sr" hash="-426736768" locEndLn="39" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="39" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="39" sev="2" auth="build" locRef="9" rule="AUTOSAR-A3_9_1-b" lnHash="178932896" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="178932896" unbViolId="d32161d4-6ced-3c4d-a620-f3b939ab08ea" locStartPos="51" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5762d751-4830-3a3e-9efe-1c679b638499" locEndPos="52" locType="sr" hash="-426736768" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="41" sev="4" auth="build" locRef="9" rule="MISRA2008-3_9_2" lnHash="1211038961" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1211038961" unbViolId="d0b2b7d2-69ba-30ba-99a9-6f7f9c559f02" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8756f035-18af-354d-a82d-74e10c3aab22" locEndPos="9" locType="sr" hash="-426736768" locEndLn="41" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="41" sev="2" auth="build" locRef="9" rule="AUTOSAR-A3_9_1-b" lnHash="1211038961" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1211038961" unbViolId="701e054b-bb9d-3321-9208-c08b4d130cc5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d1e8be1-c935-35b4-ad27-3bb6046995cc" locEndPos="9" locType="sr" hash="-426736768" locEndLn="41" goals="0," />
    <StdViol msg="The 'SubscribeLaunchState' function should be preceded by a comment that contains the '@brief' tag" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="41" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-a" lnHash="1211038961" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1211038961" unbViolId="649e3128-11b4-3343-9f02-e4a4dc060581" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f54abfcf-c9a7-32f1-bc03-883ffc9dc4dc" locEndPos="13" locType="sr" hash="-426736768" locEndLn="41" goals="0," />
    <StdViol msg="The 'topic' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="41" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-b" lnHash="1211038961" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1211038961" unbViolId="a29cbc57-6b5c-338a-ba80-7b2d4c72a006" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d515db0-32a2-30ad-a320-f405ed6fbd52" locEndPos="13" locType="sr" hash="-426736768" locEndLn="41" goals="0," />
    <StdViol msg="The 'callback' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="41" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-b" lnHash="1211038961" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1211038961" unbViolId="8339e599-23ae-3862-bb7a-ee6557a1e967" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3bce8f6-449e-3216-a0bf-fe5d8dfeaf5e" locEndPos="13" locType="sr" hash="-426736768" locEndLn="41" goals="0," />
    <StdViol msg="The 'SubscribeLaunchState' function should be preceded by a comment that contains the '@return' tag" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="41" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-b" lnHash="1211038961" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1211038961" unbViolId="08147a66-b680-38ee-95d2-84943bc0bf06" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a5e166d-4099-3617-a758-298d3cd2070c" locEndPos="13" locType="sr" hash="-426736768" locEndLn="41" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="41" sev="4" auth="build" locRef="9" rule="MISRA2008-3_9_2" lnHash="1211038961" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1211038961" unbViolId="9387f406-06ec-3477-8e5c-16646ae240e1" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2b18019-a610-37cf-af3c-3d2b65262034" locEndPos="40" locType="sr" hash="-426736768" locEndLn="41" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="41" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="41" sev="2" auth="build" locRef="9" rule="AUTOSAR-A3_9_1-b" lnHash="1211038961" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1211038961" unbViolId="77c41b31-9f37-34ae-abef-a589211d0461" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0a76ebb-4f52-3bb9-aa28-5a449b9b2e2f" locEndPos="40" locType="sr" hash="-426736768" locEndLn="41" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="43" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="43" sev="4" auth="build" locRef="9" rule="MISRA2008-3_9_2" lnHash="214278652" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="214278652" unbViolId="74fb334b-4d15-3d53-9a2a-29cf31e6246c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="360f6689-22e5-3af6-b5d6-3c9766dcc759" locEndPos="9" locType="sr" hash="-426736768" locEndLn="43" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="43" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="43" sev="2" auth="build" locRef="9" rule="AUTOSAR-A3_9_1-b" lnHash="214278652" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="214278652" unbViolId="937fbce7-1790-3396-a0e0-78ca31a22f57" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50d14121-4824-363c-acaf-093d1c14dd58" locEndPos="9" locType="sr" hash="-426736768" locEndLn="43" goals="0," />
    <StdViol msg="The 'UnSubscribeLaunchState' function should be preceded by a comment that contains the '@brief' tag" ln="43" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="43" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-a" lnHash="214278652" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="214278652" unbViolId="65716e9c-2053-3180-a7e2-45691fd467f1" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2ebb23b-2d5d-3c08-a8fa-bd3a67ec1c90" locEndPos="13" locType="sr" hash="-426736768" locEndLn="43" goals="0," />
    <StdViol msg="The 'UnSubscribeLaunchState' function should be preceded by a comment that contains the '@return' tag" ln="43" locFile="/bddedf55f3c941dd/binderPlugin/src/Event.h" locStartln="43" sev="2" auth="build" locRef="9" rule="AUTOSAR-A2_7_3-b" lnHash="214278652" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="214278652" unbViolId="a5ebb5ef-ad9d-3aff-8d81-a229335d04f1" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfbbcd4c-3b4d-31e8-93ae-3c4f658eb3d8" locEndPos="13" locType="sr" hash="-426736768" locEndLn="43" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="18" sev="2" auth="build" locRef="10" rule="MISRA2008-7_3_6" lnHash="-864038620" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-864038620" unbViolId="e0b3d5e1-4405-3e62-bd5a-5da11cd71180" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abcbff7e-b2a0-365d-b491-dc64a85ee775" locEndPos="1" locType="sr" hash="224884445" locEndLn="18" goals="0," />
    <StdViol msg="The 'using' directive shall not be used in a header file" ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="18" sev="2" auth="build" locRef="10" rule="AUTOSAR-M7_3_6-a" lnHash="-864038620" rule.header="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" tool="c++test" lineHash="-864038620" unbViolId="56dd5a5f-02db-3ea9-a068-cdd4005c840a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a2d89db-e5e0-3da7-8931-af92cd22f99b" locEndPos="1" locType="sr" hash="224884445" locEndLn="18" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'framework' " ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="18" sev="2" auth="build" locRef="10" rule="AUTOSAR-M7_3_4-a" lnHash="-864038620" rule.header="using-directives shall not be used" tool="c++test" lineHash="-864038620" unbViolId="5927fd74-687d-34da-aae1-10a9eaf50985" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8afd5730-7cbf-30d1-97ea-70de4cdf9f7e" locEndPos="1" locType="sr" hash="224884445" locEndLn="18" goals="0," />
    <StdViol msg="'using' directive was found: namespace 'framework' " ln="18" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="18" sev="2" auth="build" locRef="10" rule="MISRA2008-7_3_4" lnHash="-864038620" rule.header="using-directives shall not be used" tool="c++test" lineHash="-864038620" unbViolId="dd238761-fc86-30c6-9e1d-59987ce72190" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa1a57e8-f3ba-33b8-a49c-30b914b33dfc" locEndPos="1" locType="sr" hash="224884445" locEndLn="18" goals="0," />
    <StdViol msg="The 'EnableFileLogging' function should be preceded by a comment that contains the '@brief' tag" ln="22" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="22" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-a" lnHash="1731503250" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1731503250" unbViolId="c21cee5a-ec14-31f5-9d17-8cc8eb07e63e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7eed7b82-117c-3fa6-89cf-62ceca27ae4c" locEndPos="10" locType="sr" hash="224884445" locEndLn="22" goals="0," />
    <StdViol msg="The 'path' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="22" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="22" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-b" lnHash="1731503250" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1731503250" unbViolId="ef89818e-4ab2-3e8e-9f08-9c5a7b0879ff" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="647e5740-3dee-3886-8246-40c86b8ee1be" locEndPos="10" locType="sr" hash="224884445" locEndLn="22" goals="0," />
    <StdViol msg="The 'EnableFileLogging' function should be preceded by a comment that contains the '@return' tag" ln="22" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="22" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-b" lnHash="1731503250" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1731503250" unbViolId="ea4f5038-56dc-35b6-9e44-310c8566d399" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eccd0abd-2d1e-33e7-a575-a17be6a668ff" locEndPos="10" locType="sr" hash="224884445" locEndLn="22" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="22" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="22" sev="4" auth="build" locRef="10" rule="MISRA2008-3_9_2" lnHash="1731503250" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1731503250" unbViolId="c5a8d975-3a16-3e92-ae05-6c46812a314c" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8297b94-71f3-30e1-86de-3d50d3327d95" locEndPos="34" locType="sr" hash="224884445" locEndLn="22" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="22" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="22" sev="2" auth="build" locRef="10" rule="AUTOSAR-A3_9_1-b" lnHash="1731503250" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1731503250" unbViolId="f1cf72ec-e6b6-31d9-a622-f513f566881f" locStartPos="33" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6b63624-d350-39dc-b6ad-8f1d362de029" locEndPos="34" locType="sr" hash="224884445" locEndLn="22" goals="0," />
    <StdViol msg="The 'DisableFileLogging' function should be preceded by a comment that contains the '@brief' tag" ln="24" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="24" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-a" lnHash="-739542423" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-739542423" unbViolId="076904d4-0557-3511-8b7c-73920c0a736e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30b3b697-8da6-3459-b11e-f58a669354dd" locEndPos="10" locType="sr" hash="224884445" locEndLn="24" goals="0," />
    <StdViol msg="The 'DisableFileLogging' function should be preceded by a comment that contains the '@return' tag" ln="24" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="24" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-b" lnHash="-739542423" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-739542423" unbViolId="9efcb5a3-1014-3fa1-b977-32ce3bec57b3" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6742bbcd-42d8-31ee-b8ec-7a34f0734cb0" locEndPos="10" locType="sr" hash="224884445" locEndLn="24" goals="0," />
    <StdViol msg="The 'LogErr' function should be preceded by a comment that contains the '@brief' tag" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="26" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-a" lnHash="736660371" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="736660371" unbViolId="0a748a3b-f999-3d66-8d0a-3640dee4417f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a81e4c11-92bd-3454-9cef-eac1515882af" locEndPos="10" locType="sr" hash="224884445" locEndLn="26" goals="0," />
    <StdViol msg="The 'content' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="26" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-b" lnHash="736660371" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="736660371" unbViolId="467808a8-7b98-322e-ba84-dabfecb893d7" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c54016e-ec0e-36f1-b30a-a62ef6fabc7b" locEndPos="10" locType="sr" hash="224884445" locEndLn="26" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="26" sev="4" auth="build" locRef="10" rule="MISRA2008-3_9_2" lnHash="736660371" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="736660371" unbViolId="fe4cc9db-67a4-3c1d-a613-1a3693131de9" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56211830-79bd-3375-b433-53e46fd6fbfc" locEndPos="23" locType="sr" hash="224884445" locEndLn="26" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="26" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="26" sev="2" auth="build" locRef="10" rule="AUTOSAR-A3_9_1-b" lnHash="736660371" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="736660371" unbViolId="8bc45536-b7a6-3604-aa4a-8563fdf7aaef" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="458d0abf-9321-3f49-9b2b-6daf51c6e886" locEndPos="23" locType="sr" hash="224884445" locEndLn="26" goals="0," />
    <StdViol msg="The 'LogWarning' function should be preceded by a comment that contains the '@brief' tag" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="28" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-a" lnHash="1669380746" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1669380746" unbViolId="5a43e5e8-3915-326f-bff4-709ea75fbb4e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26188f39-e48d-3e06-a4ed-b85f42e4d819" locEndPos="10" locType="sr" hash="224884445" locEndLn="28" goals="0," />
    <StdViol msg="The 'content' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="28" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-b" lnHash="1669380746" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1669380746" unbViolId="0d00da78-3b4e-375d-9ecd-01d322952a1d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="877d15d0-9a13-3e31-9000-e287c1b16417" locEndPos="10" locType="sr" hash="224884445" locEndLn="28" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="28" sev="4" auth="build" locRef="10" rule="MISRA2008-3_9_2" lnHash="1669380746" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1669380746" unbViolId="55b8a9a8-8bad-3ead-8fb3-781df738cbb7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c057bdfb-99ef-3562-9f59-892cabe26473" locEndPos="27" locType="sr" hash="224884445" locEndLn="28" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="28" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="28" sev="2" auth="build" locRef="10" rule="AUTOSAR-A3_9_1-b" lnHash="1669380746" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1669380746" unbViolId="aa691f71-ff08-382b-bf82-04e0282180c7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8114c1c7-f01f-39c1-9fec-416c376b8550" locEndPos="27" locType="sr" hash="224884445" locEndLn="28" goals="0," />
    <StdViol msg="The 'LogInfo' function should be preceded by a comment that contains the '@brief' tag" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="30" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-a" lnHash="668646028" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="668646028" unbViolId="8cccb6b6-880e-3441-a2ab-d73ae4b72b78" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44572200-dfa3-34a5-aee7-84cf6f3c9f30" locEndPos="10" locType="sr" hash="224884445" locEndLn="30" goals="0," />
    <StdViol msg="The 'content' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="30" sev="2" auth="build" locRef="10" rule="AUTOSAR-A2_7_3-b" lnHash="668646028" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="668646028" unbViolId="1de132dc-8b6b-331d-9e85-e66b23043836" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27771ac5-bc41-3c57-8114-717a1d4da6ff" locEndPos="10" locType="sr" hash="224884445" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="30" sev="4" auth="build" locRef="10" rule="MISRA2008-3_9_2" lnHash="668646028" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="668646028" unbViolId="75a4d125-4bf9-3d3e-9b4e-7a4b681b950d" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba7bf90d-a4ac-3ef3-8d51-007dd8119781" locEndPos="24" locType="sr" hash="224884445" locEndLn="30" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="30" locFile="/bddedf55f3c941dd/binderPlugin/src/Log.h" locStartln="30" sev="2" auth="build" locRef="10" rule="AUTOSAR-A3_9_1-b" lnHash="668646028" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="668646028" unbViolId="a5694035-7222-344a-99a2-a43e76388903" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c112d377-0cef-3167-af51-26ce6e91dc47" locEndPos="24" locType="sr" hash="224884445" locEndLn="30" goals="0," />
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="478">
            <Project id="bddedf55f3c941dd" name="bddedf55f3c941dd" supp="0" total="478">
               <Res name="binderPlugin" supp="0" total="478">
                  <Res name="src" supp="0" total="478">
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.cpp" locRef="1" locType="sr" name="HomeInterface.cpp" supp="0" total="54" />
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.cpp" locRef="2" locType="sr" name="HomeCoreLogic.cpp" supp="0" total="78" />
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/Launch.cpp" locRef="3" locType="sr" name="Launch.cpp" supp="0" total="10" />
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/Event.cpp" locRef="4" locType="sr" name="Event.cpp" supp="0" total="123" />
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/Log.cpp" locRef="5" locType="sr" name="Log.cpp" supp="0" total="55" />
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/HomeInterface.h" locRef="6" locType="sr" name="HomeInterface.h" supp="0" total="39" />
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/HomeCoreLogic.h" locRef="7" locType="sr" name="HomeCoreLogic.h" supp="0" total="37" />
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/Launch.h" locRef="8" locType="sr" name="Launch.h" supp="0" total="15" />
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/Event.h" locRef="9" locType="sr" name="Event.h" supp="0" total="44" />
                     <Res loc="/bddedf55f3c941dd/binderPlugin/src/Log.h" locRef="10" locType="sr" name="Log.h" supp="0" total="23" />
                  </Res>
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
