<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="2023-07-14" climode="true" execEnv="win32_x86_64" hasViols="false" id="1688869699222" lang="en_US" machine="DESKTOP-0Q6E4JP" project="" tag="${scontrol_branch}-win32_x86_64" time="2023-07-14T10:19:59+08:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2022.1.0" user="devtest">
   <TestConfig machine="DESKTOP-0Q6E4JP" name="Coverage" pseudoUrl="builtin://Coverage" user="devtest" />
   <Authors>
      <Author id="dev1" name="devtest" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.coverage" name="Parasoft C/C++ Coverage Analyzer" ver="10.6.0.20220614B1716" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="0">
      
   </Goals>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="devtest" hash="0" locRef="1" rejBy="com.parasoft.xtest.cpp.filter.fileexists.FileExistsPreFilter" totLns="-1" uri="file://DESKTOP-0Q6E4JP/C:/Users/devtest/AppData/Local/Temp/ParaSoft.8128.23593/ParaSoft.8128.4285.cc" />
         <Loc auth="devtest" hash="-2070577696" locRef="2" totLns="255" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/gtest-message.h" />
         <Loc auth="devtest" hash="-1076111740" locRef="3" totLns="1434" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/gtest-param-test.h" />
         <Loc auth="devtest" hash="-1719477725" locRef="4" totLns="1108" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/gtest-printers.h" />
         <Loc auth="devtest" hash="934641843" locRef="5" totLns="184" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/gtest-test-part.h" />
         <Loc auth="devtest" hash="-129840858" locRef="6" totLns="2366" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/gtest.h" />
         <Loc auth="devtest" hash="-1390819024" locRef="7" totLns="280" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h" />
         <Loc auth="devtest" hash="2110544018" locRef="8" totLns="211" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/internal/gtest-filepath.h" />
         <Loc auth="devtest" hash="-799801344" locRef="9" totLns="1320" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/internal/gtest-internal.h" />
         <Loc auth="devtest" hash="1216607612" locRef="10" totLns="243" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h" />
         <Loc auth="devtest" hash="1255335631" locRef="11" totLns="720" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/internal/gtest-param-util.h" />
         <Loc auth="devtest" hash="2072039845" locRef="12" totLns="2701" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/internal/gtest-port.h" />
         <Loc auth="devtest" hash="-160825092" locRef="13" totLns="3348" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/include/gtest/internal/gtest-type-util.h" />
         <Loc auth="devtest" hash="1939497318" locRef="14" totLns="1573" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/src/gtest-death-test.cc" />
         <Loc auth="devtest" hash="974292888" locRef="15" totLns="385" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/src/gtest-filepath.cc" />
         <Loc auth="devtest" hash="-835011966" locRef="16" totLns="1189" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/src/gtest-internal-inl.h" />
         <Loc auth="devtest" hash="-474095146" locRef="17" totLns="1319" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/src/gtest-port.cc" />
         <Loc auth="devtest" hash="795394987" locRef="18" totLns="457" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/src/gtest-printers.cc" />
         <Loc auth="devtest" hash="1320348825" locRef="19" totLns="104" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/src/gtest-test-part.cc" />
         <Loc auth="devtest" hash="-946511413" locRef="20" totLns="118" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/src/gtest-typed-test.cc" />
         <Loc auth="devtest" hash="2122243142" locRef="21" totLns="6061" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/src/gtest.cc" />
         <Loc auth="devtest" hash="0" locRef="22" rejBy="com.parasoft.xtest.cpp.filter.fileexists.FileExistsPreFilter" totLns="-1" uri="file://DESKTOP-0Q6E4JP/C:/Users/devtest/AppData/Local/Temp/ParaSoft.416.22994/ParaSoft.416.15962.cc" />
         <Loc auth="devtest" hash="-86383493" locRef="23" totLns="1262" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/include/gmock/gmock-actions.h" />
         <Loc auth="devtest" hash="729879865" locRef="24" totLns="153" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/include/gmock/gmock-cardinalities.h" />
         <Loc auth="devtest" hash="-416652436" locRef="25" totLns="5268" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/include/gmock/gmock-matchers.h" />
         <Loc auth="devtest" hash="1943310633" locRef="26" totLns="92" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/include/gmock/gmock-more-matchers.h" />
         <Loc auth="devtest" hash="-854550705" locRef="27" totLns="1918" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/include/gmock/gmock-spec-builders.h" />
         <Loc auth="devtest" hash="-273915397" locRef="28" totLns="575" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" />
         <Loc auth="devtest" hash="1953665929" locRef="29" totLns="54" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/src/gmock_main.cc" />
         <Loc auth="devtest" hash="0" locRef="30" rejBy="com.parasoft.xtest.cpp.filter.fileexists.FileExistsPreFilter" totLns="-1" uri="file://DESKTOP-0Q6E4JP/C:/Users/devtest/AppData/Local/Temp/ParaSoft.11080.20988/ParaSoft.11080.7271.cpp" />
         <Loc auth="devtest" hash="1598712918" locRef="31" totLns="6" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/main.cpp" />
         <Loc auth="devtest" hash="0" locRef="32" rejBy="com.parasoft.xtest.cpp.filter.fileexists.FileExistsPreFilter" totLns="-1" uri="file://DESKTOP-0Q6E4JP/C:/Users/devtest/AppData/Local/Temp/ParaSoft.10540.19755/ParaSoft.10540.24924.cc" />
         <Loc auth="devtest" hash="-2092223974" locRef="33" totLns="155" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/src/gmock-cardinalities.cc" />
         <Loc auth="devtest" hash="124848875" locRef="34" totLns="203" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/src/gmock-internal-utils.cc" />
         <Loc auth="devtest" hash="-1532208964" locRef="35" totLns="572" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/src/gmock-matchers.cc" />
         <Loc auth="devtest" hash="1415952815" locRef="36" totLns="879" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/src/gmock-spec-builders.cc" />
         <Loc auth="devtest" hash="-1267144588" locRef="37" totLns="204" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googlemock/src/gmock.cc" />
         <Loc auth="devtest" hash="0" locRef="38" rejBy="com.parasoft.xtest.cpp.filter.fileexists.FileExistsPreFilter" totLns="-1" uri="file://DESKTOP-0Q6E4JP/C:/Users/devtest/AppData/Local/Temp/ParaSoft.10252.23299/ParaSoft.10252.1596.cpp" />
         <Loc auth="devtest" hash="2105514256" locRef="39" totLns="16" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/src/division/division.cpp" />
         <Loc auth="devtest" hash="-1717789826" locRef="40" totLns="52" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/src/division/division.h" />
         <Loc auth="devtest" hash="1535005727" locRef="41" totLns="33" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/src/main.cpp" />
         <Loc auth="devtest" hash="0" locRef="42" rejBy="com.parasoft.xtest.cpp.filter.fileexists.FileExistsPreFilter" totLns="-1" uri="file://DESKTOP-0Q6E4JP/C:/Users/devtest/AppData/Local/Temp/ParaSoft.6544.7244/ParaSoft.6544.13007.cc" />
         <Loc auth="devtest" hash="-1256976007" locRef="43" totLns="37" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/lib/googletest/googletest/src/gtest_main.cc" />
         <Loc auth="devtest" hash="0" locRef="44" rejBy="com.parasoft.xtest.cpp.filter.fileexists.FileExistsPreFilter" totLns="-1" uri="file://DESKTOP-0Q6E4JP/C:/Users/devtest/AppData/Local/Temp/ParaSoft.7836.16826/ParaSoft.7836.12359.cpp" />
         <Loc auth="devtest" hash="-69735008" locRef="45" totLns="63" uri="file://DESKTOP-0Q6E4JP/C:/donAzureAgent/_work/1/s/test/src/divider_tests.cpp" />
      </Locations>
   </Scope>
   
  <SetupProblems>
    <Problem msg="Coverage Analysis" sev="2" totErrs="1" type="Coverage problems:">
      <ErrorList>
        <Error val="The following conflicting functions were detected when collecting static coverage data:&#xd;&#xa;testing::internal::posix::IsDir(const _stat &amp;)&#xd;&#xa;testing::internal::posix::FileNo(_iobuf *)&#xd;&#xa;testing::internal::linked_ptr_internal::join(const testing::internal::linked_ptr_internal*)&#xd;&#xa;testing::internal::linked_ptr_internal::depart()&#xd;&#xa;testing::IsTrueMatcher::IsTrueMatcher()&#xd;&#xa;...&#xd;&#xa;See the full list in: C:\donAzureAgent\_work\1\s\build\cpptest-coverage\cpp-project-template\.\.cpptest\conflicted_functions.txt&#xd;&#xa;Coverage will not be reported for such functions. Review the configuration of coverage analysis to ensure that there are no conflicting functions included in the same scope.&#xd;&#xa;" />
      </ErrorList>
    </Problem>
  </SetupProblems>

   <Exec ownerId="com.parasoft.xtest.checkers.api.execution" time="0:00:01">
      
      <AssocUrls>
         <Tag disp="Requirement" name="req" />
         <Tag disp="Feature request" name="fr" />
         <Tag disp="Problem report" name="pr" />
         <Tag disp="Task" name="task" />
         <Tag disp="Asset" name="asset" />
         <Tag disp="Test" name="test" />
      </AssocUrls>
   
      
      <Categories>
         <CategoryGroup authTot="0;" authUrg="0;" desc="This represents the findings arising from tests that have already been reviewed. This includes exceptions that have been marked as expected, assertion failures from previously reviewed tests, and any other kind of unexpected behavior that needs to be looked at (such as timeouts)." id="GROUP.UTEST.PROBL" label="Fix Unit Test Problems" name="Unit Test Problems" total="0">
            <Category authTot="0;" authUrg="0;" id="EXC" name="Runtime Exceptions" short="exception" total="0" />
            <Category authTot="0;" authUrg="0;" id="FAIL" name="Assertion Failures" short="failure" total="0" />
            <Category authTot="0;" authUrg="0;" id="CON.VIOL" name="Contract Violations" short="contract violation" total="0" />
            <Category authTot="0;" authUrg="0;" id="PROF.PROBL" name="Profiling Problems" short="profiling problem" total="0" />
            <Category authTot="0;" authUrg="0;" id="EXEC.PROBL" name="Execution Problems" short="execution problem" total="0" />
            <Category authTot="0;" authUrg="0;" id="TEST.PROBL" name="Test Problems" short="test problem" total="0" />
         </CategoryGroup>
         <CategoryGroup authTot="0;" authUrg="0;" desc="These are exceptions thrown by automatically generated test cases that need to be reviewed. After review they will be marked as &quot;expected&quot; or code fixed so that the exception does not occur any more." id="GROUP.UNVER.EXC" label="Review Exceptions" name="Exceptions" total="0">
            <Category authTot="0;" authUrg="0;" id="UNVER.EXC" name="Unverified Runtime Exceptions" short="unverified exception" total="0" />
         </CategoryGroup>
         <CategoryGroup authTot="0;" authUrg="0;" desc="These are assertion failures from automatically generated tests that have not been reviewed. This is expected to be zero when the tests are executed as soon as they are generated, but can be non-zero in cases where tests that have not been reviewed, but the execution is repeated." id="GROUP.UNVER.FAIL" label="Review Assertion Failures" name="Assertion Failures" total="0">
            <Category authTot="0;" authUrg="0;" id="UNVER.FAIL" name="Unverified Assertion Failures" short="unverified failure" total="0" />
         </CategoryGroup>
      </Categories>
      <Projects />
      
  <APICoverage />

      
  <TrafficData />
      
  <EnvData />
      <FuncAPISecurity pentest="false">
         
  <Categories />
         
  <Attacks />
      </FuncAPISecurity>
      
  <ExecViols />

      
   <ExecutedTestsDetails type="UT">
      <Total total="0" name="Passed / Total" authErr="0;" authFail="0;" />
   </ExecutedTestsDetails>

      
  <FuncTestDetails />
      <Coverage>
         <Types>
            <CvgType cvgDecor="Marker" dispCvg="executable lines" dispId="Line" dispName="Line Coverage" dispNoCvg="no executable lines" id="LC" />
         </Types>
         <CvgStats>
            <CvgInfo elem="Total" exp="1" num="764" total="3313" val="23">
               <CvgInfo elem="unknown" exp="1" num="764" total="3313" val="23">
                  <CvgInfo elem="divider_tests.cpp" num="19" total="21" val="90">
                     <CvgInfo elem="DividerTest::SetUp()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest::TearDown()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest::verify(int)" num="5" total="5" val="100" />
                     <CvgInfo elem="DividerTest_17_DivideBy_19_Test::DividerTest_17_DivideBy_19_Test()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest_17_DivideBy_19_Test::TestBody()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest_5_DivideBy_2_Test::DividerTest_5_DivideBy_2_Test()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest_5_DivideBy_2_Test::TestBody()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest_9_DivideBy_3_Test::DividerTest_9_DivideBy_3_Test()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest_9_DivideBy_3_Test::TestBody()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest_DivisionByZero_Test::DividerTest_DivisionByZero_Test()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest_DivisionByZero_Test::TestBody()" num="3" total="5" val="60" />
                     <CvgInfo elem="DividerTest_Long_DivideBy_Long_Test::DividerTest_Long_DivideBy_Long_Test()" num="1" total="1" val="100" />
                     <CvgInfo elem="DividerTest_Long_DivideBy_Long_Test::TestBody()" num="1" total="1" val="100" />
                  </CvgInfo>
                  <CvgInfo elem="division.cpp" num="3" total="3" val="100">
                     <CvgInfo elem="Division::divide()" num="3" total="3" val="100" />
                  </CvgInfo>
                  <CvgInfo elem="division.h" num="3" total="4" val="75">
                     <CvgInfo elem="Division::Division(Fraction)" num="1" total="1" val="100" />
                     <CvgInfo elem="Division::~Division()" num="1" total="1" val="100" />
                     <CvgInfo elem="DivisionByZero::what() const" num="1" total="1" val="100" />
                     <CvgInfo elem="operator ==(const DivisionResult &amp;, const DivisionResult &amp;)" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-actions.h" num="0" total="39" val="0">
                     <CvgInfo elem="testing::DefaultValue&lt;void>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::DefaultValue&lt;void>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::DoDefault()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Return()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ReturnNull()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;bool>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;bool>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;char>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;char>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;double>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;double>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;float>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;float>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;int>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;int>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;long long>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;long long>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;long>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;long>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;short>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;short>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;signed char>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;signed char>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned char>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned char>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned int>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned int>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned long long>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned long long>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned long>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned long>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned short>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;unsigned short>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;void>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;void>::Get()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;wchar_t>::Exists()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BuiltInDefaultValue&lt;wchar_t>::Get()" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-cardinalities.cc" num="0" total="40" val="0">
                     <CvgInfo elem="testing::&lt;unnamed>::BetweenCardinalityImpl::BetweenCardinalityImpl(int, int)" num="0" total="10" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::BetweenCardinalityImpl::ConservativeLowerBound() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::BetweenCardinalityImpl::ConservativeUpperBound() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::BetweenCardinalityImpl::DescribeTo(std::ostream*) const" num="0" total="11" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::BetweenCardinalityImpl::IsSatisfiedByCallCount(int) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::BetweenCardinalityImpl::IsSaturatedByCallCount(int) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::FormatTimes(int)" num="0" total="7" val="0" />
                     <CvgInfo elem="testing::AnyNumber()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::AtLeast(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::AtMost(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Between(int, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Cardinality::DescribeActualCallCountTo(int, std::ostream*)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::Exactly(int)" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-cardinalities.h" num="0" total="12" val="0">
                     <CvgInfo elem="testing::Cardinality::Cardinality()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Cardinality::Cardinality(const testing::CardinalityInterface *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Cardinality::ConservativeLowerBound() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Cardinality::ConservativeUpperBound() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Cardinality::DescribeTo(std::ostream*) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Cardinality::IsOverSaturatedByCallCount(int) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Cardinality::IsSatisfiedByCallCount(int) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Cardinality::IsSaturatedByCallCount(int) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::CardinalityInterface::ConservativeLowerBound() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::CardinalityInterface::ConservativeUpperBound() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::CardinalityInterface::~CardinalityInterface()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::MakeCardinality(const testing::CardinalityInterface *)" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-internal-utils.cc" num="0" total="44" val="0">
                     <CvgInfo elem="testing::internal::ConvertIdentifierNameToWords[abi:cxx11](const char *)" num="0" total="9" val="0" />
                     <CvgInfo elem="testing::internal::GetFailureReporter()" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::GetWithoutMatchers()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::GoogleTestFailureReporter::ReportFailure(testing::internal::FailureReporterInterface::FailureType, const char *, int, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::IllegalDoDefault(const char *, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::JoinAsTuple(const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;)" num="0" total="9" val="0" />
                     <CvgInfo elem="testing::internal::Log(testing::internal::LogSeverity, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, int)" num="0" total="14" val="0" />
                     <CvgInfo elem="testing::internal::LogIsVisible(testing::internal::LogSeverity)" num="0" total="5" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-internal-utils.h" num="0" total="8" val="0">
                     <CvgInfo elem="testing::internal::Assert(bool, const char *, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Assert(bool, const char *, int, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::Expect(bool, const char *, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Expect(bool, const char *, int, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::FailureReporterInterface::~FailureReporterInterface()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::WithoutMatchers::WithoutMatchers()" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-matchers.cc" num="0" total="154" val="0">
                     <CvgInfo elem="testing::Matcher&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;>::Matcher(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Matcher&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;>::Matcher(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Matcher&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>::Matcher(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Matcher&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>::Matcher(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FindMaxBipartiteMatching(const testing::internal::MatchMatrix &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FormatMatcherDescription(bool, const char *, const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::LogElementMatcherPairVec(const std::vector&lt;std::pair&lt;unsigned int, unsigned int>, std::allocator&lt;std::pair&lt;unsigned int, unsigned int>>> &amp;, std::ostream*)" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::internal::MatchMatrix::DebugString[abi:cxx11]() const" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::internal::MatchMatrix::NextGraph()" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::internal::MatchMatrix::Randomize()" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::MaxBipartiteMatchState::Compute()" num="0" total="11" val="0" />
                     <CvgInfo elem="testing::internal::MaxBipartiteMatchState::MaxBipartiteMatchState(const testing::internal::MatchMatrix &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::MaxBipartiteMatchState::TryAugment(unsigned int, std::vector&lt;char, std::allocator&lt;char>> *)" num="0" total="9" val="0" />
                     <CvgInfo elem="testing::internal::UnorderedElementsAreMatcherImplBase::DescribeNegationToImpl(std::ostream*) const" num="0" total="24" val="0" />
                     <CvgInfo elem="testing::internal::UnorderedElementsAreMatcherImplBase::DescribeToImpl(std::ostream*) const" num="0" total="24" val="0" />
                     <CvgInfo elem="testing::internal::UnorderedElementsAreMatcherImplBase::FindPairing(const testing::internal::MatchMatrix &amp;, testing::MatchResultListener *) const" num="0" total="19" val="0" />
                     <CvgInfo elem="testing::internal::UnorderedElementsAreMatcherImplBase::VerifyMatchMatrix(const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;, const testing::internal::MatchMatrix &amp;, testing::MatchResultListener *) const" num="0" total="30" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-matchers.h" num="0" total="90" val="0">
                     <CvgInfo elem="testing::ContainsRegex(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ContainsRegex(const testing::internal::RE *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::DoubleEq()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::DoubleEq(double)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::DoubleNear(double)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::DoubleNear(double, double)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EndsWith(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EndsWith(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Eq()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::FloatEq()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::FloatEq(float)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::FloatNear(float)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::FloatNear(float, float)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Ge()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Gt()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::HasSubstr(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::HasSubstr(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsNull()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Le()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Lt()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::MatchResultListener::IsInterested() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::MatchResultListener::MatchResultListener(std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::MatchResultListener::stream()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::MatchResultListener::~MatchResultListener()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Matcher&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;>::Matcher()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Matcher&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;>::Matcher(const testing::MatcherInterface&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;> *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Matcher&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>::Matcher()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Matcher&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>::Matcher(const testing::MatcherInterface&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;> *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Matcher&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>::Matcher(const testing::MatcherInterface&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>> *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::MatcherDescriberInterface::DescribeNegationTo(std::ostream*) const" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::MatcherDescriberInterface::~MatcherDescriberInterface()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::MatchesRegex(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::MatchesRegex(const testing::internal::RE *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::NanSensitiveDoubleEq()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::NanSensitiveDoubleEq(double)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::NanSensitiveDoubleNear(double)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::NanSensitiveDoubleNear(double, double)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::NanSensitiveFloatEq()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::NanSensitiveFloatEq(float)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::NanSensitiveFloatNear(float)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::NanSensitiveFloatNear(float, float)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Ne()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::NotNull()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StartsWith(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StartsWith(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StrCaseEq(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StrCaseEq(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StrCaseNe(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StrCaseNe(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StrEq(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StrEq(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StrNe(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StrNe(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StringMatchResultListener::Clear()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StringMatchResultListener::StringMatchResultListener()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::StringMatchResultListener::str[abi:cxx11]() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CaseInsensitiveCStringEquals(const char *, const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CaseInsensitiveCStringEquals(const wchar_t *, const wchar_t *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DummyMatchResultListener::DummyMatchResultListener()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Eq2Matcher::Desc()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Ge2Matcher::Desc()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Gt2Matcher::Desc()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsNullMatcher::DescribeNegationTo(std::ostream*) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsNullMatcher::DescribeTo(std::ostream*) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsReadableTypeName(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Le2Matcher::Desc()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Lt2Matcher::Desc()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::MatchMatrix::HasEdge(unsigned int, unsigned int) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::MatchMatrix::LhsSize() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::MatchMatrix::MatchMatrix(unsigned int, unsigned int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::MatchMatrix::RhsSize() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::MatchMatrix::SetEdge(unsigned int, unsigned int, bool)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::MatchMatrix::SpaceIndex(unsigned int, unsigned int) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::MatchesRegexMatcher::DescribeNegationTo(std::ostream*) const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::MatchesRegexMatcher::DescribeTo(std::ostream*) const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::MatchesRegexMatcher::MatchesRegexMatcher(const testing::internal::RE *, bool)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Ne2Matcher::Desc()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::NotNullMatcher::DescribeNegationTo(std::ostream*) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::NotNullMatcher::DescribeTo(std::ostream*) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintIfNotEmpty(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, std::ostream*)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::StreamMatchResultListener::StreamMatchResultListener(std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnorderedElementsAreMatcherImplBase::Elements(unsigned int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnorderedElementsAreMatcherImplBase::UnorderedElementsAreMatcherImplBase(testing::internal::UnorderedMatcherRequire::Flags)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnorderedElementsAreMatcherImplBase::match_flags() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnorderedElementsAreMatcherImplBase::matcher_describers()" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-more-matchers.h" num="0" total="6" val="0">
                     <CvgInfo elem="testing::IsEmpty()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsEmptyMatcher::IsEmptyMatcher()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsFalse()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsFalseMatcher::IsFalseMatcher()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsTrue()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsTrueMatcher::IsTrueMatcher()" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-spec-builders.cc" num="0" total="255" val="0">
                     <CvgInfo elem="testing::&lt;unnamed>::MockObjectRegistry::states()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::MockObjectRegistry::~MockObjectRegistry()" num="0" total="20" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::MockObjectState::MockObjectState()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::SetReactionOnUninterestingCalls(const void *, testing::internal::CallReaction)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::Expectation::Expectation()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Expectation::Expectation(const testing::internal::linked_ptr&lt;testing::internal::ExpectationBase> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Expectation::~Expectation()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::InSequence::InSequence()" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::InSequence::~InSequence()" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::Mock::AllowLeak(const void *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::Mock::AllowUninterestingCalls(const void *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Mock::ClearDefaultActionsLocked(void *)" num="0" total="7" val="0" />
                     <CvgInfo elem="testing::Mock::FailUninterestingCalls(const void *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Mock::GetReactionOnUninterestingCalls(const void *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::Mock::Register(const void *, testing::internal::UntypedFunctionMockerBase *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::Mock::RegisterUseByOnCallOrExpectCall(const void *, const char *, int)" num="0" total="9" val="0" />
                     <CvgInfo elem="testing::Mock::UnregisterCallReaction(const void *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::Mock::UnregisterLocked(testing::internal::UntypedFunctionMockerBase *)" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::Mock::VerifyAndClear(void *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::Mock::VerifyAndClearExpectations(void *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::Mock::VerifyAndClearExpectationsLocked(void *)" num="0" total="10" val="0" />
                     <CvgInfo elem="testing::Mock::WarnUninterestingCalls(const void *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Sequence::AddExpectation(const testing::Expectation &amp;) const" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::AllPrerequisitesAreSatisfied() const" num="0" total="11" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::CheckActionCountIfNotDone() const" num="0" total="26" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::DescribeCallCountTo(std::ostream*) const" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::ExpectationBase(const char *, int, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::FindUnsatisfiedPrerequisites(testing::ExpectationSet *) const" num="0" total="12" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::RetireAllPreRequisites()" num="0" total="12" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::SpecifyCardinality(const testing::Cardinality &amp;)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::UntypedTimes(const testing::Cardinality &amp;)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::~ExpectationBase()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::LogWithLocation(testing::internal::LogSeverity, const char *, int, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::ReportUninterestingCall(testing::internal::CallReaction, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="7" val="0" />
                     <CvgInfo elem="testing::internal::UntypedFunctionMockerBase::GetHandleOf(testing::internal::ExpectationBase *)" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::internal::UntypedFunctionMockerBase::MockObject() const" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::UntypedFunctionMockerBase::Name() const" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::UntypedFunctionMockerBase::RegisterOwner(const void *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::UntypedFunctionMockerBase::SetOwnerAndName(const void *, const char *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::UntypedFunctionMockerBase::UntypedFunctionMockerBase()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UntypedFunctionMockerBase::UntypedInvokeWith(void *)" num="0" total="34" val="0" />
                     <CvgInfo elem="testing::internal::UntypedFunctionMockerBase::VerifyAndClearExpectationsLocked()" num="0" total="20" val="0" />
                     <CvgInfo elem="testing::internal::UntypedFunctionMockerBase::~UntypedFunctionMockerBase()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::intToCallReaction(int)" num="0" total="3" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock-spec-builders.h" num="0" total="48" val="0">
                     <CvgInfo elem="testing::Expectation::Expectation(testing::internal::ExpectationBase &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Expectation::Less::operator ()(const testing::Expectation&amp;, const testing::Expectation&amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Expectation::expectation_base() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Expectation::operator !=(const testing::Expectation&amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Expectation::operator ==(const testing::Expectation&amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ExpectationSet::ExpectationSet()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ExpectationSet::ExpectationSet(const testing::Expectation &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ExpectationSet::ExpectationSet(testing::internal::ExpectationBase &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ExpectationSet::begin() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ExpectationSet::end() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ExpectationSet::operator !=(const testing::ExpectationSet&amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ExpectationSet::operator +=(const testing::Expectation &amp;)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::ExpectationSet::operator ==(const testing::ExpectationSet&amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ExpectationSet::size() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Sequence::Sequence()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ActionResultHolder&lt;void>::ActionResultHolder()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ActionResultHolder&lt;void>::PrintAsActionResult(std::ostream*) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ActionResultHolder&lt;void>::Unwrap()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::AssertSpecProperty(bool, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::DescribeLocationTo(std::ostream*) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::ExpectSpecProperty(bool, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::IncrementCallCount()" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::IsOverSaturated() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::IsSatisfied() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::IsSaturated() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::Retire()" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::call_count() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::cardinality() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::cardinality_specified() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::file() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::is_retired() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::line() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::set_cardinality(const testing::Cardinality &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ExpectationBase::source_text() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UntypedActionResultHolderBase::~UntypedActionResultHolderBase()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UntypedOnCallSpecBase::AssertSpecProperty(bool, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UntypedOnCallSpecBase::ExpectSpecProperty(bool, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UntypedOnCallSpecBase::UntypedOnCallSpecBase(const char *, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UntypedOnCallSpecBase::file() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UntypedOnCallSpecBase::line() const" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock.cc" num="0" total="18" val="0">
                     <CvgInfo elem="testing::InitGoogleMock(int *, char **)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::InitGoogleMock(int *, wchar_t **)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ParseGoogleMockBoolFlag(const char *, const char *, bool *)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::ParseGoogleMockFlagValue(const char *, const char *, bool)" num="0" total="9" val="0" />
                     <CvgInfo elem="testing::internal::ParseGoogleMockIntFlag(const char *, const char *, int *)" num="0" total="3" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gmock_main.cc" num="0" total="3" val="0">
                     <CvgInfo elem="main" num="0" total="3" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-death-test-internal.h" num="1" total="11" val="9">
                     <CvgInfo elem="testing::internal::DeathTest::ReturnSentinel::ReturnSentinel(testing::internal::DeathTest*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTest::ReturnSentinel::~ReturnSentinel()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTest::~DeathTest()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestFactory::~DeathTestFactory()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::InternalRunDeathTestFlag::InternalRunDeathTestFlag(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, int, int, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::InternalRunDeathTestFlag::file[abi:cxx11]() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::InternalRunDeathTestFlag::index() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::InternalRunDeathTestFlag::line() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::InternalRunDeathTestFlag::write_fd() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::InternalRunDeathTestFlag::~InternalRunDeathTestFlag()" num="0" total="2" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-death-test.cc" num="1" total="200" val="1">
                     <CvgInfo elem="testing::ExitedWithCode::ExitedWithCode(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ExitedWithCode::operator ()(int) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTest::Create(const char *, const testing::internal::RE *, const char *, int, testing::internal::DeathTest**)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTest::DeathTest()" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::DeathTest::LastMessage()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTest::set_last_death_test_message(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestAbort(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="10" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::Abort(testing::internal::DeathTest::AbortReason)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::DeathTestImpl(const char *, const testing::internal::RE *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::Passed(bool)" num="0" total="23" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::ReadAndInterpretStatusByte()" num="0" total="20" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::outcome() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::read_fd() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::regex() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::set_outcome(testing::internal::DeathTestOutcome)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::set_read_fd(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::set_spawned(bool)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::set_status(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::set_write_fd(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::spawned() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::statement() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::status() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::write_fd() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DeathTestImpl::~DeathTestImpl()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::DefaultDeathTestFactory::Create(const char *, const testing::internal::RE *, const char *, int, testing::internal::DeathTest **)" num="0" total="15" val="0" />
                     <CvgInfo elem="testing::internal::ExitSummary(int)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::ExitedUnsuccessfully(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FailFromInternalError(int)" num="0" total="11" val="0" />
                     <CvgInfo elem="testing::internal::FormatDeathTestOutput(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="10" val="0" />
                     <CvgInfo elem="testing::internal::GetLastErrnoDescription[abi:cxx11]()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::GetStatusFileDescriptor(unsigned int, unsigned int, unsigned int)" num="0" total="17" val="0" />
                     <CvgInfo elem="testing::internal::InDeathTestChild()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ParseInternalRunDeathTestFlag()" num="1" total="13" val="8" />
                     <CvgInfo elem="testing::internal::WindowsDeathTest::AssumeRole()" num="0" total="34" val="0" />
                     <CvgInfo elem="testing::internal::WindowsDeathTest::Wait()" num="0" total="15" val="0" />
                     <CvgInfo elem="testing::internal::WindowsDeathTest::WindowsDeathTest(const char *, const testing::internal::RE *, const char *, int)" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-filepath.cc" num="19" total="75" val="25">
                     <CvgInfo elem="testing::internal::FilePath::ConcatPaths(const testing::internal::FilePath&amp;, const testing::internal::FilePath&amp;)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::CreateDirectoriesRecursively() const" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::CreateFolder() const" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::DirectoryExists() const" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::FileOrDirectoryExists() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::FindLastPathSeparator() const" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::GenerateUniqueFileName(const testing::internal::FilePath&amp;, const testing::internal::FilePath&amp;, const char *)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::GetCurrentDir()" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::internal::FilePath::IsAbsolutePath() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::IsDirectory() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::IsRootDirectory() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::MakeFileName(const testing::internal::FilePath&amp;, const testing::internal::FilePath&amp;, int, const char *)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::Normalize()" num="16" total="19" val="84" />
                     <CvgInfo elem="testing::internal::FilePath::RemoveDirectoryName() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::RemoveExtension(const char *) const" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::RemoveFileName() const" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::RemoveTrailingPathSeparator() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsPathSeparator(char)" num="1" total="1" val="100" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-filepath.h" num="4" total="9" val="44">
                     <CvgInfo elem="testing::internal::FilePath::FilePath()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::FilePath::FilePath(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::FilePath::FilePath(const testing::internal::FilePath&amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::IsEmpty() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::FilePath::Set(const testing::internal::FilePath&amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::FilePath::c_str() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::operator =(const testing::internal::FilePath&amp;)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::FilePath::string[abi:cxx11]() const" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-internal-inl.h" num="61" total="83" val="73">
                     <CvgInfo elem="testing::internal::GTestFlagSaver::GTestFlagSaver()" num="18" total="18" val="100" />
                     <CvgInfo elem="testing::internal::GTestFlagSaver::~GTestFlagSaver()" num="18" total="18" val="100" />
                     <CvgInfo elem="testing::internal::GetNextRandomSeed(int)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::GetRandomSeedFromFlag(int)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::GetUnitTestImpl()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::OsStackTraceGetter::OsStackTraceGetter()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::OsStackTraceGetterInterface::OsStackTraceGetterInterface()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::OsStackTraceGetterInterface::~OsStackTraceGetterInterface()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestPropertyKeyIs::TestPropertyKeyIs(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::TestPropertyKeyIs::operator ()(const testing::TestProperty &amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::TestResultAccessor::ClearTestPartResults(testing::TestResult *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::TestResultAccessor::RecordProperty(testing::TestResult *, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const testing::TestProperty &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::TestResultAccessor::test_part_results(const testing::TestResult &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::AddTestInfo(void (*)(), void (*)(), testing::TestInfo *)" num="4" total="4" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::ClearAdHocTestResult()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::ClearNonAdHocTestResult()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::Failed() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::GetMutableTestCase(int)" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::GetTestCase(int) const" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::InitDeathTestSubprocessControlInfo()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::Passed() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::ad_hoc_test_result() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::catch_exceptions() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::current_test_case() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::current_test_info()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::current_test_info() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::death_test_factory()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::elapsed_time() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::environments()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::gtest_trace_stack()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::gtest_trace_stack() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::internal_run_death_test_flag() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::listeners()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::parameterized_test_registry()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::random()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::random_seed() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::set_catch_exceptions(bool)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::set_current_test_case(testing::TestCase *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::set_current_test_info(testing::TestInfo *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::start_timestamp() const" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-internal.h" num="4" total="28" val="14">
                     <CvgInfo elem="testing::internal::AlwaysFalse()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CodeLocation::CodeLocation(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, int)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ConstCharPtr::ConstCharPtr(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ConstCharPtr::operator bool() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FloatingPoint&lt;double>::Max()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FloatingPoint&lt;float>::Max()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::GetPrefixUntilComma[abi:cxx11](const char *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::Random::Random(unsigned int)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::Random::Reseed(unsigned int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::SkipComma(const char *)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::TestFactoryBase::TestFactoryBase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestFactoryBase::~TestFactoryBase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TypedTestCasePState::AddTestName(const char *, int, const char *, const char *)" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::internal::TypedTestCasePState::GetCodeLocation(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;) const" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::TypedTestCasePState::TestExists(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::TypedTestCasePState::TypedTestCasePState()" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-linked_ptr.h" num="1" total="16" val="6">
                     <CvgInfo elem="testing::internal::linked_ptr_internal::depart()" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::internal::linked_ptr_internal::join(const testing::internal::linked_ptr_internal*)" num="0" total="7" val="0" />
                     <CvgInfo elem="testing::internal::linked_ptr_internal::join_new()" num="1" total="1" val="100" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-message.h" num="1" total="6" val="17">
                     <CvgInfo elem="testing::Message::Message(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Message::Message(const testing::Message&amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Message::operator &lt;&lt;(bool)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Message::operator &lt;&lt;(std::ostream&amp;(*)(std::ostream&amp;))" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::operator &lt;&lt;(std::ostream&amp;, const testing::Message &amp;)" num="1" total="1" val="100" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-param-test.h" num="0" total="1" val="0">
                     <CvgInfo elem="testing::Bool()" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-param-util.h" num="5" total="9" val="56">
                     <CvgInfo elem="testing::internal::ParameterizedTestCaseInfoBase::ParameterizedTestCaseInfoBase()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ParameterizedTestCaseInfoBase::~ParameterizedTestCaseInfoBase()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ParameterizedTestCaseRegistry::ParameterizedTestCaseRegistry()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ParameterizedTestCaseRegistry::RegisterTests()" num="2" total="3" val="67" />
                     <CvgInfo elem="testing::internal::ParameterizedTestCaseRegistry::~ParameterizedTestCaseRegistry()" num="2" total="3" val="67" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-port.cc" num="85" total="324" val="26">
                     <CvgInfo elem="testing::internal::&lt;unnamed>::MemoryIsNotDeallocated::MemoryIsNotDeallocated()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::MemoryIsNotDeallocated::~MemoryIsNotDeallocated()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::ThreadWithParamSupport::CreateThread(testing::internal::ThreadWithParamBase::Runnable *, testing::internal::Notification *)" num="0" total="7" val="0" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::ThreadWithParamSupport::ThreadMain(void *)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::ThreadWithParamSupport::ThreadMainParam::ThreadMainParam(testing::internal::ThreadWithParamBase::Runnable *, testing::internal::Notification *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::AtomMatchesChar(bool, char, char)" num="0" total="15" val="0" />
                     <CvgInfo elem="testing::internal::AutoHandle::AutoHandle()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::AutoHandle::AutoHandle(void *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::AutoHandle::Get() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::AutoHandle::IsCloseable() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::AutoHandle::Reset()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::AutoHandle::Reset(void *)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::AutoHandle::~AutoHandle()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::BoolFromGTestEnv(const char *, bool)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::CaptureStderr()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CaptureStdout()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CaptureStream(int, const char *, testing::internal::CapturedStream **)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::CapturedStream::CapturedStream(int)" num="0" total="11" val="0" />
                     <CvgInfo elem="testing::internal::CapturedStream::GetCapturedString[abi:cxx11]()" num="0" total="9" val="0" />
                     <CvgInfo elem="testing::internal::CapturedStream::~CapturedStream()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ClearInjectableArgvs()" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::FlagToEnvVar(const char *)" num="5" total="5" val="100" />
                     <CvgInfo elem="testing::internal::FormatCompilerIndependentFileLocation[abi:cxx11](const char *, int)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::FormatFileLocation[abi:cxx11](const char *, int)" num="3" total="4" val="75" />
                     <CvgInfo elem="testing::internal::FormatRegexSyntaxError(const char *, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::GTestLog::GTestLog(testing::internal::GTestLogSeverity, const char *, int)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::GTestLog::~GTestLog()" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::GetCapturedStderr[abi:cxx11]()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::GetCapturedStdout[abi:cxx11]()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::GetCapturedStream(testing::internal::CapturedStream **)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::GetFileSize(_iobuf *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::GetInjectableArgvs[abi:cxx11]()" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::GetThreadCount()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Int32FromGTestEnv(const char *, int)" num="4" total="10" val="40" />
                     <CvgInfo elem="testing::internal::IsAsciiDigit(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsAsciiPunct(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsAsciiWhiteSpace(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsAsciiWordChar(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsInSet(char, const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsRepeat(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsValidEscape(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::MatchRegexAnywhere(const char *, const char *)" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::internal::MatchRegexAtHead(const char *, const char *)" num="0" total="10" val="0" />
                     <CvgInfo elem="testing::internal::MatchRepetitionAndRegexAtHead(bool, char, char, const char *, const char *)" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::internal::Mutex::AssertHeld()" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::internal::Mutex::Lock()" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::Mutex::Mutex()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::Mutex::ThreadSafeLazyInit()" num="9" total="13" val="69" />
                     <CvgInfo elem="testing::internal::Mutex::Unlock()" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::Mutex::~Mutex()" num="4" total="4" val="100" />
                     <CvgInfo elem="testing::internal::Notification::Notification()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Notification::Notify()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Notification::WaitForNotification()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::OutputFlagAlsoCheckEnvVar[abi:cxx11]()" num="4" total="5" val="80" />
                     <CvgInfo elem="testing::internal::ParseInt32(const testing::Message &amp;, const char *, int *)" num="0" total="17" val="0" />
                     <CvgInfo elem="testing::internal::RE::FullMatch(const char *, const testing::internal::RE&amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::RE::Init(const char *)" num="0" total="16" val="0" />
                     <CvgInfo elem="testing::internal::RE::PartialMatch(const char *, const testing::internal::RE&amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::RE::~RE()" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::ReadEntireFile[abi:cxx11](_iobuf *)" num="0" total="11" val="0" />
                     <CvgInfo elem="testing::internal::SetInjectableArgvs(const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::SetInjectableArgvs(const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::SleepMilliseconds(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::StringFromGTestEnv(const char *, const char *)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::ThreadLocalRegistry::GetValueOnCurrentThread(const testing::internal::ThreadLocalBase *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ThreadLocalRegistry::OnThreadLocalDestroyed(const testing::internal::ThreadLocalBase *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ThreadLocalRegistryImpl::GetThreadLocalsMapLocked()" num="4" total="4" val="100" />
                     <CvgInfo elem="testing::internal::ThreadLocalRegistryImpl::GetValueOnCurrentThread(const testing::internal::ThreadLocalBase *)" num="12" total="12" val="100" />
                     <CvgInfo elem="testing::internal::ThreadLocalRegistryImpl::OnThreadExit(unsigned long)" num="0" total="12" val="0" />
                     <CvgInfo elem="testing::internal::ThreadLocalRegistryImpl::OnThreadLocalDestroyed(const testing::internal::ThreadLocalBase *)" num="11" total="11" val="100" />
                     <CvgInfo elem="testing::internal::ThreadLocalRegistryImpl::StartWatcherThreadFor(unsigned long)" num="8" total="8" val="100" />
                     <CvgInfo elem="testing::internal::ThreadLocalRegistryImpl::WatcherThreadFunc(void *)" num="2" total="6" val="33" />
                     <CvgInfo elem="testing::internal::ThreadWithParamBase::Join()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ThreadWithParamBase::ThreadWithParamBase(testing::internal::ThreadWithParamBase::Runnable *, testing::internal::Notification *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ThreadWithParamBase::~ThreadWithParamBase()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ValidateRegex(const char *)" num="0" total="30" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-port.h" num="10" total="50" val="20">
                     <CvgInfo elem="testing::internal::FlushInfoLog()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::GTestLog::GetStream()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::GTestMutexLock::GTestMutexLock(testing::internal::Mutex *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::GTestMutexLock::~GTestMutexLock()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::IsAlNum(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsAlpha(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsDigit(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsLower(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsSpace(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsUpper(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsXDigit(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::IsXDigit(wchar_t)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::LogToStderr()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Mutex::Mutex(testing::internal::Mutex::StaticConstructorSelector)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::RE::FullMatch(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const testing::internal::RE&amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::RE::PartialMatch(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const testing::internal::RE&amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::RE::RE(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::RE::RE(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::RE::RE(const testing::internal::RE&amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::RE::pattern() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::StripTrailingSpaces(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::ThreadLocalBase::ThreadLocalBase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ThreadLocalBase::~ThreadLocalBase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ThreadLocalValueHolderBase::~ThreadLocalValueHolderBase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ThreadWithParamBase::Runnable::~Runnable()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ToLower(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ToUpper(char)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::posix::Abort()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::ChDir(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::Close(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::FClose(_iobuf *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::FDOpen(int, const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::FOpen(const char *, const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::FReopen(const char *, const char *, _iobuf *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::FileNo(_iobuf *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::GetEnv(const char *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::posix::IsATTY(int)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::posix::IsDir(const _stat &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::Read(int, void *, unsigned int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::RmDir(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::Stat(const char *, _stat *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::StrCaseCmp(const char *, const char *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::posix::StrDup(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::StrError(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::StrNCpy(char *, const char *, unsigned int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::posix::Write(int, const void *, unsigned int)" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-printers.cc" num="0" total="71" val="0">
                     <CvgInfo elem="testing::&lt;unnamed>::PrintByteSegmentInObjectTo(const unsigned char *, unsigned int, unsigned int, std::ostream*)" num="0" total="9" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::PrintBytesInObjectToImpl(const unsigned char *, unsigned int, std::ostream*)" num="0" total="10" val="0" />
                     <CvgInfo elem="testing::internal2::PrintBytesInObjectTo(const unsigned char *, unsigned int, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::ConditionalPrintAsText(const char *, unsigned int, std::ostream*)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::ContainsUnprintableControlCodes(const char *, unsigned int)" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::IsUTF8TrailByte(unsigned char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::IsValidUTF8(const char *, unsigned int)" num="0" total="15" val="0" />
                     <CvgInfo elem="testing::internal::IsPrintableAscii(wchar_t)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintAsStringLiteralTo(char, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintAsStringLiteralTo(wchar_t, std::ostream*)" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::internal::PrintStringTo(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, std::ostream*)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(const char *, std::ostream*)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(const wchar_t *, std::ostream*)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(signed char, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(unsigned char, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(wchar_t, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintWideStringTo(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UniversalPrintArray(const char *, unsigned int, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UniversalPrintArray(const wchar_t *, unsigned int, std::ostream*)" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-printers.h" num="0" total="24" val="0">
                     <CvgInfo elem="testing::internal::FormatForComparison&lt;char *, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>::Format(char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FormatForComparison&lt;const char *, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>::Format(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FormatForComparison&lt;const wchar_t *, std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>>>::Format(const wchar_t *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::FormatForComparison&lt;wchar_t *, std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>>>::Format(wchar_t *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(bool, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(char *, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(char, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(const signed char *, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(const std::tr1::tuple&lt;> &amp;, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(const unsigned char *, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(signed char *, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(std::nullptr_t, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(unsigned char *, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::PrintTo(wchar_t *, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UniversalTersePrinter&lt;char *>::Print(char *, std::ostream*)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UniversalTersePrinter&lt;const char *>::Print(const char *, std::ostream*)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::UniversalTersePrinter&lt;const wchar_t *>::Print(const wchar_t *, std::ostream*)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::UniversalTersePrinter&lt;wchar_t *>::Print(wchar_t *, std::ostream*)" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-test-part.cc" num="2" total="14" val="14">
                     <CvgInfo elem="testing::TestPartResult::ExtractSummary[abi:cxx11](const char *)" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::TestPartResultArray::Append(const testing::TestPartResult &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestPartResultArray::GetTestPartResult(int) const" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::TestPartResultArray::size() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::HasNewFatalFailureHelper::HasNewFatalFailureHelper()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::HasNewFatalFailureHelper::ReportTestPartResult(const testing::TestPartResult &amp;)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::HasNewFatalFailureHelper::~HasNewFatalFailureHelper()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::operator &lt;&lt;(std::ostream&amp;, const testing::TestPartResult &amp;)" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-test-part.h" num="9" total="14" val="64">
                     <CvgInfo elem="testing::TestPartResult::TestPartResult(testing::TestPartResult::Type, const char *, int, const char *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestPartResult::failed() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestPartResult::fatally_failed() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestPartResult::file_name() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestPartResult::line_number() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestPartResult::message() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestPartResult::nonfatally_failed() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestPartResult::passed() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestPartResult::skipped() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestPartResult::summary() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestPartResult::type() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestPartResultArray::TestPartResultArray()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestPartResultReporterInterface::~TestPartResultReporterInterface()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::HasNewFatalFailureHelper::has_new_fatal_failure() const" num="0" total="1" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-type-util.h" num="0" total="6" val="0">
                     <CvgInfo elem="testing::internal::CanonicalizeForStdLibVersioning(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>)" num="0" total="6" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest-typed-test.cc" num="0" total="40" val="0">
                     <CvgInfo elem="testing::internal::SkipSpaces(const char *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::SplitIntoTestNames(const char *)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::TypedTestCasePState::VerifyRegisteredTestNames(const char *, int, const char *)" num="0" total="32" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest.cc" num="491" total="1481" val="33">
                     <CvgInfo elem="testing::&lt;unnamed>::IsSubstringPred(const char *, const char *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::IsSubstringPred(const wchar_t *, const wchar_t *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::TestNameIs::TestNameIs(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::&lt;unnamed>::TestNameIs::operator ()(const testing::TestInfo *) const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::AssertionFailure()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::AssertionFailure(const testing::Message &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::AssertionResult::AssertionResult(const testing::AssertionResult&amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::AssertionResult::operator !() const" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::AssertionResult::swap(testing::AssertionResult&amp;)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::AssertionSuccess()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::DoubleLE(const char *, const char *, double, double)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::FloatLE(const char *, const char *, float, float)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::FormatCountableNoun(int, const char *, const char *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::FormatTestCaseCount(int)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::FormatTestCount(int)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::FormatWordList(const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;)" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::GetDefaultFilter()" num="3" total="4" val="75" />
                     <CvgInfo elem="testing::GetReservedAttributesForElement(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::InitGoogleTest(int *, char **)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::InitGoogleTest(int *, wchar_t **)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsNotSubstring(const char *, const char *, const char *, const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsNotSubstring(const char *, const char *, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsNotSubstring(const char *, const char *, const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;, const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsNotSubstring(const char *, const char *, const wchar_t *, const wchar_t *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsSubstring(const char *, const char *, const char *, const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsSubstring(const char *, const char *, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsSubstring(const char *, const char *, const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;, const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::IsSubstring(const char *, const char *, const wchar_t *, const wchar_t *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Message::GetString[abi:cxx11]() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::Message::Message()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::Message::operator &lt;&lt;(const std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t>> &amp;)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::Message::operator &lt;&lt;(const wchar_t *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Message::operator &lt;&lt;(wchar_t *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ScopedFakeTestPartResultReporter::Init()" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::ScopedFakeTestPartResultReporter::ReportTestPartResult(const testing::TestPartResult &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(testing::ScopedFakeTestPartResultReporter::InterceptMode, testing::TestPartResultArray *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(testing::TestPartResultArray *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter()" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::ScopedTrace::PushTrace(const char *, int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::ScopedTrace::~ScopedTrace()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TempDir[abi:cxx11]()" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::Test::HasFatalFailure()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::Test::HasNonfatalFailure()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Test::HasSameFixtureClass()" num="10" total="18" val="56" />
                     <CvgInfo elem="testing::Test::IsSkipped()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Test::RecordProperty(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Test::RecordProperty(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, int)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::Test::Run()" num="9" total="9" val="100" />
                     <CvgInfo elem="testing::Test::SetUp()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Test::TearDown()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Test::Test()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::Test::~Test()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::AddTestInfo(testing::TestInfo *)" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::TestCase::ClearResult()" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::TestCase::GetMutableTestInfo(int)" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::TestCase::GetTestInfo(int) const" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::TestCase::Run()" num="15" total="15" val="100" />
                     <CvgInfo elem="testing::TestCase::ShuffleTests(testing::internal::Random *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestCase::TestCase(const char *, const char *, void (*)(), void (*)())" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::UnshuffleTests()" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::TestCase::disabled_test_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestCase::failed_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::reportable_disabled_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::reportable_test_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestCase::skipped_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::successful_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::test_to_run_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::total_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::~TestCase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestEventListeners::Append(testing::TestEventListener *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestEventListeners::EventForwardingEnabled() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestEventListeners::Release(testing::TestEventListener *)" num="3" total="5" val="60" />
                     <CvgInfo elem="testing::TestEventListeners::SetDefaultResultPrinter(testing::TestEventListener *)" num="4" total="4" val="100" />
                     <CvgInfo elem="testing::TestEventListeners::SetDefaultXmlGenerator(testing::TestEventListener *)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::TestEventListeners::SuppressEventForwarding()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestEventListeners::TestEventListeners()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestEventListeners::repeater()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestEventListeners::~TestEventListeners()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestInfo::Run()" num="15" total="15" val="100" />
                     <CvgInfo elem="testing::TestInfo::TestInfo(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const char *, const char *, testing::internal::CodeLocation, const void *, testing::internal::TestFactoryBase *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestInfo::~TestInfo()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestPartFatallyFailed(const testing::TestPartResult &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestPartNonfatallyFailed(const testing::TestPartResult &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestPartResultTypeToString(testing::TestPartResult::Type)" num="2" total="5" val="40" />
                     <CvgInfo elem="testing::TestPartSkipped(const testing::TestPartResult &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestResult::AddTestPartResult(const testing::TestPartResult &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestResult::Clear()" num="4" total="4" val="100" />
                     <CvgInfo elem="testing::TestResult::ClearTestPartResults()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestResult::Failed() const" num="4" total="4" val="100" />
                     <CvgInfo elem="testing::TestResult::GetTestPartResult(int) const" num="2" total="3" val="67" />
                     <CvgInfo elem="testing::TestResult::GetTestProperty(int) const" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::TestResult::HasFatalFailure() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestResult::HasNonfatalFailure() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestResult::RecordProperty(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const testing::TestProperty &amp;)" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::TestResult::Skipped() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestResult::TestResult()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestResult::ValidateTestProperty(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const testing::TestProperty &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestResult::test_property_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestResult::total_part_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestResult::~TestResult()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::AddEnvironment(testing::Environment *)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::UnitTest::AddTestPartResult(testing::TestPartResult::Type, const char *, int, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="10" total="18" val="56" />
                     <CvgInfo elem="testing::UnitTest::Failed() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::GetInstance()" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::UnitTest::GetMutableTestCase(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::GetTestCase(int) const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::Passed() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::PopGTestTrace()" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::UnitTest::PushGTestTrace(const testing::internal::TraceInfo &amp;)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::UnitTest::RecordProperty(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::Run()" num="7" total="7" val="100" />
                     <CvgInfo elem="testing::UnitTest::UnitTest()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::ad_hoc_test_result() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::current_test_case() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::UnitTest::current_test_info() const" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::UnitTest::disabled_test_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::elapsed_time() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::failed_test_case_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::failed_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::listeners()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::original_working_dir() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::parameterized_test_registry()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::random_seed() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::reportable_disabled_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::reportable_test_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::skipped_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::start_timestamp() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::successful_test_case_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::successful_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::test_case_to_run_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::test_to_run_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::total_test_case_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::total_test_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::~UnitTest()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::ValidateTestPropertyName(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::HRESULTFailureHelper(const char *, const char *, long)" num="0" total="9" val="0" />
                     <CvgInfo elem="testing::internal::&lt;unnamed>::SplitEscapedString(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="9" total="15" val="60" />
                     <CvgInfo elem="testing::internal::AlwaysTrue()" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::AppendUserMessage(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const testing::Message &amp;)" num="3" total="4" val="75" />
                     <CvgInfo elem="testing::internal::AssertHelper::AssertHelper(testing::TestPartResult::Type, const char *, int, const char *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::AssertHelper::operator =(const testing::Message &amp;) const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::AssertHelper::~AssertHelper()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ChopLowBits(unsigned int *, int)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperEQ(const char *, const char *, long long, long long)" num="2" total="3" val="67" />
                     <CvgInfo elem="testing::internal::CmpHelperGE(const char *, const char *, long long, long long)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperGT(const char *, const char *, long long, long long)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperLE(const char *, const char *, long long, long long)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperLT(const char *, const char *, long long, long long)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperNE(const char *, const char *, long long, long long)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperSTRCASEEQ(const char *, const char *, const char *, const char *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperSTRCASENE(const char *, const char *, const char *, const char *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperSTREQ(const char *, const char *, const char *, const char *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperSTREQ(const char *, const char *, const wchar_t *, const wchar_t *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperSTRNE(const char *, const char *, const char *, const char *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::CmpHelperSTRNE(const char *, const char *, const wchar_t *, const wchar_t *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::CodePointToUtf8[abi:cxx11](unsigned int)" num="0" total="21" val="0" />
                     <CvgInfo elem="testing::internal::ColoredPrintf(testing::internal::GTestColor, const char *, ...)" num="8" total="12" val="67" />
                     <CvgInfo elem="testing::internal::CreateCodePointFromUtf16SurrogatePair(wchar_t, wchar_t)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(testing::internal::UnitTestImpl *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::DefaultGlobalTestPartResultReporter::ReportTestPartResult(const testing::TestPartResult &amp;)" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::internal::DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(testing::internal::UnitTestImpl *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::DefaultPerThreadTestPartResultReporter::ReportTestPartResult(const testing::TestPartResult &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::DoubleNearPredFormat(const char *, const char *, const char *, double, double, double)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::EqFailure(const char *, const char *, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, bool)" num="14" total="16" val="88" />
                     <CvgInfo elem="testing::internal::FormatCxxExceptionMessage(const char *, const char *)" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::internal::FormatEpochTimeInMillisAsIso8601[abi:cxx11](long long)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::FormatEpochTimeInMillisAsRFC3339(long long)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::FormatTimeInMillisAsDuration(long long)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::FormatTimeInMillisAsSeconds[abi:cxx11](long long)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::GTestIsInitialized()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::GetAnsiColorCode(testing::internal::GTestColor)" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::internal::GetArgvs[abi:cxx11]()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::GetBoolAssertionFailureMessage[abi:cxx11](const testing::AssertionResult &amp;, const char *, const char *, const char *)" num="0" total="7" val="0" />
                     <CvgInfo elem="testing::internal::GetCurrentExecutableName()" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::GetCurrentOsStackTraceExceptTop[abi:cxx11](testing::UnitTest *, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::GetTestTypeId()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::GetTimeInMillis()" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::GoogleTestFailureException::GoogleTestFailureException(const testing::TestPartResult &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::HasGoogleTestFlagPrefix(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::HasOneFailure(const char *, const char *, const char *, const testing::TestPartResultArray &amp;, testing::TestPartResult::Type, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="13" val="0" />
                     <CvgInfo elem="testing::internal::Indent(int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::Int32FromEnvOrDie(const char *, int)" num="3" total="7" val="43" />
                     <CvgInfo elem="testing::internal::IsHRESULTFailure(const char *, long)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::IsHRESULTSuccess(const char *, long)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::IsTrue(bool)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::IsUtf16SurrogatePair(wchar_t, wchar_t)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::EscapeJson(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="21" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::OnTestIterationEnd(const testing::UnitTest &amp;, int)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::OutputJsonKey(std::ostream*, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, bool)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::OutputJsonKey(std::ostream*, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, int, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, bool)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::OutputJsonTestInfo(std::ostream*, const char *, const testing::TestInfo &amp;)" num="0" total="31" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::PrintJsonTestCase(std::ostream*, const testing::TestCase &amp;)" num="0" total="20" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::PrintJsonTestList(std::ostream*, const std::vector&lt;testing::TestCase *, std::allocator&lt;testing::TestCase *>> &amp;)" num="0" total="14" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream*, const testing::UnitTest &amp;)" num="0" total="22" val="0" />
                     <CvgInfo elem="testing::internal::JsonUnitTestResultPrinter::TestPropertiesAsJson(const testing::TestResult &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::LoadFlagsFromFile(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="12" val="0" />
                     <CvgInfo elem="testing::internal::MakeAndRegisterTestInfo(const char *, const char *, const char *, const char *, testing::internal::CodeLocation, const void *, void (*)(), void (*)(), testing::internal::TestFactoryBase *)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::OpenFileForWriting(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::internal::OsStackTraceGetter::CurrentStackTrace[abi:cxx11](int, int)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::OsStackTraceGetter::UponLeavingGTest()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ParseBoolFlag(const char *, const char *, bool *)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::ParseFlagValue(const char *, const char *, bool)" num="0" total="9" val="0" />
                     <CvgInfo elem="testing::internal::ParseGoogleTestFlag(const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ParseGoogleTestFlagsOnly(int *, char **)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ParseGoogleTestFlagsOnly(int *, wchar_t **)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ParseInt32Flag(const char *, const char *, int *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::PortableLocaltime(long, tm *)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsSetUpEnd(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(const testing::UnitTest &amp;)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsTearDownEnd(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(const testing::UnitTest &amp;)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnTestCaseEnd(const testing::TestCase &amp;)" num="5" total="5" val="100" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnTestCaseStart(const testing::TestCase &amp;)" num="6" total="7" val="86" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnTestEnd(const testing::TestInfo &amp;)" num="10" total="12" val="83" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnTestIterationEnd(const testing::UnitTest &amp;, int)" num="19" total="25" val="76" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart(const testing::UnitTest &amp;, int)" num="8" total="13" val="62" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnTestPartResult(const testing::TestPartResult &amp;)" num="3" total="4" val="75" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnTestProgramEnd(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnTestProgramStart(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::OnTestStart(const testing::TestInfo &amp;)" num="4" total="4" val="100" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::PrettyUnitTestResultPrinter()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::PrintFailedTests(const testing::UnitTest &amp;)" num="13" total="15" val="87" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::PrintSkippedTests(const testing::UnitTest &amp;)" num="0" total="14" val="0" />
                     <CvgInfo elem="testing::internal::PrettyUnitTestResultPrinter::PrintTestName(const char *, const char *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::PrintColorEncoded(const char *)" num="0" total="19" val="0" />
                     <CvgInfo elem="testing::internal::PrintFullTestCommentIfPresent(const testing::TestInfo &amp;)" num="3" total="9" val="33" />
                     <CvgInfo elem="testing::internal::PrintOnOneLine(const char *, int)" num="0" total="10" val="0" />
                     <CvgInfo elem="testing::internal::PrintTestPartResult(const testing::TestPartResult &amp;)" num="5" total="5" val="100" />
                     <CvgInfo elem="testing::internal::PrintTestPartResultToString(const testing::TestPartResult &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::Random::Generate(unsigned int)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::ReportFailureInUnknownLocation(testing::TestPartResult::Type, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ReportInvalidTestCaseType(const char *, testing::internal::CodeLocation)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::ScopedPrematureExitFile::ScopedPrematureExitFile(const char *)" num="1" total="4" val="25" />
                     <CvgInfo elem="testing::internal::ScopedPrematureExitFile::~ScopedPrematureExitFile()" num="1" total="4" val="25" />
                     <CvgInfo elem="testing::internal::SetUpEnvironment(testing::Environment *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ShouldRunTestCase(const testing::TestCase *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::ShouldRunTestOnShard(int, int, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::ShouldShard(const char *, const char *, bool)" num="5" total="22" val="23" />
                     <CvgInfo elem="testing::internal::ShouldUseColor(bool)" num="5" total="6" val="83" />
                     <CvgInfo elem="testing::internal::SingleFailureChecker::SingleFailureChecker(const testing::TestPartResultArray *, testing::TestPartResult::Type, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::SingleFailureChecker::~SingleFailureChecker()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::SkipPrefix(const char *, const char **)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::SplitString(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, char, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> *)" num="0" total="10" val="0" />
                     <CvgInfo elem="testing::internal::StreamWideCharsToMessage(const wchar_t *, unsigned int, testing::Message *)" num="0" total="7" val="0" />
                     <CvgInfo elem="testing::internal::String::CStringEquals(const char *, const char *)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::String::CaseInsensitiveCStringEquals(const char *, const char *)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::String::CaseInsensitiveWideCStringEquals(const wchar_t *, const wchar_t *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::String::EndsWithCaseInsensitive(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::String::FormatByte[abi:cxx11](unsigned char)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::String::FormatHexInt[abi:cxx11](int)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::String::FormatIntWidth2[abi:cxx11](int)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::String::ShowWideCString[abi:cxx11](const wchar_t *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::String::WideCStringEquals(const wchar_t *, const wchar_t *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::StringStreamToString(std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> *)" num="9" total="10" val="90" />
                     <CvgInfo elem="testing::internal::SumOverTestCaseList(const std::vector&lt;testing::TestCase *, std::allocator&lt;testing::TestCase *>> &amp;, int (testing::TestCase::*)() const)" num="4" total="4" val="100" />
                     <CvgInfo elem="testing::internal::TearDownEnvironment(testing::Environment *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::TestCaseFailed(const testing::TestCase *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestCaseNameIs::TestCaseNameIs(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestCaseNameIs::operator ()(const testing::TestCase *) const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestCasePassed(const testing::TestCase *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::Append(testing::TestEventListener *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnEnvironmentsSetUpEnd(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnEnvironmentsSetUpStart(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnEnvironmentsTearDownEnd(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnEnvironmentsTearDownStart(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnTestCaseEnd(const testing::TestCase &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnTestCaseStart(const testing::TestCase &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnTestEnd(const testing::TestInfo &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnTestIterationEnd(const testing::UnitTest &amp;, int)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnTestIterationStart(const testing::UnitTest &amp;, int)" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnTestPartResult(const testing::TestPartResult &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnTestProgramEnd(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnTestProgramStart(const testing::UnitTest &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::OnTestStart(const testing::TestInfo &amp;)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::Release(testing::TestEventListener *)" num="2" total="5" val="40" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::TestEventRepeater()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::forwarding_enabled() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::set_forwarding_enabled(bool)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::TestEventRepeater::~TestEventRepeater()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::ConfigureXmlOutput()" num="4" total="7" val="57" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::CurrentOsStackTraceExceptTop[abi:cxx11](int)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::FilterTests(testing::internal::UnitTestImpl::ReactionToSharding)" num="24" total="24" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::GetGlobalTestPartResultReporter()" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::GetTestCase(const char *, const char *, void (*)(), void (*)())" num="8" total="10" val="80" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::GetTestPartResultReporterForCurrentThread()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::ListTestsMatchingFilter()" num="0" total="30" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::PostFlagParsingInit()" num="6" total="6" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::RecordProperty(const testing::TestProperty &amp;)" num="0" total="11" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::RegisterParameterizedTests()" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::RunAllTests()" num="41" total="48" val="85" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::SetGlobalTestPartResultReporter(testing::TestPartResultReporterInterface *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::SetTestPartResultReporterForCurrentThread(testing::TestPartResultReporterInterface *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::ShuffleTests()" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::SuppressTestEventsIfInSubprocess()" num="1" total="2" val="50" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::UnitTestImpl(testing::UnitTest *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::UnshuffleTests()" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::current_test_result()" num="4" total="5" val="80" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::disabled_test_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::failed_test_case_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::failed_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::os_stack_trace_getter()" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::reportable_disabled_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::reportable_test_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::set_os_stack_trace_getter(testing::internal::OsStackTraceGetterInterface *)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::skipped_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::successful_test_case_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::successful_test_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::test_case_to_run_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::test_to_run_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::total_test_case_count() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::total_test_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestImpl::~UnitTestImpl()" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestOptions::FilterMatchesTest(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="9" total="13" val="69" />
                     <CvgInfo elem="testing::internal::UnitTestOptions::GetAbsolutePathToOutputFile[abi:cxx11]()" num="0" total="14" val="0" />
                     <CvgInfo elem="testing::internal::UnitTestOptions::GetOutputFormat[abi:cxx11]()" num="3" total="3" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestOptions::MatchesFilter(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const char *)" num="7" total="7" val="100" />
                     <CvgInfo elem="testing::internal::UnitTestOptions::PatternMatchesString(const char *, const char *)" num="4" total="5" val="80" />
                     <CvgInfo elem="testing::internal::WideStringToUtf8[abi:cxx11](const wchar_t *, int)" num="0" total="13" val="0" />
                     <CvgInfo elem="testing::internal::WriteToShardStatusFileIfNeeded()" num="2" total="8" val="25" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::EscapeXml(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, bool)" num="0" total="24" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::EscapeXmlAttribute(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::EscapeXmlText[abi:cxx11](const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::IsNormalizableWhitespace(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::IsValidXmlCharacter(char)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::ListTestsMatchingFilter(const std::vector&lt;testing::TestCase *, std::allocator&lt;testing::TestCase *>> &amp;)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::OnTestIterationEnd(const testing::UnitTest &amp;, int)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::OutputXmlAttribute(std::ostream*, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="3" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::OutputXmlCDataSection(std::ostream*, const char *)" num="0" total="10" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::OutputXmlTestInfo(std::ostream*, const char *, const testing::TestInfo &amp;)" num="0" total="36" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::OutputXmlTestProperties(std::ostream*, const testing::TestResult &amp;)" num="0" total="12" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::PrintXmlTestCase(std::ostream*, const testing::TestCase &amp;)" num="0" total="15" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::PrintXmlTestsList(std::ostream*, const std::vector&lt;testing::TestCase *, std::allocator&lt;testing::TestCase *>> &amp;)" num="0" total="12" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream*, const testing::UnitTest &amp;)" num="0" total="18" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="6" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes[abi:cxx11](const testing::TestResult &amp;)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char *)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::&lt;unnamed>::Hunk::FlushEdits()" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::&lt;unnamed>::Hunk::Hunk(unsigned int, unsigned int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::&lt;unnamed>::Hunk::PrintHeader(std::ostream*) const" num="0" total="8" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::&lt;unnamed>::Hunk::PrintTo(std::ostream*)" num="0" total="5" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::&lt;unnamed>::Hunk::PushLine(char, const char *)" num="0" total="11" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::&lt;unnamed>::Hunk::has_edits() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::&lt;unnamed>::InternalStrings::GetId(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="4" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::CalculateOptimalEdits(const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;, const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;)" num="0" total="7" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::CalculateOptimalEdits(const std::vector&lt;unsigned int, std::allocator&lt;unsigned int>> &amp;, const std::vector&lt;unsigned int, std::allocator&lt;unsigned int>> &amp;)" num="0" total="33" val="0" />
                     <CvgInfo elem="testing::internal::edit_distance::CreateUnifiedDiff(const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;, const std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>>> &amp;, unsigned int)" num="0" total="31" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="gtest.h" num="43" total="88" val="49">
                     <CvgInfo elem="RUN_ALL_TESTS()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::AddGlobalTestEnvironment(testing::Environment *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::AssertionException::AssertionException(const testing::TestPartResult &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::AssertionResult::AppendMessage(const testing::Message &amp;)" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::AssertionResult::failure_message() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::AssertionResult::message() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::AssertionResult::operator &lt;&lt;(std::ostream&amp;(*)(std::ostream&amp;))" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::AssertionResult::operator =(testing::AssertionResult)" num="0" total="2" val="0" />
                     <CvgInfo elem="testing::AssertionResult::operator bool() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnEnvironmentsSetUpEnd(const testing::UnitTest &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnEnvironmentsSetUpStart(const testing::UnitTest &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnEnvironmentsTearDownEnd(const testing::UnitTest &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnEnvironmentsTearDownStart(const testing::UnitTest &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnTestCaseEnd(const testing::TestCase &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnTestCaseStart(const testing::TestCase &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnTestEnd(const testing::TestInfo &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnTestIterationEnd(const testing::UnitTest &amp;, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnTestIterationStart(const testing::UnitTest &amp;, int)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnTestPartResult(const testing::TestPartResult &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnTestProgramEnd(const testing::UnitTest &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnTestProgramStart(const testing::UnitTest &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::EmptyTestEventListener::OnTestStart(const testing::TestInfo &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Environment::SetUp()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Environment::Setup()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Environment::TearDown()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Environment::~Environment()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ScopedTrace::ScopedTrace(const char *, int, const char *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::ScopedTrace::ScopedTrace(const char *, int, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Test::DeleteSelf_()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::Test::HasFailure()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Test::SetUpTestCase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::Test::Setup()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::Test::TearDownTestCase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::ClearTestCaseResult(testing::TestCase*)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::Failed() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::Passed() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestCase::RunSetUpTestCase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::RunTearDownTestCase()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::ShouldRunTest(const testing::TestInfo *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::TestDisabled(const testing::TestInfo *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestCase::TestFailed(const testing::TestInfo *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::TestPassed(const testing::TestInfo *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::TestReportable(const testing::TestInfo *)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestCase::TestReportableDisabled(const testing::TestInfo *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::TestSkipped(const testing::TestInfo *)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::ad_hoc_test_result() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestCase::elapsed_time() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::name() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::set_should_run(bool)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::should_run() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::test_info_list()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::test_info_list() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestCase::type_param() const" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::TestEventListener::~TestEventListener()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestEventListeners::default_result_printer() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestEventListeners::default_xml_generator() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestInfo::ClearTestResult(testing::TestInfo*)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestInfo::file() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestInfo::increment_death_test_count()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestInfo::is_in_another_shard() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestInfo::is_reportable() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestInfo::line() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestInfo::name() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestInfo::result() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestInfo::should_run() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestInfo::test_case_name() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestInfo::type_param() const" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::TestInfo::value_param() const" num="2" total="2" val="100" />
                     <CvgInfo elem="testing::TestProperty::SetValue(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestProperty::TestProperty(const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;, const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>> &amp;)" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestProperty::key() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestProperty::value() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestResult::Passed() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestResult::death_test_count() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestResult::elapsed_time() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestResult::increment_death_test_count()" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestResult::set_elapsed_time(long long)" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::TestResult::test_part_results() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::TestResult::test_properties() const" num="0" total="1" val="0" />
                     <CvgInfo elem="testing::UnitTest::impl()" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::UnitTest::impl() const" num="1" total="1" val="100" />
                     <CvgInfo elem="testing::internal::AssertHelper::AssertHelperData::AssertHelperData(testing::TestPartResult::Type, const char *, int, const char *)" num="1" total="1" val="100" />
                  </CvgInfo>
                  <CvgInfo elem="gtest_main.cc" num="0" total="3" val="0">
                     <CvgInfo elem="main" num="0" total="3" val="0" />
                  </CvgInfo>
                  <CvgInfo elem="main.cpp" num="2" total="2" val="100">
                     <CvgInfo elem="main" num="2" total="2" val="100" />
                  </CvgInfo>
                  <CvgInfo elem="main.cpp" num="0" total="13" val="0">
                     <CvgInfo elem="main" num="0" total="13" val="0" />
                  </CvgInfo>
               </CvgInfo>
            </CvgInfo>
         </CvgStats>
         
      </Coverage>
   </Exec>
   <Statistics>
      
   </Statistics>
</ResultsSession>
