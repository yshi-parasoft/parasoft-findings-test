<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="Default Project-2023-03-08" climode="true" execEnv="win32_x86_64" hasViols="true" id="1677456428791" lang="en_US" machine="rhea" prjModule="FlowAnalysisCpp" project="Default Project" tag="${scontrol_branch}-win32_x86_64" time="2023-03-08T16:38:13-08:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2022.2.0" user="yshi">
   <TestConfig machine="rhea" name="cpptest_settings" pseudoUrl="../../conf/cpptest_settings.properties" user="yshi" />
   <Authors>
      <Author id="dev1" name="yshi" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.6.1.20221116" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.6.1.20221118B1887" />
      <Analyzer id="com.parasoft.xtest.dupcode.parser" name="Code Duplication Parser" ver="10.6.1.20221116" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.6.1.20221118B1887" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.6.1.20221108B3828" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.metrics" name="Parasoft C/C++ Metrics Analyzer" ver="10.6.1.20221118B1887" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.dupcode" name="Code Duplication Detector" ver="10.6.1.20221116" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.6.1.20221118B1887" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Metrics>
      <Metric avg="0" disp="true" id="METRIC.CBO" max="0" min="0" name="Coupling Between Objects" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.727" disp="true" id="METRIC.CC" max="3" min="1" name="McCabe Cyclomatic Complexity" noi="11" stddev="0.862">
         <Info avg="1.727" disp="true" elem="FlowAnalysisCpp" max="3" min="1" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="0.028" disp="true" id="METRIC.CLLOCRIF" max="0.114" min="0" name="Comment/Logical Lines in Files" noi="4" stddev="0.049">
         <Info avg="0.028" disp="true" elem="FlowAnalysisCpp" max="0.114" min="0" noi="4" stddev="0.049" />
      </Metric>
      <Metric avg="0.22" disp="true" id="METRIC.CLLOCRIM" max="1" min="0" name="Comment/Logical Lines in Methods" noi="10" stddev="0.394">
         <Info avg="0.22" disp="true" elem="FlowAnalysisCpp" max="1" min="0" noi="10" stddev="0.394" />
      </Metric>
      <Metric avg="0.273" disp="true" id="METRIC.DIF" max="1" min="0" name="Depth of Nested 'if' Statements" noi="11" stddev="0.445">
         <Info avg="0.273" disp="true" elem="FlowAnalysisCpp" max="1" min="0" noi="11" stddev="0.445" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.ECC" max="1" min="1" name="Essential Cyclomatic Complexity" noi="11" stddev="0">
         <Info avg="1" disp="true" elem="FlowAnalysisCpp" max="1" min="1" noi="11" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.FO" max="0" min="0" name="Fan Out" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="5.938" disp="true" id="METRIC.HDIFM" max="16.333" min="1.5" name="Halstead Difficulty" noi="11" stddev="4.48">
         <Info avg="5.938" disp="true" elem="FlowAnalysisCpp" max="16.333" min="1.5" noi="11" stddev="4.48" />
      </Metric>
      <Metric avg="1255.953" disp="true" id="METRIC.HEFM" max="4452.883" min="29.477" name="Halstead Effort" noi="11" stddev="1479.851">
         <Info avg="1255.953" disp="true" elem="FlowAnalysisCpp" max="4452.883" min="29.477" noi="11" stddev="1479.851" />
      </Metric>
      <Metric avg="25.634" disp="true" id="METRIC.HICM" max="57.125" min="12.687" name="Halstead Intelligent Content" noi="11" stddev="16.172">
         <Info avg="25.634" disp="true" elem="FlowAnalysisCpp" max="57.125" min="12.687" noi="11" stddev="16.172" />
      </Metric>
      <Metric avg="32.455" disp="true" id="METRIC.HLENM" max="62" min="7" name="Halstead Program Length" noi="11" stddev="20.237">
         <Info avg="32.455" disp="true" elem="FlowAnalysisCpp" max="62" min="7" noi="11" stddev="20.237" />
      </Metric>
      <Metric avg="0.293" disp="true" id="METRIC.HLEVM" max="0.667" min="0.061" name="Halstead Program Level" noi="11" stddev="0.199">
         <Info avg="0.293" disp="true" elem="FlowAnalysisCpp" max="0.667" min="0.061" noi="11" stddev="0.199" />
      </Metric>
      <Metric avg="0.033" disp="true" id="METRIC.HNOBM" max="0.09" min="0.003" name="Halstead Number of Bugs" noi="11" stddev="0.03">
         <Info avg="0.033" disp="true" elem="FlowAnalysisCpp" max="0.09" min="0.003" noi="11" stddev="0.03" />
      </Metric>
      <Metric avg="69.775" disp="true" id="METRIC.HTTPM" max="247.382" min="1.638" name="Halstead Time to Program" noi="11" stddev="82.214">
         <Info avg="69.775" disp="true" elem="FlowAnalysisCpp" max="247.382" min="1.638" noi="11" stddev="82.214" />
      </Metric>
      <Metric avg="18.455" disp="true" id="METRIC.HVOCM" max="37" min="7" name="Halstead Program Vocabulary" noi="11" stddev="9.764">
         <Info avg="18.455" disp="true" elem="FlowAnalysisCpp" max="37" min="7" noi="11" stddev="9.764" />
      </Metric>
      <Metric avg="145.589" disp="true" id="METRIC.HVOLM" max="307.16" min="19.651" name="Halstead Program Volume" noi="11" stddev="107.517">
         <Info avg="145.589" disp="true" elem="FlowAnalysisCpp" max="307.16" min="19.651" noi="11" stddev="107.517" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.IDOC" max="0" min="0" name="Inheritance Depth of Class" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.LCOM" max="0" min="0" name="Lack of Cohesion" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.727" disp="true" id="METRIC.MCC" max="3" min="1" name="Modified Cyclomatic Complexity" noi="11" stddev="0.862">
         <Info avg="1.727" disp="true" elem="FlowAnalysisCpp" max="3" min="1" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="171" disp="true" id="METRIC.MI" max="171" min="171" name="Maintainability Index" noi="1" stddev="0">
         <Info avg="171" disp="true" elem="FlowAnalysisCpp" max="171" min="171" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0.727" disp="true" id="METRIC.NBD" max="2" min="0" name="Nested Blocks Depth" noi="11" stddev="0.862">
         <Info avg="0.727" disp="true" elem="FlowAnalysisCpp" max="2" min="0" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="9.75" disp="true" id="METRIC.NOBLIF" max="33" min="1" name="Blank Lines in Files" noi="4" stddev="13.442">
         <Info avg="9.75" disp="true" elem="FlowAnalysisCpp" max="33" min="1" noi="4" stddev="13.442" />
      </Metric>
      <Metric avg="0.182" disp="true" id="METRIC.NOBLIM" max="1" min="0" name="Blank Lines in Methods" noi="11" stddev="0.386">
         <Info avg="0.182" disp="true" elem="FlowAnalysisCpp" max="1" min="0" noi="11" stddev="0.386" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOBLIT" max="0" min="0" name="Blank Lines in Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOC" max="1" min="1" name="Number of Classes" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="FlowAnalysisCpp" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.25" disp="true" id="METRIC.NOCLIF" max="5" min="0" name="Comment Lines in Files" noi="4" stddev="2.165">
         <Info avg="1.25" disp="true" elem="FlowAnalysisCpp" max="5" min="0" noi="4" stddev="2.165" />
      </Metric>
      <Metric avg="0.455" disp="true" id="METRIC.NOCLIM" max="2" min="0" name="Comment Lines in Methods" noi="11" stddev="0.656">
         <Info avg="0.455" disp="true" elem="FlowAnalysisCpp" max="2" min="0" noi="11" stddev="0.656" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOCLIT" max="0" min="0" name="Comment Lines in Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOF" max="1" min="1" name="Number of Files" noi="4" stddev="0">
         <Info avg="1" disp="true" elem="FlowAnalysisCpp" max="1" min="1" noi="4" stddev="0" />
      </Metric>
      <Metric avg="14.25" disp="true" id="METRIC.NOLLOCIF" max="44" min="1" name="Logical Lines in Files" noi="4" stddev="17.311">
         <Info avg="14.25" disp="true" elem="FlowAnalysisCpp" max="44" min="1" noi="4" stddev="17.311" />
      </Metric>
      <Metric avg="5.182" disp="true" id="METRIC.NOLLOCIM" max="12" min="0" name="Logical Lines in Methods" noi="11" stddev="4.174">
         <Info avg="5.182" disp="true" elem="FlowAnalysisCpp" max="12" min="0" noi="11" stddev="4.174" />
      </Metric>
      <Metric avg="2.909" disp="true" id="METRIC.NOMCIM" max="10" min="0" name="Method Calls In Methods" noi="11" stddev="3.088">
         <Info avg="2.909" disp="true" elem="FlowAnalysisCpp" max="10" min="0" noi="11" stddev="3.088" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOMIT" max="0" min="0" name="Number of Methods in Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.182" disp="true" id="METRIC.NOPAR" max="2" min="0" name="Parameters of Methods" noi="11" stddev="0.716">
         <Info avg="1.182" disp="true" elem="FlowAnalysisCpp" max="2" min="0" noi="11" stddev="0.716" />
      </Metric>
      <Metric avg="46.75" disp="true" id="METRIC.NOPLIF" max="152" min="6" name="Physical Lines in Files" noi="4" stddev="60.866">
         <Info avg="46.75" disp="true" elem="FlowAnalysisCpp" max="152" min="6" noi="4" stddev="60.866" />
      </Metric>
      <Metric avg="8.727" disp="true" id="METRIC.NOPLIM" max="17" min="4" name="Physical Lines in Methods" noi="11" stddev="4.35">
         <Info avg="8.727" disp="true" elem="FlowAnalysisCpp" max="17" min="4" noi="11" stddev="4.35" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOPLIT" max="1" min="1" name="Physical Lines in Types" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="FlowAnalysisCpp" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOPRIVMIT" max="0" min="0" name="Private Members of Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOPROTMIT" max="0" min="0" name="Protected Members of Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOPUBMIT" max="0" min="0" name="Public Members of Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0.636" disp="true" id="METRIC.NORET" max="1" min="0" name="Number of Returns in Methods" noi="11" stddev="0.481">
         <Info avg="0.636" disp="true" elem="FlowAnalysisCpp" max="1" min="0" noi="11" stddev="0.481" />
      </Metric>
      <Metric avg="35.75" disp="true" id="METRIC.NOSLIF" max="114" min="5" name="Source Lines in Files" noi="4" stddev="45.273">
         <Info avg="35.75" disp="true" elem="FlowAnalysisCpp" max="114" min="5" noi="4" stddev="45.273" />
      </Metric>
      <Metric avg="8.091" disp="true" id="METRIC.NOSLIM" max="16" min="3" name="Source Lines in Methods" noi="11" stddev="4.144">
         <Info avg="8.091" disp="true" elem="FlowAnalysisCpp" max="16" min="3" noi="11" stddev="4.144" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOSLIT" max="1" min="1" name="Source Lines in Types" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="FlowAnalysisCpp" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOT" max="1" min="1" name="Number of Types" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="FlowAnalysisCpp" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.RFC" max="0" min="0" name="Response for Class" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.727" disp="true" id="METRIC.SCC" max="3" min="1" name="Strict Cyclomatic Complexity" noi="11" stddev="0.862">
         <Info avg="1.727" disp="true" elem="FlowAnalysisCpp" max="3" min="1" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.WMC" max="0" min="0" name="Weighted Methods of Class" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="FlowAnalysisCpp" max="0" min="0" noi="1" stddev="0" />
      </Metric>
   </Metrics>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="yshi" hash="-1257393797" locRef="1" projId="FlowAnalysisCpp" projPath="/FlowAnalysisCpp" project="FlowAnalysisCpp" resProjPath="NullPointer.cpp" totLns="14" uri="file://rhea/C:/Users/yshi/git/sonarqube-integration-tests/projects/FlowAnalysisCpp/NullPointer.cpp" />
         <Loc auth="yshi" hash="-1665970746" locRef="2" projId="FlowAnalysisCpp" projPath="/FlowAnalysisCpp" project="FlowAnalysisCpp" resProjPath="DivisionByZero.cpp" totLns="6" uri="file://rhea/C:/Users/yshi/git/sonarqube-integration-tests/projects/FlowAnalysisCpp/DivisionByZero.cpp" />
         <Loc auth="yshi" hash="1013754779" locRef="3" projId="FlowAnalysisCpp" projPath="/FlowAnalysisCpp" project="FlowAnalysisCpp" resProjPath="MemoryLeak.cpp" totLns="15" uri="file://rhea/C:/Users/yshi/git/sonarqube-integration-tests/projects/FlowAnalysisCpp/MemoryLeak.cpp" />
         <Loc auth="yshi" hash="-1769734618" locRef="4" projId="FlowAnalysisCpp" projPath="/FlowAnalysisCpp" project="FlowAnalysisCpp" resProjPath="DeadLock.cpp" totLns="152" uri="file://rhea/C:/Users/yshi/git/sonarqube-integration-tests/projects/FlowAnalysisCpp/DeadLock.cpp" />
      </Locations>
   </Scope>
   
  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:13">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="4" checkedLns="187" id="FlowAnalysisCpp" name="FlowAnalysisCpp" qfixErrs="0" suppErrs="0" totErrs="2468" totFiles="4" totLns="187" />
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="DISA ASD STIG" name="APSC_DV" rules="104" total="0">
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001850 The application must not display passwords/PINs as clear text." name="APSC_DV-001850" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001750 The application must transmit only cryptographically-protected passwords." name="APSC_DV-001750" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000480 The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies." name="APSC_DV-000480" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000160 The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions." name="APSC_DV-000160" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002460 The application must maintain the confidentiality and integrity of information during preparation for transmission." name="APSC_DV-002460" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002560 The application must not be subject to input handling vulnerabilities." name="APSC_DV-002560" rules="11" total="1" />
               <Category authTot="3;" authUrg="2;" desc="APSC_DV-003110 The application must not contain embedded authentication data." name="APSC_DV-003110" rules="1" total="3" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session." name="APSC_DV-002000" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002440 The application must protect the confidentiality and integrity of transmitted information." name="APSC_DV-002440" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002540 The application must not be vulnerable to SQL Injection." name="APSC_DV-002540" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000500 The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures." name="APSC_DV-000500" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001995 The application must not be vulnerable to race conditions." name="APSC_DV-001995" rules="9" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002520 The application must protect from canonical representation vulnerabilities." name="APSC_DV-002520" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-003235 The application must not be subject to error handling vulnerabilities." name="APSC_DV-003235" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." name="APSC_DV-002400" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." name="APSC_DV-002290" rules="4" total="0" />
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." name="APSC_DV-002390" rules="4" total="2" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002590 The application must not be vulnerable to overflow attacks." name="APSC_DV-002590" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000170 The application must implement cryptographic mechanisms to protect the integrity of remote access sessions." name="APSC_DV-000170" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001300 The application must protect audit information from unauthorized deletion." name="APSC_DV-001300" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001740 The application must only store cryptographic representations of passwords." name="APSC_DV-001740" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000650 The application must not write sensitive data into the application logs." name="APSC_DV-000650" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001860 The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module." name="APSC_DV-001860" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002470 The application must maintain the confidentiality and integrity of information during reception." name="APSC_DV-002470" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002350 The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy." name="APSC_DV-002350" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." name="APSC_DV-002570" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002010 The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards." name="APSC_DV-002010" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." name="APSC_DV-002550" rules="11" total="1" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002530 The application must validate all input." name="APSC_DV-002530" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002510 The application must protect from command injection." name="APSC_DV-002510" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002480 The application must not disclose unnecessary information to users." name="APSC_DV-002480" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-001290 The application must protect audit information from unauthorized modification." name="APSC_DV-001290" rules="4" total="1" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="AUTOSAR C++14 Coding Guidelines" name="AUTOSAR" rules="557" total="0">
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-6-1 #error directive shall not be used" name="AUTOSAR-A16_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" name="AUTOSAR-A7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" name="AUTOSAR-M8_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" name="AUTOSAR-A6_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" name="AUTOSAR-A25_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" name="AUTOSAR-M15_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" name="AUTOSAR-M15_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-2 NULL shall not be thrown explicitly" name="AUTOSAR-M15_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined" name="AUTOSAR-A12_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" name="AUTOSAR-M5_3_2" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" name="AUTOSAR-M5_3_1" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" name="AUTOSAR-M5_3_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-3 The unary &amp; operator shall not be overloaded" name="AUTOSAR-M5_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" name="AUTOSAR-A13_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-3 User-defined conversion operators should not be used" name="AUTOSAR-A13_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-6-1 The goto statement shall not be used" name="AUTOSAR-A6_6_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio> shall not be used" name="AUTOSAR-M27_0_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-1 If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented" name="AUTOSAR-A13_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" name="AUTOSAR-A5_16_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" name="AUTOSAR-A13_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" name="AUTOSAR-A13_5_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" name="AUTOSAR-A23_0_2" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them" name="AUTOSAR-A15_1_4" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" name="AUTOSAR-A23_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" name="AUTOSAR-M4_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" name="AUTOSAR-A15_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" name="AUTOSAR-M5_17_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-2 An exception object shall not be a pointer" name="AUTOSAR-A15_1_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" name="AUTOSAR-M4_5_1" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M0-1-10 Every defined function should be called at least once" name="AUTOSAR-M0_1_10" rules="2" total="4" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" name="AUTOSAR-A15_1_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-4-1 Hierarchies should be based on interface classes" name="AUTOSAR-A10_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-7-1 The #pragma directive shall not be used" name="AUTOSAR-A16_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-1 A non-POD type should be defined as class" name="AUTOSAR-A11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" name="AUTOSAR-A11_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" name="AUTOSAR-A7_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &amp;" name="AUTOSAR-M8_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" name="AUTOSAR-A7_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" name="AUTOSAR-A7_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" name="AUTOSAR-M8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-1 The character \ shall not occur as a last character of a C++ comment" name="AUTOSAR-A2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" name="AUTOSAR-M3_9_1" rules="1" total="0" />
               <Category authTot="28;" authUrg="0;" desc="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags" name="AUTOSAR-A2_7_3" rules="2" total="28" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-2 Sections of code shall not be &quot;commented out&quot;" name="AUTOSAR-A2_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" name="AUTOSAR-M12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" name="AUTOSAR-M3_9_3" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" name="AUTOSAR-A1_1_1" rules="11" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-1-2 Functions shall not be declared at block scope" name="AUTOSAR-M3_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" name="AUTOSAR-A6_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-6-1 All class data members that are initialized by the constructor shall be initialized using member initializers" name="AUTOSAR-A12_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" name="AUTOSAR-M15_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" name="AUTOSAR-M5_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" name="AUTOSAR-M5_2_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" name="AUTOSAR-M14_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-2-1 The macro offsetof shall not be used" name="AUTOSAR-M18_2_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" name="AUTOSAR-M5_2_8" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" name="AUTOSAR-A5_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" name="AUTOSAR-M5_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" name="AUTOSAR-M5_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-3 Do statements should not be used" name="AUTOSAR-A6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" name="AUTOSAR-A6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-5 Hexadecimal constants should be upper case" name="AUTOSAR-A2_13_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" name="AUTOSAR-A2_13_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" name="AUTOSAR-A6_5_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-3 Type wchar_t shall not be used" name="AUTOSAR-A2_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" name="AUTOSAR-A2_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" name="AUTOSAR-A2_13_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" name="AUTOSAR-A2_13_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" name="AUTOSAR-M5_0_15" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" name="AUTOSAR-M5_0_16" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="AUTOSAR-M5_0_17" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-18 >, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" name="AUTOSAR-M5_0_18" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" name="AUTOSAR-A15_0_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" name="AUTOSAR-M9_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-10 If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" name="AUTOSAR-M5_0_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" name="AUTOSAR-M9_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" name="AUTOSAR-M5_0_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" name="AUTOSAR-M5_0_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" name="AUTOSAR-M5_0_14" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" name="AUTOSAR-M7_1_2" rules="3" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-4 The register keyword shall not be used" name="AUTOSAR-A7_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" name="AUTOSAR-A7_1_3" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" name="AUTOSAR-A7_1_2" rules="2" total="2" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" name="AUTOSAR-A7_1_1" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" name="AUTOSAR-A2_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-11-1 Volatile keyword shall not be used" name="AUTOSAR-A2_11_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-5-1 Unions shall not be used" name="AUTOSAR-A9_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" name="AUTOSAR-M6_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" name="AUTOSAR-M5_0_20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" name="AUTOSAR-M5_0_21" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" name="AUTOSAR-A18_0_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-3 The library &lt;clocale> (locale.h) and the setlocale function shall not be used" name="AUTOSAR-A18_0_3" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" name="AUTOSAR-M0_4_2" rules="1" total="1" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" name="AUTOSAR-A18_0_2" rules="2" total="4" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-3-1 A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded" name="AUTOSAR-A13_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" name="AUTOSAR-A5_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" name="AUTOSAR-M14_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-2 Type long double shall not be used" name="AUTOSAR-A0_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" name="AUTOSAR-A0_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-7-1 An integer expression shall not lead to data loss" name="AUTOSAR-A4_7_1" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" name="AUTOSAR-A7_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" name="AUTOSAR-A7_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" name="AUTOSAR-A20_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" name="AUTOSAR-A20_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" name="AUTOSAR-A20_8_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" name="AUTOSAR-A20_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" name="AUTOSAR-A20_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" name="AUTOSAR-A20_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" name="AUTOSAR-A20_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" name="AUTOSAR-A9_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" name="AUTOSAR-M6_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" name="AUTOSAR-M6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" name="AUTOSAR-A12_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="AUTOSAR-A2_10_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" name="AUTOSAR-M6_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" name="AUTOSAR-A6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A6_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" name="AUTOSAR-A9_6_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" name="AUTOSAR-A12_4_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-11 &quot;operator new&quot; and &quot;operator delete&quot; shall be defined together" name="AUTOSAR-A18_5_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" name="AUTOSAR-A8_4_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" name="AUTOSAR-A18_5_10" rules="2" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" name="AUTOSAR-A8_4_10" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" name="AUTOSAR-A8_4_13" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" name="AUTOSAR-A8_4_12" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-2 The std::vector&lt;bool> specialization shall not be used" name="AUTOSAR-A18_1_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-1-1 C-style arrays shall not be used" name="AUTOSAR-A18_1_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-1 An assignment operator shall return a reference to &quot;this&quot;" name="AUTOSAR-A13_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" name="AUTOSAR-A18_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library &lt;cstdlib> shall not be used" name="AUTOSAR-M18_0_3" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;" name="AUTOSAR-A13_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" name="AUTOSAR-A18_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" name="AUTOSAR-A18_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-3 A relational operator shall return a boolean value" name="AUTOSAR-A13_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-5 The unbounded functions of library &lt;cstring> shall not be used" name="AUTOSAR-M18_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-4 The time handling functions of library &lt;ctime> shall not be used" name="AUTOSAR-M18_0_4" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" name="AUTOSAR-M2_10_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-14-1 The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects" name="AUTOSAR-M5_14_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" name="AUTOSAR-A7_1_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" name="AUTOSAR-A7_1_8" rules="1" total="0" />
               <Category authTot="12;" authUrg="0;" desc="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" name="AUTOSAR-A7_1_7" rules="3" total="12" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-6 The typedef specifier shall not be used" name="AUTOSAR-A7_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" name="AUTOSAR-A7_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" name="AUTOSAR-A18_9_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-1 The std::bind shall not be used" name="AUTOSAR-A18_9_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" name="AUTOSAR-A18_9_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&amp;" name="AUTOSAR-A18_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" name="AUTOSAR-A14_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" name="AUTOSAR-A3_8_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-2 The # and ## operators should not be used" name="AUTOSAR-M16_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-4 If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors" name="AUTOSAR-A8_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" name="AUTOSAR-M16_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" name="AUTOSAR-M7_3_2" rules="1" total="0" />
               <Category authTot="13;" authUrg="1;" desc="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" name="AUTOSAR-M7_3_1" rules="1" total="13" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-1 The ', &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive" name="AUTOSAR-A16_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" name="AUTOSAR-A8_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-4 Using-directives shall not be used" name="AUTOSAR-M7_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-0 All memory shall be initialized before it is read" name="AUTOSAR-A8_5_0" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" name="AUTOSAR-M7_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" name="AUTOSAR-A8_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" name="AUTOSAR-M7_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-2 There shall be no unused include directives" name="AUTOSAR-A16_2_2" rules="1" total="0" />
               <Category authTot="7;" authUrg="3;" desc="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" name="AUTOSAR-A8_5_2" rules="1" total="7" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" name="AUTOSAR-A17_0_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-3-1 Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class" name="AUTOSAR-A9_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" name="AUTOSAR-M6_5_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" name="AUTOSAR-M6_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" name="AUTOSAR-M3_4_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" name="AUTOSAR-M6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" name="AUTOSAR-M6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" name="AUTOSAR-M6_5_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" name="AUTOSAR-A13_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" name="AUTOSAR-M0_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-10-1 NULL shall not be used as an integer value" name="AUTOSAR-M4_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" name="AUTOSAR-A13_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" name="AUTOSAR-A5_3_3" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-3-2 Null pointers shall not be dereferenced" name="AUTOSAR-A5_3_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" name="AUTOSAR-A5_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-7-1 The signal handling facilities of &lt;csignal> shall not be used" name="AUTOSAR-M18_7_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" name="AUTOSAR-A26_5_1" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" name="AUTOSAR-M4_10_2" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" name="AUTOSAR-A2_10_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-2 Random number engines shall not be default-initialized" name="AUTOSAR-A26_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" name="AUTOSAR-A2_10_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" name="AUTOSAR-A2_10_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, >, >=" name="AUTOSAR-A4_5_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" name="AUTOSAR-A15_5_3" rules="11" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" name="AUTOSAR-A15_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" name="AUTOSAR-A15_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" name="AUTOSAR-M9_6_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" name="AUTOSAR-M5_2_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" name="AUTOSAR-M5_2_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-11 The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" name="AUTOSAR-M5_2_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" name="AUTOSAR-A14_7_2" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" name="AUTOSAR-A3_9_1" rules="1" total="15" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-2-3 Include guards shall be provided" name="AUTOSAR-M16_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" name="AUTOSAR-A3_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" name="AUTOSAR-A3_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" name="AUTOSAR-A3_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;" name="AUTOSAR-A3_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" name="AUTOSAR-A3_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" name="AUTOSAR-A3_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" name="AUTOSAR-A2_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" name="AUTOSAR-M10_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-1 Classes should not be derived from virtual bases" name="AUTOSAR-M10_1_1" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" name="AUTOSAR-M8_0_1" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" name="AUTOSAR-M6_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" name="AUTOSAR-M6_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" name="AUTOSAR-A17_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" name="AUTOSAR-A21_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="AUTOSAR-M10_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" name="AUTOSAR-M6_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" name="AUTOSAR-A25_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" name="AUTOSAR-M6_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="AUTOSAR-M6_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" name="AUTOSAR-M6_4_3" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-7-1 The character sequence /* shall not be used within a C-style comment" name="AUTOSAR-M2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" name="AUTOSAR-M6_4_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-1 dynamic_cast should not be used" name="AUTOSAR-A5_2_1" rules="1" total="0" />
               <Category authTot="17;" authUrg="0;" desc="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" name="AUTOSAR-M0_3_2" rules="1" total="17" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" name="AUTOSAR-A5_2_5" rules="4" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults" name="AUTOSAR-M0_3_1" rules="10" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-4 reinterpret_cast shall not be used" name="AUTOSAR-A5_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" name="AUTOSAR-A5_2_3" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A5-2-2 Traditional C-style casts shall not be used" name="AUTOSAR-A5_2_2" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" name="AUTOSAR-A15_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" name="AUTOSAR-M17_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" name="AUTOSAR-A15_4_3" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" name="AUTOSAR-A15_4_4" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" name="AUTOSAR-M17_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" name="AUTOSAR-A15_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(&lt;true condition>), then it shall not exit with an exception" name="AUTOSAR-A15_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" name="AUTOSAR-A10_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" name="AUTOSAR-M17_0_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" name="AUTOSAR-M16_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-3-1 Friend declarations shall not be used" name="AUTOSAR-A11_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" name="AUTOSAR-M16_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" name="AUTOSAR-M7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" name="AUTOSAR-M7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" name="AUTOSAR-M3_2_4" rules="1" total="0" />
               <Category authTot="18;" authUrg="0;" desc="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" name="AUTOSAR-A16_0_1" rules="5" total="18" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" name="AUTOSAR-M10_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" name="AUTOSAR-M8_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" name="AUTOSAR-A12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" name="AUTOSAR-A12_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" name="AUTOSAR-M15_3_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-3 If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead" name="AUTOSAR-A12_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" name="AUTOSAR-M15_3_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" name="AUTOSAR-A12_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" name="AUTOSAR-M15_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" name="AUTOSAR-M3_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" name="AUTOSAR-A17_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" name="AUTOSAR-M3_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" name="AUTOSAR-A5_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-2 The One Definition Rule shall not be violated" name="AUTOSAR-M3_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-6 The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" name="AUTOSAR-A5_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" name="AUTOSAR-A12_1_5" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" name="AUTOSAR-M15_3_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" name="AUTOSAR-A12_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" name="AUTOSAR-M15_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M11-0-1 Member data in non-POD class types shall be private" name="AUTOSAR-M11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" name="AUTOSAR-A5_1_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="1;" desc="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" name="AUTOSAR-A5_1_1" rules="1" total="2" />
               <Category authTot="21;" authUrg="0;" desc="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" name="AUTOSAR-A4_10_1" rules="2" total="21" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" name="AUTOSAR-A5_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" name="AUTOSAR-A5_1_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" name="AUTOSAR-A5_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" name="AUTOSAR-A15_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" name="AUTOSAR-A15_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" name="AUTOSAR-A15_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used" name="AUTOSAR-M2_13_2" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" name="AUTOSAR-A15_3_3" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" name="AUTOSAR-A7_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-4 Literal suffixes shall be upper case" name="AUTOSAR-M2_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-3 A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" name="AUTOSAR-M2_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" name="AUTOSAR-M5_19_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" name="AUTOSAR-A14_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" name="AUTOSAR-A10_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" name="AUTOSAR-A8_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-3 A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations." name="AUTOSAR-A14_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-6 &quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded" name="AUTOSAR-A8_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" name="AUTOSAR-M16_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-5 &quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from" name="AUTOSAR-A8_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-8 Output parameters shall not be used" name="AUTOSAR-A8_4_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-1 All usage of assembler shall be documented" name="AUTOSAR-M7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-7 &quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value" name="AUTOSAR-A8_4_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" name="AUTOSAR-M16_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class" name="AUTOSAR-A12_8_6" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" name="AUTOSAR-A3_3_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="AUTOSAR-A8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" name="AUTOSAR-M16_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" name="AUTOSAR-M7_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &amp;" name="AUTOSAR-A12_8_7" rules="1" total="0" />
               <Category authTot="16;" authUrg="1;" desc="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" name="AUTOSAR-A3_3_1" rules="2" total="16" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" name="AUTOSAR-A8_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" name="AUTOSAR-M7_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-4 Multiple output values from a function should be returned as a struct or tuple" name="AUTOSAR-A8_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-3 Common ways of passing parameters should be used" name="AUTOSAR-A8_4_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-4-1 The asm declaration shall not be used" name="AUTOSAR-A7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-1 Trigraphs shall not be used" name="AUTOSAR-A2_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-2 Digraphs shall not be used" name="AUTOSAR-A2_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-9 &quot;in-out&quot; parameters declared as T &amp; shall be modified" name="AUTOSAR-A8_4_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" name="AUTOSAR-M16_0_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" name="AUTOSAR-M16_0_7" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" name="AUTOSAR-M16_0_6" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" name="AUTOSAR-A12_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" name="AUTOSAR-M10_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" name="AUTOSAR-M6_6_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" name="AUTOSAR-M3_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" name="AUTOSAR-M6_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-1 If a class declares a copy or move operation, or a destructor, either via &quot;=default&quot;, &quot;=delete&quot;, or via a user-provided declaration, then all others of these five special member functions shall be declared as well" name="AUTOSAR-A12_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" name="AUTOSAR-M6_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" name="AUTOSAR-A12_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" name="AUTOSAR-A12_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" name="AUTOSAR-A12_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" name="AUTOSAR-A5_1_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" name="AUTOSAR-A12_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" name="AUTOSAR-A5_1_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M19-3-1 The error indicator errno shall not be used" name="AUTOSAR-M19_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A12_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" name="AUTOSAR-A5_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" name="AUTOSAR-M5_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" name="AUTOSAR-A0_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" name="AUTOSAR-A5_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_8" rules="2" total="0" />
               <Category authTot="17;" authUrg="0;" desc="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" name="AUTOSAR-A0_1_2" rules="1" total="17" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" name="AUTOSAR-A5_0_1" rules="7" total="0" />
               <Category authTot="9;" authUrg="0;" desc="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" name="AUTOSAR-M0_1_4" rules="1" total="9" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" name="AUTOSAR-A0_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-2 A project shall not contain infeasible paths" name="AUTOSAR-M0_1_2" rules="29" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" name="AUTOSAR-M5_0_5" rules="2" total="1" />
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A27-0-4 C-style strings shall not be used" name="AUTOSAR-A27_0_4" rules="4" total="5" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-3 A project shall not contain unused variables" name="AUTOSAR-M0_1_3" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" name="AUTOSAR-M5_0_4" rules="1" total="2" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" name="AUTOSAR-A18_5_2" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" name="AUTOSAR-A27_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" name="AUTOSAR-M5_0_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" name="AUTOSAR-A18_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" name="AUTOSAR-A27_0_2" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" name="AUTOSAR-A5_0_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-1 A project shall not contain unreachable code" name="AUTOSAR-M0_1_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" name="AUTOSAR-M5_0_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" name="AUTOSAR-A13_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-1 Inputs from independent components shall be validated" name="AUTOSAR-A27_0_1" rules="8" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" name="AUTOSAR-A0_1_4" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" name="AUTOSAR-A0_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-6 There should be no unused type declarations" name="AUTOSAR-A0_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" name="AUTOSAR-A10_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" name="AUTOSAR-A15_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" name="AUTOSAR-A7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-18-1 The comma operator shall not be used" name="AUTOSAR-M5_18_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" name="AUTOSAR-A7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-4 If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined" name="AUTOSAR-A18_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" name="AUTOSAR-A18_5_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" name="AUTOSAR-M5_0_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" name="AUTOSAR-A18_5_5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" name="AUTOSAR-M5_0_2" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" name="AUTOSAR-A10_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" name="AUTOSAR-A18_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" name="AUTOSAR-A10_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" name="AUTOSAR-A10_3_3" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" name="AUTOSAR-M0_1_8" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard" name="AUTOSAR-A18_5_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-9 There shall be no dead code" name="AUTOSAR-M0_1_9" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="125" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Miscellaneous" name="BD-MISC" rules="2" total="0" />
               <Category authTot="3;" authUrg="0;" desc="Possible Bugs" name="BD-PB" rules="69" total="3" />
               <Category authTot="1;" authUrg="0;" desc="Resources" name="BD-RES" rules="8" total="1" />
               <Category authTot="2;" authUrg="0;" desc="Security" name="BD-SECURITY" rules="19" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Containers" name="BD-CO" rules="5" total="0" />
               <Category authTot="7;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="15" total="7" />
            </Category>
            <Category authTot="9;" authUrg="9;" desc="Code Duplication Detection" name="CDD" rules="4" total="9" />
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C" name="CERT_C" rules="362" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" name="CERT_C-MSC12" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC11_C (REC) Incorporate diagnostic tests using assertions" name="CERT_C-MSC11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC14_C (REC) Do not introduce unnecessary platform dependencies" name="CERT_C-MSC14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC13_C (REC) Detect and remove unused values" name="CERT_C-MSC13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC15_C (REC) Do not depend on undefined behavior" name="CERT_C-MSC15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-WIN00_C (REC) Be specific when dynamically loading libraries" name="CERT_C-WIN00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP03_C (REC) Detect and handle floating-point errors" name="CERT_C-FLP03" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC17_C (REC) Finish every set of statements associated with a case label with a break statement" name="CERT_C-MSC17" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP02_C (REC) Avoid using floating-point numbers when precise computation is needed" name="CERT_C-FLP02" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" name="CERT_C-MSC19" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" name="CERT_C-FLP06" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT02_C (REC) Understand integer conversion rules" name="CERT_C-INT02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP00_C (REC) Understand the limitations of floating-point numbers" name="CERT_C-FLP00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" name="CERT_C-API01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" name="CERT_C-API02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT08_C (REC) Verify that all integer values are in range" name="CERT_C-INT08" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT09_C (REC) Ensure enumeration constants map to unique values" name="CERT_C-INT09" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" name="CERT_C-INT07" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" name="CERT_C-INT04" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" name="CERT_C-INT05" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" name="CERT_C-ENV30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC22_C (REC) Use the setjmp(), longjmp() facility securely" name="CERT_C-MSC22" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" name="CERT_C-MSC24" rules="4" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT13_C (REC) Use bitwise operators only on unsigned operands" name="CERT_C-INT13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT12_C (REC) Do not make assumptions about the type of a plain int bit-field when used in an expression" name="CERT_C-INT12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT10_C (REC) Do not assume a positive remainder when using the % operator" name="CERT_C-INT10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV33_C (RULE) Do not call system()" name="CERT_C-ENV33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" name="CERT_C-ENV34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" name="CERT_C-INT18" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" name="CERT_C-ENV31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT15_C (REC) Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" name="CERT_C-INT15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" name="CERT_C-MSC30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV32_C (RULE) All exit handlers must return normally" name="CERT_C-ENV32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT16_C (REC) Do not make assumptions about representation of signed integers" name="CERT_C-INT16" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" name="CERT_C-MEM00" rules="5" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" name="CERT_C-MEM01" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" name="CERT_C-SIG30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM04_C (REC) Beware of zero-length allocations" name="CERT_C-MEM04" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM05_C (REC) Avoid large stack allocations" name="CERT_C-MEM05" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" name="CERT_C-SIG31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" name="CERT_C-MEM02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" name="CERT_C-SIG34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM03_C (REC) Clear sensitive information stored in reusable resources" name="CERT_C-MEM03" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" name="CERT_C-SIG35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" name="CERT_C-PRE31" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" name="CERT_C-PRE32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" name="CERT_C-PRE30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV02_C (REC) Beware of multiple environment variables with the same effective name" name="CERT_C-ENV02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" name="CERT_C-ENV01" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC01_C (REC) Strive for logical completeness" name="CERT_C-MSC01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" name="CERT_C-MSC04" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC07_C (REC) Detect and remove dead code" name="CERT_C-MSC07" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC09_C (REC) Character encoding: Use subset of ASCII for safety" name="CERT_C-MSC09" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT35_C (RULE) Use correct integer precisions" name="CERT_C-INT35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" name="CERT_C-INT36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" name="CERT_C-INT33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" name="CERT_C-INT34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" name="CERT_C-INT31" rules="15" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" name="CERT_C-INT32" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" name="CERT_C-INT30" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" name="CERT_C-FIO34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" name="CERT_C-FIO32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO38_C (RULE) Do not copy a FILE object" name="CERT_C-FIO38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" name="CERT_C-FIO39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" name="CERT_C-FIO37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" name="CERT_C-EXP44" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP45_C (RULE) Do not perform assignments in selection statements" name="CERT_C-EXP45" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP42_C (RULE) Do not compare padding data" name="CERT_C-EXP42" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" name="CERT_C-EXP43" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO30_C (RULE) Exclude user input from format strings" name="CERT_C-FIO30" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" name="CERT_C-EXP46" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" name="CERT_C-EXP47" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" name="CERT_C-MEM12" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" name="CERT_C-STR34" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_C-STR31" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" name="CERT_C-STR32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR30_C (RULE) Do not attempt to modify string literals" name="CERT_C-STR30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" name="CERT_C-FIO45" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO46_C (RULE) Do not access a closed file" name="CERT_C-FIO46" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" name="CERT_C-FIO44" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" name="CERT_C-STR37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" name="CERT_C-STR38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO47_C (RULE) Use valid format strings" name="CERT_C-FIO47" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" name="CERT_C-FIO41" rules="5" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO42_C (RULE) Close files when they are no longer needed" name="CERT_C-FIO42" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" name="CERT_C-FIO40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM07_C (REC) Ensure that the arguments to calloc(), when multiplied, do not wrap" name="CERT_C-MEM07" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" name="CERT_C-MSC32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" name="CERT_C-MSC33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" name="CERT_C-MSC38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" name="CERT_C-MSC37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" name="CERT_C-MSC39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" name="CERT_C-EXP30" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" name="CERT_C-CON40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP20_C (REC) Perform explicit tests to determine success, true and false, and equality" name="CERT_C-EXP20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON43_C (RULE) Do not allow data races in multithreaded code" name="CERT_C-CON43" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" name="CERT_C-CON41" rules="1" total="0" />
               <Category authTot="3;" authUrg="2;" desc="CERT-MSC41_C (RULE) Never hard code sensitive information" name="CERT_C-MSC41" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC40_C (RULE) Do not violate constraints" name="CERT_C-MSC40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" name="CERT_C-MEM33" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM34_C (RULE) Only free memory allocated dynamically" name="CERT_C-MEM34" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" name="CERT_C-MEM31" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM35_C (RULE) Allocate sufficient memory for an object" name="CERT_C-MEM35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG01_C (REC) Understand implementation-specific details regarding signal handler persistence" name="CERT_C-SIG01" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" name="CERT_C-MEM36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG00_C (REC) Mask signals handled by noninterruptible signal handlers" name="CERT_C-SIG00" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="CERT-API00_C (REC) Functions should validate their parameters" name="CERT_C-API00" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO24_C (REC) Do not open a file that is already open" name="CERT_C-FIO24" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG02_C (REC) Avoid using signals to implement normal functionality" name="CERT_C-SIG02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO21_C (REC) Do not create temporary files in shared directories" name="CERT_C-FIO21" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO22_C (REC) Close files before spawning processes" name="CERT_C-FIO22" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP40_C (RULE) Do not modify constant objects" name="CERT_C-EXP40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM30_C (RULE) Do not access freed memory" name="CERT_C-MEM30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP33_C (RULE) Do not read uninitialized memory" name="CERT_C-EXP33" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP34_C (RULE) Do not dereference null pointers" name="CERT_C-EXP34" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" name="CERT_C-EXP32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_C-CON32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" name="CERT_C-EXP37" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON33_C (RULE) Avoid race conditions when using library functions" name="CERT_C-CON33" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-CON30_C (RULE) Clean up thread-specific storage" name="CERT_C-CON30" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" name="CERT_C-EXP35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" name="CERT_C-CON31" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" name="CERT_C-EXP36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_C-CON36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" name="CERT_C-CON37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" name="CERT_C-CON34" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" name="CERT_C-EXP39" rules="6" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" name="CERT_C-CON35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_C-CON38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" name="CERT_C-CON39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL22_C (REC) Use volatile for data that cannot be cached" name="CERT_C-DCL22" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL20_C (REC) Explicitly specify void when a function accepts no arguments" name="CERT_C-DCL20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP00_C (REC) Use parentheses for precedence of operation" name="CERT_C-EXP00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP05_C (REC) Do not cast away a const qualification" name="CERT_C-EXP05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP02_C (REC) Be aware of the short-circuit behavior of the logical AND and OR operators" name="CERT_C-EXP02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" name="CERT_C-EXP08" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL19_C (REC) Minimize the scope of variables and functions" name="CERT_C-DCL19" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" name="CERT_C-DCL18" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL12_C (REC) Implement abstract data types using opaque types" name="CERT_C-DCL12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO01_C (REC) Be careful using functions that use file names for identification" name="CERT_C-FIO01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" name="CERT_C-DCL11" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL10_C (REC) Maintain the contract between the writer and caller of variadic functions" name="CERT_C-DCL10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL16_C (REC) Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value" name="CERT_C-DCL16" rules="1" total="0" />
               <Category authTot="16;" authUrg="1;" desc="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" name="CERT_C-DCL15" rules="1" total="16" />
               <Category authTot="3;" authUrg="0;" desc="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" name="CERT_C-DCL13" rules="1" total="3" />
               <Category authTot="17;" authUrg="0;" desc="CERT-EXP12_C (REC) Do not ignore values returned by functions" name="CERT_C-EXP12" rules="2" total="17" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" name="CERT_C-EXP10" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP15_C (REC) Do not place a semicolon on the same line as an if, for, or while statement" name="CERT_C-EXP15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP16_C (REC) Do not compare function pointers to constant values" name="CERT_C-EXP16" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP14_C (REC) Beware of integer promotion when performing bitwise operations on integer types smaller than int" name="CERT_C-EXP14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP19_C (REC) Use braces for the body of an if, for, or while statement" name="CERT_C-EXP19" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR00_C (REC) Represent characters using an appropriate type" name="CERT_C-STR00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR09_C (REC) Don't assume numeric values for expressions with type plain character" name="CERT_C-STR09" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" name="CERT_C-STR07" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR04_C (REC) Use plain char for characters in the basic character set" name="CERT_C-STR04" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR05_C (REC) Use pointers to const when referring to string literals" name="CERT_C-STR05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR02_C (REC) Sanitize data passed to complex subsystems" name="CERT_C-STR02" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR03_C (REC) Do not inadvertently truncate a string" name="CERT_C-STR03" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" name="CERT_C-DCL41" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" name="CERT_C-DCL40" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" name="CERT_C-CON01" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON02_C (REC) Do not use volatile as a synchronization primitive" name="CERT_C-CON02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON05_C (REC) Do not perform operations that can block while holding a lock" name="CERT_C-CON05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR11_C (REC) Do not specify the bound of a character array initialized with a string literal" name="CERT_C-STR11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" name="CERT_C-DCL39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR10_C (REC) Do not concatenate different type of string literals" name="CERT_C-STR10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL31_C (RULE) Declare identifiers before using them" name="CERT_C-DCL31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" name="CERT_C-DCL38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" name="CERT_C-DCL37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" name="CERT_C-DCL36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" name="CERT_C-DCL30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR01_C (REC) Do not apply the sizeof operator to a pointer when taking the size of an array" name="CERT_C-ARR01" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR02_C (REC) Explicitly specify array bounds, even if implicitly defined by an initializer" name="CERT_C-ARR02" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized" name="CERT_C-PRE02" rules="1" total="8" />
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros" name="CERT_C-PRE00" rules="1" total="8" />
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE01_C (REC) Use parentheses within macros around parameter names" name="CERT_C-PRE01" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE06_C (REC) Enclose header files in an include guard" name="CERT_C-PRE06" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE07_C (REC) Avoid using repeated question marks" name="CERT_C-PRE07" rules="1" total="0" />
               <Category authTot="18;" authUrg="0;" desc="CERT-POS54_C (RULE) Detect and handle POSIX library errors" name="CERT_C-POS54" rules="3" total="18" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" name="CERT_C-ERR30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" name="CERT_C-ERR32" rules="1" total="0" />
               <Category authTot="18;" authUrg="0;" desc="CERT-ERR33_C (RULE) Detect and handle standard library errors" name="CERT_C-ERR33" rules="4" total="18" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR34_C (RULE) Detect errors when converting a string to a number" name="CERT_C-ERR34" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" name="CERT_C-POS51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" name="CERT_C-POS50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" name="CERT_C-POS53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" name="CERT_C-POS52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR06_C (REC) Understand the termination behavior of assert() and abort()" name="CERT_C-ERR06" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" name="CERT_C-ERR07" rules="2" total="4" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL06_C (REC) Use meaningful symbolic constants to represent literal values" name="CERT_C-DCL06" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL01_C (REC) Do not reuse variable names in subscopes" name="CERT_C-DCL01" rules="2" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-DCL00_C (REC) Const-qualify immutable objects" name="CERT_C-DCL00" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL05_C (REC) Use typedefs of non-pointer types only" name="CERT_C-DCL05" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="CERT-DCL04_C (REC) Do not declare more than one variable per declaration" name="CERT_C-DCL04" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL02_C (REC) Use visually distinct identifiers" name="CERT_C-DCL02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS44_C (RULE) Do not use signals to terminate threads" name="CERT_C-POS44" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" name="CERT_C-POS48" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" name="CERT_C-POS47" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" name="CERT_C-POS49" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" name="CERT_C-WIN30" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR01_C (REC) Use ferror() rather than errno to check for FILE stream errors" name="CERT_C-ERR01" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR02_C (REC) Avoid in-band error indicators" name="CERT_C-ERR02" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR04_C (REC) Choose an appropriate termination strategy" name="CERT_C-ERR04" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" name="CERT_C-ERR05" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" name="CERT_C-FLP37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" name="CERT_C-FLP36" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" name="CERT_C-FLP34" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS33_C (RULE) Do not use vfork()" name="CERT_C-POS33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" name="CERT_C-ARR32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" name="CERT_C-POS35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" name="CERT_C-POS34" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" name="CERT_C-ARR30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" name="CERT_C-POS37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" name="CERT_C-FLP32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" name="CERT_C-POS36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" name="CERT_C-POS39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" name="CERT_C-FLP30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" name="CERT_C-POS38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" name="CERT_C-ARR39" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" name="CERT_C-ARR38" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" name="CERT_C-ARR37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" name="CERT_C-ARR36" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS30_C (RULE) Use the readlink() function properly" name="CERT_C-POS30" rules="3" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C++" name="CERT_CPP" rules="143" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL55_CPP (RULE) Avoid information leakage when passing a class object across a trust boundary" name="CERT_CPP-DCL55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" name="CERT_CPP-ERR52" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL56_CPP (RULE) Avoid cycles during initialization of static objects" name="CERT_CPP-DCL56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR51_CPP (RULE) Handle all exceptions" name="CERT_CPP-ERR51" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON56_CPP (RULE) Do not speculatively lock a non-recursive mutex that is already owned by the calling thread" name="CERT_CPP-CON56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" name="CERT_CPP-DCL53" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" name="CERT_CPP-ERR50" rules="14" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL54_CPP (RULE) Overload allocation and deallocation functions as a pair in the same scope" name="CERT_CPP-DCL54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL59_CPP (RULE) Do not define an unnamed namespace in a header file" name="CERT_CPP-DCL59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" name="CERT_CPP-MEM51" rules="4" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" name="CERT_CPP-MEM52" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" name="CERT_CPP-DCL57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL58_CPP (RULE) Do not modify the standard namespaces" name="CERT_CPP-DCL58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM50_CPP (RULE) Do not access freed memory" name="CERT_CPP-MEM50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON50_CPP (RULE) Do not destroy a mutex while it is locked" name="CERT_CPP-CON50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM55_CPP (RULE) Honor replacement dynamic storage management requirements" name="CERT_CPP-MEM55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON51_CPP (RULE) Ensure actively held locks are released on exceptional conditions" name="CERT_CPP-CON51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR59_CPP (RULE) Do not throw an exception across execution boundaries" name="CERT_CPP-ERR59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM56_CPP (RULE) Do not store an already-owned pointer value in an unrelated smart pointer" name="CERT_CPP-MEM56" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing" name="CERT_CPP-ERR58" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM53_CPP (RULE) Explicitly construct and destruct objects when manually managing object lifetime" name="CERT_CPP-MEM53" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" name="CERT_CPP-ERR57" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" name="CERT_CPP-MEM54" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON54_CPP (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_CPP-CON54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR56_CPP (RULE) Guarantee exception safety" name="CERT_CPP-ERR56" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON55_CPP (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_CPP-CON55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR55_CPP (RULE) Honor exception specifications" name="CERT_CPP-ERR55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON52_CPP (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_CPP-CON52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR54_CPP (RULE) Catch handlers should order their parameter types from most derived to least derived" name="CERT_CPP-ERR54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM57_CPP (RULE) Avoid using default operator new for over-aligned types" name="CERT_CPP-MEM57" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON53_CPP (RULE) Avoid deadlock by locking in a predefined order" name="CERT_CPP-CON53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR53_CPP (RULE) Do not reference base classes or class data members in a constructor or destructor function-try-block handler" name="CERT_CPP-ERR53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR53_CPP (RULE) Range check element access" name="CERT_CPP-STR53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" name="CERT_CPP-DCL51" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_CPP-STR50" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL52_CPP (RULE) Never qualify a reference type with const or volatile" name="CERT_CPP-DCL52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR52_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a basic_string" name="CERT_CPP-STR52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL50_CPP (RULE) Do not define a C-style variadic function" name="CERT_CPP-DCL50" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" name="CERT_CPP-STR51" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP53_CPP (RULE) Write constructor member initializers in the canonical order" name="CERT_CPP-OOP53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" name="CERT_CPP-OOP52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP51_CPP (RULE) Do not slice derived objects" name="CERT_CPP-OOP51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" name="CERT_CPP-OOP50" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" name="CERT_CPP-OOP57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC50_CPP (RULE) Do not use std::rand() for generating pseudorandom numbers" name="CERT_CPP-MSC50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP56_CPP (RULE) Honor replacement handler requirements" name="CERT_CPP-OOP56" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC51_CPP (RULE) Ensure your random number generator is properly seeded" name="CERT_CPP-MSC51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP55_CPP (RULE) Do not use pointer-to-member operators to access nonexistent members" name="CERT_CPP-OOP55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC52_CPP (RULE) Value-returning functions must return a value from all exit paths" name="CERT_CPP-MSC52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP54_CPP (RULE) Gracefully handle self-copy assignment" name="CERT_CPP-OOP54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP58_CPP (RULE) Copy operations must not mutate the source object" name="CERT_CPP-OOP58" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO51_CPP (RULE) Close files when they are no longer needed" name="CERT_CPP-FIO51" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO50_CPP (RULE) Do not alternately input and output from a file stream without an intervening positioning call" name="CERT_CPP-FIO50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL60_CPP (RULE) Obey the one-definition rule" name="CERT_CPP-DCL60" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP55_CPP (RULE) Do not access a cv-qualified object through a cv-unqualified type" name="CERT_CPP-EXP55" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" name="CERT_CPP-EXP56" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP53_CPP (RULE) Do not read uninitialized memory" name="CERT_CPP-EXP53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" name="CERT_CPP-EXP54" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP59_CPP (RULE) Use offsetof() on valid types and members" name="CERT_CPP-EXP59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" name="CERT_CPP-EXP57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP58_CPP (RULE) Pass an object of the correct type to va_start" name="CERT_CPP-EXP58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP62_CPP (RULE) Do not access the bits of an object representation that are not part of the object's value representation" name="CERT_CPP-EXP62" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP63_CPP (RULE) Do not rely on the value of a moved-from object" name="CERT_CPP-EXP63" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP60_CPP (RULE) Do not pass a nonstandard-layout type object across execution boundaries" name="CERT_CPP-EXP60" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" name="CERT_CPP-EXP61" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC53_CPP (RULE) Do not return from a function declared [[noreturn]]" name="CERT_CPP-MSC53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC54_CPP (RULE) A signal handler must be a plain old function" name="CERT_CPP-MSC54" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" name="CERT_CPP-ERR62" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" name="CERT_CPP-ERR61" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" name="CERT_CPP-ERR60" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR57_CPP (RULE) Provide a valid ordering predicate" name="CERT_CPP-CTR57" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR58_CPP (RULE) Predicate function objects should not be mutable" name="CERT_CPP-CTR58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR53_CPP (RULE) Use valid iterator ranges" name="CERT_CPP-CTR53" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" name="CERT_CPP-CTR54" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR55_CPP (RULE) Do not use an additive operator on an iterator if the result would overflow" name="CERT_CPP-CTR55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" name="CERT_CPP-CTR56" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR50_CPP (RULE) Guarantee that container indices and iterators are within the valid range" name="CERT_CPP-CTR50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR51_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a container" name="CERT_CPP-CTR51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR52_CPP (RULE) Guarantee that library functions do not overflow" name="CERT_CPP-CTR52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT50_CPP (RULE) Do not cast to an out-of-range enumeration value" name="CERT_CPP-INT50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP51_CPP (RULE) Do not delete an array through a pointer of the incorrect type" name="CERT_CPP-EXP51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" name="CERT_CPP-EXP52" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" name="CERT_CPP-EXP50" rules="6" total="0" />
            </Category>
            <Category authTot="149;" authUrg="6;" desc="Coding Conventions" name="CODSTA" rules="465" total="149">
               <Category authTot="91;" authUrg="1;" desc="Coding Conventions for C++" name="CODSTA-CPP" rules="112" total="91" />
               <Category authTot="41;" authUrg="5;" desc="Coding Conventions for Modern C++" name="CODSTA-MCPP" rules="69" total="41" />
            </Category>
            <Category authTot="69;" authUrg="2;" desc="Comments" name="COMMENT" rules="16" total="69" />
            <Category authTot="0;" authUrg="0;" desc="Common Weakness Enumeration" name="CWE" rules="90" total="0">
               <Category authTot="0;" authUrg="0;" desc="CWE-532 Inclusion of Sensitive Information in Log Files" name="CWE-532" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CWE-772 Missing Release of Resource after Effective Lifetime" name="CWE-772" rules="2" total="1" />
               <Category authTot="1;" authUrg="0;" desc="CWE-476 NULL Pointer Dereference" name="CWE-476" rules="2" total="1" />
               <Category authTot="1;" authUrg="0;" desc="CWE-770 Allocation of Resources Without Limits or Throttling" name="CWE-770" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-190 Integer Overflow or Wraparound" name="CWE-190" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" name="CWE-78" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-617 Reachable Assertion" name="CWE-617" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')" name="CWE-835" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-415 Double Free" name="CWE-415" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" name="CWE-119" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-416 Use After Free" name="CWE-416" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-611 Improper Restriction of XML External Entity Reference" name="CWE-611" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-732 Incorrect Permission Assignment for Critical Resource" name="CWE-732" rules="2" total="0" />
               <Category authTot="3;" authUrg="2;" desc="CWE-798 Use of Hard-coded Credentials" name="CWE-798" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="CWE-125 Out-of-bounds Read" name="CWE-125" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-400 Uncontrolled Resource Consumption" name="CWE-400" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-269 Improper Privilege Management" name="CWE-269" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-863 Incorrect Authorization" name="CWE-863" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-200 Information Exposure" name="CWE-200" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-287 Improper Authentication" name="CWE-287" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" name="CWE-362" rules="5" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CWE-20 Improper Input Validation" name="CWE-20" rules="10" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" name="CWE-22" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" name="CWE-89" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-704 Incorrect Type Conversion or Cast" name="CWE-704" rules="12" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-426 Untrusted Search Path" name="CWE-426" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-787 Out-of-bounds Write" name="CWE-787" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-326 Inadequate Encryption Strength" name="CWE-326" rules="1" total="0" />
            </Category>
            <Category authTot="5;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="26" total="5" />
            <Category authTot="212;" authUrg="0;" desc="Formatting" name="FORMAT" rules="51" total="212" />
            <Category authTot="13;" authUrg="0;" desc="Global Static Analysis" name="GLOBAL" rules="21" total="13" />
            <Category authTot="0;" authUrg="0;" desc="High Integrity C++" name="HICPP" rules="234" total="0">
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.2 Initialize none, the first only or all enumerators in an enumeration" name="HICPP-7_2_2" rules="1" total="0" />
               <Category authTot="153;" authUrg="0;" desc="HIC++ 2.1.1 Do not use tab characters in source files" name="HICPP-2_1_1" rules="1" total="153" />
               <Category authTot="21;" authUrg="0;" desc="HIC++ 2.5.3 Use nullptr for the null pointer constant" name="HICPP-2_5_3" rules="1" total="21" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 15.1.1 Only use instances of std::exception for exceptions" name="HICPP-15_1_1" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.2 Do not use octal constants (other than zero)" name="HICPP-2_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.1 Do not concatenate strings with different encoding prefixes" name="HICPP-2_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.4 Write members in an initialization list in the order in which they are declared" name="HICPP-12_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.1 Use an explicit enumeration base and ensure that it is large enough to store all enumerators" name="HICPP-7_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.5 Use delegating constructors to reduce code duplication" name="HICPP-12_4_5" rules="1" total="0" />
               <Category authTot="7;" authUrg="0;" desc="HIC++ 3.3.1 Do not use variables with static storage duration" name="HICPP-3_3_1" rules="1" total="7" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.5.1 Do not ignore the result of std::remove, std::remove if or std::unique" name="HICPP-17_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.5 Implement a minimal set of operators and use them to implement all other related operators" name="HICPP-13_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.1.1 Ensure that a function argument does not undergo an array-to-pointer conversion" name="HICPP-4_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.2 Ensure that a braced aggregate initializer matches the layout of the aggregate object" name="HICPP-8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" name="HICPP-8_4_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.2 If a member of a set of callable functions includes a universal reference parameter, ensure that one appears in the same position for all other members" name="HICPP-13_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.1 Within the scope of a lock, ensure that no static path results in a lock of the same mutex" name="HICPP-18_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.2 Ensure that order of nesting of locks in a project forms a DAG" name="HICPP-18_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.5 Do not access the members of std::mutex directly" name="HICPP-18_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.6 Do not use relaxed atomics" name="HICPP-18_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" name="HICPP-5_3_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.3 Do not use std::recursive mutex" name="HICPP-18_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.2 Ensure that a pointer to member that is a virtual function is only compared (==) with nullptr" name="HICPP-5_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.1 Ensure that all overloads of a function are visible from where it is called" name="HICPP-13_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.4 Only use std::unique lock when std::lock guard cannot be used" name="HICPP-18_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.1 Do not write code that expects floating point calculations to yield exact results" name="HICPP-5_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.2 Allocate memory using new and release it using delete" name="HICPP-5_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.1 Do not apply unary minus to operands of unsigned type" name="HICPP-5_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.2.1 Declare bit-fields with an explicitly unsigned integral or enumeration type" name="HICPP-9_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.3.1 Correctly declare overloads for operator new and delete" name="HICPP-12_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" name="HICPP-6_1_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.1.1 Declare all data members private" name="HICPP-11_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.3 Ensure that a non-empty case statement block does not fall through to the next label" name="HICPP-6_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" name="HICPP-6_1_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" name="HICPP-6_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.3.1 Do not use using directives" name="HICPP-7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.2.1 Do not throw an exception from a destructor" name="HICPP-15_2_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" name="HICPP-2_4_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.7 Declare assignment operators with the ref-qualifier &amp;" name="HICPP-12_5_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.3.1 Ensure that a derived class has at most one base class which is not an interface class" name="HICPP-10_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.8 Make the copy assignment operator of an abstract class protected or define it =delete" name="HICPP-12_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.6 Use an atomic, non-throwing swap operation to implement the copy and move assignment operators" name="HICPP-12_5_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.3 Ensure that a user defined move/copy constructor only moves/copies base and member objects" name="HICPP-12_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.4 Declare noexcept the move constructor and move assignment operator" name="HICPP-12_5_4" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="HIC++ 8.1.1 Do not use multiple levels of pointer indirection" name="HICPP-8_1_1" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.2.1 Do not declare functions at block scope" name="HICPP-3_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.1 Use const container calls when result is immediately converted to a const iterator" name="HICPP-17_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.2 Use API calls that construct objects in place" name="HICPP-17_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.4.1 Do not convert floating values to integral types except through use of standard library functions" name="HICPP-4_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.1 Do not overload operators with special semantics" name="HICPP-13_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" name="HICPP-18_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" name="HICPP-13_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.3 Do not share volatile data between threads" name="HICPP-18_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.3 Declare binary arithmetic and bitwise operators as non-members" name="HICPP-13_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.4 When overloading the subscript operator (operator[]) implement both const and non-const versions" name="HICPP-13_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.1 Use high integrity::thread in place of std::thread" name="HICPP-18_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.6.1 Do not use bitwise operators with signed operands" name="HICPP-5_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.4 Use std::call_once rather than the Double-Checked Locking pattern" name="HICPP-18_2_4" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" name="HICPP-5_2_1" rules="3" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" name="HICPP-5_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.2 Ensure that a constructor initializes explicitly all base classes and non-static data members" name="HICPP-12_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member" name="HICPP-12_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" name="HICPP-12_4_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.4.1 Postpone variable definitions as long as possible" name="HICPP-6_4_1" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" name="HICPP-15_3_2" rules="3" total="1" />
               <Category authTot="22;" authUrg="0;" desc="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" name="HICPP-16_1_1" rules="9" total="22" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" name="HICPP-16_1_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.2.1 Do not use friend declarations" name="HICPP-11_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.3.1 Do not use the C comment delimiters /* ... */" name="HICPP-2_3_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file" name="HICPP-7_4_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.3 Ensure that an object or a function used from multiple translation units is declared in a single header file" name="HICPP-7_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" name="HICPP-7_4_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.5 Include directly the minimum number of headers required for compilation" name="HICPP-16_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.3 Match the filename in a #include directive to the one on the filesystem" name="HICPP-16_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.3.1 Do not access non-static members from a catch handler of constructor/destructor function try block" name="HICPP-15_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.4 Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" name="HICPP-16_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.3.2 Do not comment out code" name="HICPP-2_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" name="HICPP-10_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.4 Do not create smart pointers of array type" name="HICPP-17_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.5 Do not create an rvalue reference of std::array" name="HICPP-17_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.1.1 Do not hide declarations" name="HICPP-3_1_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.1 Do not use std::move on objects declared with const or const &amp; type" name="HICPP-17_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.1.1 Use variadic templates rather than an ellipsis" name="HICPP-14_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.2 Use std::forward to forward universal references" name="HICPP-17_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.3 Do not subsequently use the argument to std::forward" name="HICPP-17_3_3" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" name="HICPP-3_5_1" rules="4" total="15" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" name="HICPP-4_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.10 Use static assert for assertions involving compile time constants" name="HICPP-7_1_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.4 Do not pass std::unique ptr by const reference" name="HICPP-8_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" name="HICPP-8_2_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.2 Do not declare functions with an excessive number of parameters" name="HICPP-8_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.1 Make parameter names absent or identical in all declarations" name="HICPP-8_2_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 18.1.1 Do not use platform specific multi-threading facilities" name="HICPP-18_1_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &amp;&amp;, ||, sizeof, typeid or a function passed to condition variable::wait" name="HICPP-5_1_6" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.5 Include a (possibly empty) parameter list in every lambda expression" name="HICPP-5_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" name="HICPP-5_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" name="HICPP-5_1_2" rules="10" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 5.1.1 Use symbolic names instead of literal values in code" name="HICPP-5_1_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.4 Do not capture variables implicitly in a lambda" name="HICPP-5_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" name="HICPP-5_1_3" rules="2" total="0" />
               <Category authTot="6;" authUrg="0;" desc="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" name="HICPP-12_5_1" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.2 Define special members =default if the behavior is equivalent" name="HICPP-12_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.2 Ensure that execution of a function with a non-void return type ends in a return statement with a value" name="HICPP-6_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.1.1 Do not declare implicit user defined conversions" name="HICPP-12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.1 Ensure that all statements are reachable" name="HICPP-1_2_1" rules="10" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.2 Ensure that no expression or sub-expression is redundant" name="HICPP-1_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" name="HICPP-6_3_1" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" name="HICPP-7_1_4" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.2.1 Do not use digraphs or trigraphs" name="HICPP-2_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.3 Do not place type specifiers before non-type specifiers in a declaration" name="HICPP-7_1_3" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" name="HICPP-7_1_6" rules="3" total="15" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.5 Do not inline large functions" name="HICPP-7_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.5.1 Do not use the asm declaration" name="HICPP-7_5_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call" name="HICPP-7_1_8" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.7 Use a trailing return type in preference to type disambiguation using typename" name="HICPP-7_1_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.9 Do not explicitly specify the return type of a lambda" name="HICPP-7_1_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.1.1 Ensure that access to base class subobjects does not require explicit disambiguation" name="HICPP-10_1_1" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="HIC++ 7.1.2 Use const whenever possible" name="HICPP-7_1_2" rules="1" total="8" />
               <Category authTot="12;" authUrg="0;" desc="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" name="HICPP-7_1_1" rules="2" total="12" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.2 Do not explicitly specialize a function template that is overloaded with other templates" name="HICPP-14_2_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 17.2.1 Wrap use of the C Standard Library" name="HICPP-17_2_1" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.1 Do not return a reference or a pointer to an automatic variable defined within the function" name="HICPP-3_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.3 Declare extern an explicitly instantiated template" name="HICPP-14_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.3 Use RAII for resources" name="HICPP-3_4_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.1 Declare template specializations in the same file as the primary template they specialize." name="HICPP-14_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.2 Do not assign the address of a variable to a pointer with a greater lifetime" name="HICPP-3_4_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" name="HICPP-4_2_2" rules="6" total="2" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression" name="HICPP-4_2_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.4 Define =delete functions with parameters of type rvalue reference to const" name="HICPP-8_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.3 Do not use default arguments" name="HICPP-8_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.1 Do not write functions with an excessive McCabe Cyclomatic Complexity" name="HICPP-8_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.4.1 Do not use std::condition variable any on a std::mutex" name="HICPP-18_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.3 Do not convert from a base class to a derived class" name="HICPP-5_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.2 Do not cast an expression to an enumeration type" name="HICPP-5_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.8.1 Do not use the conditional operator (?:) as a sub-expression" name="HICPP-5_8_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" name="HICPP-5_4_1" rules="3" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.5 Do not introduce virtual functions in a final class" name="HICPP-9_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.1.1 Do not use std::vector&lt;bool>" name="HICPP-17_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.3 Do not return non-const handles to class data from const member functions" name="HICPP-9_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" name="HICPP-9_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" name="HICPP-9_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.2 Make default arguments the same or absent when overriding a virtual function" name="HICPP-9_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.4 Do not use deprecated STL library features" name="HICPP-1_3_4" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 1.3.3 Do not use the C Standard Library .h headers" name="HICPP-1_3_3" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.4 Only modify a for loop counter in the for expression" name="HICPP-6_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.5 Do not use throw exception specifications" name="HICPP-1_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.3 Do not alter a control or counter variable more than once in a loop" name="HICPP-6_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.2.1 Declare virtual, private or protected the destructor of a type used as a base class" name="HICPP-12_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.2 Do not use the register keyword" name="HICPP-1_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.1 Do not use the increment operator (++) on a variable of type bool" name="HICPP-1_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.2 Ensure that a loop has a single loop counter, an optional control variable, and is not degenerate" name="HICPP-6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.1 Implement a loop that only uses element values as a range-based loop" name="HICPP-6_2_1" rules="1" total="0" />
            </Category>
            <Category authTot="12;" authUrg="0;" desc="Initialization" name="INIT" rules="22" total="12" />
            <Category authTot="385;" authUrg="6;" desc="Joint Strike Fighter" name="JSF" rules="278" total="385" />
            <Category authTot="35;" authUrg="2;" desc="Metrics" name="METRICS" rules="43" total="35" />
            <Category authTot="49;" authUrg="1;" desc="MISRA C 1998" name="MISRA" rules="60" total="49" />
            <Category authTot="79;" authUrg="1;" desc="MISRA C 2004" name="MISRA2004" rules="223" total="79" />
            <Category authTot="197;" authUrg="2;" desc="MISRA C++ 2008" name="MISRA2008" rules="337" total="197" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012 (Legacy)" name="MISRA2012" rules="354" total="0">
               <Category authTot="57;" authUrg="0;" desc="MISRA C 2012 Rules" name="MISRA2012-RULE" rules="310" total="57" />
               <Category authTot="28;" authUrg="0;" desc="MISRA C 2012 Directives" name="MISRA2012-DIR" rules="44" total="28" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012" name="MISRAC2012" rules="354" total="0">
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3 (Required) A cast shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9 (Advisory) An object should be defined at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.8 (Required) A cast shall not remove any const or volatile qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" rules="1" total="0" />
               <Category authTot="22;" authUrg="0;" desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" rules="2" total="22" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" rules="12" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" rules="6" total="2" />
               <Category authTot="2;" authUrg="0;" desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a" name="MISRAC2012-RULE_22_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3 (Required) The relational operators >, >=, &lt; and &lt;= shall not be applied to objects of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.6 (Required) The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.8 (Required) Variable-length array types shall not be used" name="MISRAC2012-RULE_18_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h> shall not be used" name="MISRAC2012-RULE_21_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h> shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.5 (Required) The standard header file &lt;signal.h> shall not be used" name="MISRAC2012-RULE_21_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.12 (Required) The standard header file &lt;fenv.h> shall not be used" name="MISRAC2012-RULE_21_12" rules="2" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.11 (Required) The standard header file &lt;tgmath.h> shall not be used" name="MISRAC2012-RULE_21_11" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_7" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_8" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h> shall have an appropriate value" name="MISRAC2012-RULE_21_18" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_3" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders" name="MISRAC2012-RULE_13_2" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.1 (Required) The features of &lt;stdarg.h> shall not be used" name="MISRAC2012-RULE_17_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_21" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" rules="1" total="0" />
               <Category authTot="17;" authUrg="0;" desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" rules="2" total="17" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.2 (Required) There shall be no dead code" name="MISRAC2012-RULE_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.7 (Advisory) There should be no unused parameters in functions" name="MISRAC2012-RULE_2_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.5 (Advisory) A project should not contain unused macro definitions" name="MISRAC2012-RULE_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" rules="2" total="0" />
               <Category authTot="15;" authUrg="0;" desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" rules="3" total="15" />
               <Category authTot="1;" authUrg="0;" desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" rules="2" total="3" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" rules="9" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" rules="15" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" rules="2" total="0" />
            </Category>
            <Category authTot="5;" authUrg="0;" desc="Memory and Resource Management" name="MRM" rules="60" total="5" />
            <Category authTot="47;" authUrg="1;" desc="Naming Conventions" name="NAMING" rules="98" total="47">
               <Category authTot="33;" authUrg="0;" desc="Hungarian Notation" name="NAMING-HN" rules="44" total="33" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Object Oriented" name="OOP" rules="61" total="0" />
            <Category authTot="9;" authUrg="0;" desc="Optimization" name="OPT" rules="43" total="9" />
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2017)" name="OWASP2017" rules="16" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Sensitive Data Exposure" name="OWASP2017-A3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Broken Authentication" name="OWASP2017-A2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Injection" name="OWASP2017-A1" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A10 Insufficient Logging&amp;Monitoring" name="OWASP2017-A10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A6 Security Misconfiguration" name="OWASP2017-A6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Broken Access Control" name="OWASP2017-A5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 XML External Entities (XXE)" name="OWASP2017-A4" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP API Security Top 10 (2019)" name="OWASP2019" rules="42" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP API2 Broken User Authentication" name="OWASP2019-API2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="OWASP API4 Lack of Resources &amp; Rate Limiting" name="OWASP2019-API4" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API3 Excessive Data Exposure" name="OWASP2019-API3" rules="17" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API10 Insufficient Logging &amp; Monitoring" name="OWASP2019-API10" rules="2" total="0" />
               <Category authTot="17;" authUrg="1;" desc="OWASP API9 Improper Assets Management" name="OWASP2019-API9" rules="7" total="17" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API8 Injection" name="OWASP2019-API8" rules="10" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API7 Security Misconfiguration" name="OWASP2019-API7" rules="3" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2021)" name="OWASP2021" rules="18" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A8 Software and Data Integrity Failures" name="OWASP2021-A8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A7 Identification and Authentication Failures" name="OWASP2021-A7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Security Misconfiguration" name="OWASP2021-A5" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A9 Security Logging and Monitoring Failures" name="OWASP2021-A9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 Insecure Design" name="OWASP2021-A4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Injection" name="OWASP2021-A3" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Cryptographic Failures" name="OWASP2021-A2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Broken Access Control" name="OWASP2021-A1" rules="3" total="0" />
            </Category>
            <Category authTot="1;" authUrg="0;" desc="Parser diagnostics" name="PARSER" rules="2" total="1" />
            <Category authTot="7;" authUrg="0;" desc="Possible Bugs" name="PB" rules="85" total="7" />
            <Category authTot="4;" authUrg="0;" desc="Physical File Organization" name="PFO" rules="10" total="4" />
            <Category authTot="9;" authUrg="0;" desc="Portability" name="PORT" rules="39" total="9" />
            <Category authTot="64;" authUrg="0;" desc="Preprocessor" name="PREPROC" rules="30" total="64" />
            <Category authTot="0;" authUrg="0;" desc="Qt Best Practices" name="QT" rules="18" total="0" />
            <Category authTot="12;" authUrg="0;" desc="Security" name="SECURITY" rules="54" total="12" />
            <Category authTot="3;" authUrg="0;" desc="STL Best Practices" name="STL" rules="42" total="3" />
            <Category authTot="0;" authUrg="0;" desc="Template" name="TEMPL" rules="18" total="0" />
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000160" desc="Do not use weak encryption functions" id="APSC_DV-000160-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000170" desc="Do not use weak encryption functions" id="APSC_DV-000170-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-000480" desc="Protect against SQL injection" id="APSC_DV-000480-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000500" desc="Observe correct revocation order while relinquishing privileges" id="APSC_DV-000500-a" origId="SECURITY-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000650" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-000650-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Protect against SQL injection" id="APSC_DV-001290-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-001290" desc="Untrusted data is used as a loop boundary" id="APSC_DV-001290-b" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid passing user input into methods as parameters" id="APSC_DV-001290-c" origId="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="APSC_DV-001290-d" origId="SECURITY-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001300" desc="Protect against SQL injection" id="APSC_DV-001300-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001740" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001740-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001750" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001750-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001850" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001850-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001860" desc="Do not use weak encryption functions" id="APSC_DV-001860-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions when using fork and file descriptors" id="APSC_DV-001995-a" origId="BD-TRS-FORKFILE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while checking for the existence of a symbolic link" id="APSC_DV-001995-b" origId="BD-TRS-SYMLINK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while accessing files" id="APSC_DV-001995-c" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Use locks to prevent race conditions when modifying bit fields" id="APSC_DV-001995-d" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Do not use global variable with different locks set" id="APSC_DV-001995-e" origId="BD-TRS-MLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using thread-unsafe functions" id="APSC_DV-001995-f" origId="SECURITY-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Usage of functions prone to race is not allowed" id="APSC_DV-001995-g" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using the 'vfork()' function" id="APSC_DV-001995-h" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Properly define signal handlers" id="APSC_DV-001995-i" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002000" desc="Ensure resources are freed" id="APSC_DV-002000-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002010" desc="Do not use weak encryption functions" id="APSC_DV-002010-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Do not use the rand() function for generating pseudorandom numbers" id="APSC_DV-002290-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Properly seed pseudorandom number generators" id="APSC_DV-002290-b" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="The 'random_shuffle' identifier should not be used" id="APSC_DV-002290-c" origId="CODSTA-MCPP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="The random number generator functions 'rand()' and 'srand()' should not be used" id="APSC_DV-002290-d" origId="SECURITY-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002350" desc="Do not use weak encryption functions" id="APSC_DV-002350-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="APSC_DV-002390-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not process structured text data natively" id="APSC_DV-002390-b" origId="CODSTA-201" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="APSC_DV-002390-c" origId="SECURITY-14" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use mbstowcs() function" id="APSC_DV-002390-d" origId="SECURITY-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002400-a" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="APSC_DV-002400-b" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using the 'vfork()' function" id="APSC_DV-002400-c" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using thread-unsafe functions" id="APSC_DV-002400-d" origId="SECURITY-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002440" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002440-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002460" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002460-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002470" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002470-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002480" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002480-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002510" desc="Protect against command injection" id="APSC_DV-002510-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against environment injection" id="APSC_DV-002520-a" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against file name injection" id="APSC_DV-002520-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against SQL injection" id="APSC_DV-002520-c" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002520-d" origId="SECURITY-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid tainted data in array indexes" id="APSC_DV-002520-e" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002520-f" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002520-g" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against command injection" id="APSC_DV-002520-h" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid printing tainted data on the output console" id="APSC_DV-002520-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002520-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002520" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002520-k" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against environment injection" id="APSC_DV-002530-a" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against file name injection" id="APSC_DV-002530-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against SQL injection" id="APSC_DV-002530-c" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002530-d" origId="SECURITY-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid tainted data in array indexes" id="APSC_DV-002530-e" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002530-f" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002530-g" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against command injection" id="APSC_DV-002530-h" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid printing tainted data on the output console" id="APSC_DV-002530-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002530-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002530" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002530-k" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002540" desc="Protect against SQL injection" id="APSC_DV-002540-a" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against environment injection" id="APSC_DV-002550-a" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against file name injection" id="APSC_DV-002550-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against SQL injection" id="APSC_DV-002550-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002550-d" origId="SECURITY-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid tainted data in array indexes" id="APSC_DV-002550-e" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002550-f" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002550-g" origId="BD-SECURITY-LOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against command injection" id="APSC_DV-002550-h" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid printing tainted data on the output console" id="APSC_DV-002550-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002550-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002550" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002550-k" origId="SECURITY-38" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against environment injection" id="APSC_DV-002560-a" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against file name injection" id="APSC_DV-002560-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against SQL injection" id="APSC_DV-002560-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002560-d" origId="SECURITY-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid tainted data in array indexes" id="APSC_DV-002560-e" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002560-f" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002560-g" origId="BD-SECURITY-LOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against command injection" id="APSC_DV-002560-h" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid printing tainted data on the output console" id="APSC_DV-002560-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002560-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002560" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002560-k" origId="SECURITY-38" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002570-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002570-b" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow due to defining incorrect format limits" id="APSC_DV-002590-a" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow due to reading a not zero terminated string" id="APSC_DV-002590-b" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when reading from a buffer" id="APSC_DV-002590-c" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when writing to a buffer" id="APSC_DV-002590-d" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid integer overflows" id="APSC_DV-002590-e" origId="BD-PB-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Prevent buffer overflows from tainted data" id="APSC_DV-002590-f" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002590-g" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="APSC_DV-002590-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer read overflow from tainted data" id="APSC_DV-002590-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer write overflow from tainted data" id="APSC_DV-002590-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Ensure the output buffer is large enough when using path manipulation functions" id="APSC_DV-002590-k" origId="BD-PB-PATHBUF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="APSC_DV-003110" desc="Do not hard code string literals" id="APSC_DV-003110-a" origId="CODSTA-203" sev="1" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-003235-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-003235-b" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_1" desc="Avoid unused values" id="AUTOSAR-A0_1_1-a" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="AUTOSAR-A0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="AUTOSAR-A0_1_2-a" origId="CODSTA-CPP-58" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_3" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-A0_1_3-a" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A0_1_4" desc="Eliminate unused parameters" id="AUTOSAR-A0_1_4-a" origId="OPT-03" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_5" desc="There shall be no unused named parameters in virtual functions" id="AUTOSAR-A0_1_5-a" origId="OPT-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_6" desc="A project shall not contain unused type declarations" id="AUTOSAR-A0_1_6-a" origId="GLOBAL-UNUSEDTYPE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_2" desc="Type long double shall not be used" id="AUTOSAR-A0_4_2-a" origId="PORT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_4" desc="Validate values passed to library functions" id="AUTOSAR-A0_4_4-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_1_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="AUTOSAR-A10_1_1-a" origId="OOP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Never redefine an inherited nonvirtual function" id="AUTOSAR-A10_2_1-a" origId="OOP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="AUTOSAR-A10_2_1-b" origId="OOP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="AUTOSAR-A10_3_1-a" origId="CODSTA-MCPP-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_2" desc="Each overriding virtual function shall be declared with the override or final specifier" id="AUTOSAR-A10_3_2-a" origId="CODSTA-MCPP-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_3" desc="Do not introduce virtual functions in a final class" id="AUTOSAR-A10_3_3-a" origId="CODSTA-MCPP-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_5" desc="A user-defined assignment operator shall not be virtual" id="AUTOSAR-A10_3_5-a" origId="OOP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_4_1" desc="Hierarchies should be based on abstract classes" id="AUTOSAR-A10_4_1-a" origId="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_1" desc="A non-POD type should be defined as class" id="AUTOSAR-A11_0_1-a" origId="OOP-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_2" desc="Structs should only contain public data members and should not be a base or inherit" id="AUTOSAR-A11_0_2-a" origId="OOP-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_3_1" desc="Friend declarations shall not be used except declarations of comparison operators" id="AUTOSAR-A11_3_1-a" origId="OOP-11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_1" desc="If a class declares a copy or move operation, or a destructor, either via '=default', '=delete', or via a user-provided declaration, then all others of these five special member functions shall be declared as well" id="AUTOSAR-A12_0_1-a" origId="CODSTA-MCPP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_2" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="AUTOSAR-A12_0_2-a" origId="CODSTA-CPP-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="AUTOSAR-A12_1_1-a" origId="PB-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All member variables should be initialized in constructor" id="AUTOSAR-A12_1_1-b" origId="INIT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_2" desc="Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" id="AUTOSAR-A12_1_2-a" origId="INIT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_3" desc="User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" id="AUTOSAR-A12_1_3-a" origId="INIT-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_4" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="AUTOSAR-A12_1_4-a" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_5" desc="Use delegating constructors to reduce code duplication" id="AUTOSAR-A12_1_5-a" origId="CODSTA-CPP-106" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_6" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="AUTOSAR-A12_1_6-a" origId="CODSTA-MCPP-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_4_1" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="AUTOSAR-A12_4_1-a" origId="OOP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A12_4_2" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="AUTOSAR-A12_4_2-a" origId="CODSTA-MCPP-23" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_6_1" desc="Prefer initialization to assignment in constructors" id="AUTOSAR-A12_6_1-a" origId="INIT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_7_1" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="AUTOSAR-A12_7_1-a" origId="CODSTA-CPP-105" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_1" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="AUTOSAR-A12_8_1-a" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_2" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="AUTOSAR-A12_8_2-a" origId="CODSTA-MCPP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_3" desc="Do not rely on the value of a moved-from object" id="AUTOSAR-A12_8_3-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_4" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A12_8_4-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_5" desc="Check for assignment to self in operator=" id="AUTOSAR-A12_8_5-a" origId="OOP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_6" desc="Avoid public copy constructors and assignment operators in base classes" id="AUTOSAR-A12_8_6-a" origId="OOP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="AUTOSAR-A12_8_7-a" origId="CODSTA-MCPP-19" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_2" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="AUTOSAR-A13_1_2-a" origId="NAMING-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_3" desc="User defined literals operators shall only perform conversion of passed parameters" id="AUTOSAR-A13_1_3-a" origId="CODSTA-MCPP-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_1" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="AUTOSAR-A13_2_1-a" origId="CODSTA-CPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="AUTOSAR-A13_2_2-a" origId="CODSTA-CPP-102" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_3" desc="A relational operator shall return a boolean value" id="AUTOSAR-A13_2_3-a" origId="CODSTA-CPP-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_3_1" desc="Avoid Overloading on Forwarding References" id="AUTOSAR-A13_3_1-a" origId="CODSTA-MCPP-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_1" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="AUTOSAR-A13_5_1-a" origId="HICPP-13_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_2" desc="User-conversion cast operators should be made explicit" id="AUTOSAR-A13_5_2-a" origId="CODSTA-MCPP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_3" desc="Do not use user-defined conversion functions" id="AUTOSAR-A13_5_3-a" origId="CODSTA-CPP-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_4" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="AUTOSAR-A13_5_4-b" origId="CODSTA-CPP-86" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions" id="AUTOSAR-A13_5_5-a" origId="CODSTA-CPP-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="AUTOSAR-A13_5_5-b" origId="CODSTA-CPP-107_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_6_1" desc="Digit sequences separators ' shall only be used consistently" id="AUTOSAR-A13_6_1-a" origId="CODSTA-MCPP-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_1" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="AUTOSAR-A14_5_1-a" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_3" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="AUTOSAR-A14_5_3-a" origId="TEMPL-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_7_2" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="AUTOSAR-A14_7_2-a" origId="TEMPL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_8_2" desc="Overloaded function templates shall not be explicitly specialized" id="AUTOSAR-A14_8_2-a" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_0_2" desc="Ensure resources are freed" id="AUTOSAR-A15_0_2-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_1" desc="Only use instances of std::exception for exceptions" id="AUTOSAR-A15_1_1-a" origId="HICPP-15_1_1-a" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_2" desc="An exception object should not have pointer type" id="AUTOSAR-A15_1_2-a" origId="EXCEPT-09" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_4" desc="Ensure resources are freed" id="AUTOSAR-A15_1_4-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_5" desc="Do not throw an exception across execution boundaries" id="AUTOSAR-A15_1_5-a" origId="PORT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_2_1-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_2_1-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_2" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_3_2-a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_3_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_3_3-a" origId="EXCEPT-06" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_4" desc="Avoid using catch-all exception handlers" id="AUTOSAR-A15_3_4-a" origId="EXCEPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_5" desc="A class type exception shall always be caught by reference" id="AUTOSAR-A15_3_5-a" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_1" desc="Do not use throw exception specifications" id="AUTOSAR-A15_4_1-a" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="AUTOSAR-A15_4_2-a" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_3" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="AUTOSAR-A15_4_3-a" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A15_4_4" desc="Declare functions 'noexcept' if they will not emit exceptions" id="AUTOSAR-A15_4_4-a" origId="CODSTA-MCPP-09" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_5" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="AUTOSAR-A15_4_5-a" origId="EXCEPT-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_1-a" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="AUTOSAR-A15_5_1-b" origId="EXCEPT-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_2-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-b" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_3-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_3-b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Do not throw from within destructor" id="AUTOSAR-A15_5_3-c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_5_3-d" origId="EXCEPT-06" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-A15_5_3-e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-A15_5_3-f" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_5_3-g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="AUTOSAR-A15_5_3-h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_5_3-i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Always catch exceptions" id="AUTOSAR-A15_5_3-j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Properly define exit handlers" id="AUTOSAR-A15_5_3-k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="AUTOSAR-A16_0_1-a" origId="PREPROC-26" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#error directive shall not be used" id="AUTOSAR-A16_0_1-b" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_0_1-c" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="Avoid using macro definitions" id="AUTOSAR-A16_0_1-d" origId="PREPROC-01" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#undef shall not be used" id="AUTOSAR-A16_0_1-e" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_1" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="AUTOSAR-A16_2_1-a" origId="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_2" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="AUTOSAR-A16_2_2-a" origId="OPT-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_6_1" desc="#error directive shall not be used" id="AUTOSAR-A16_6_1-a" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_7_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_7_1-a" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define nor #undef identifier 'defined'" id="AUTOSAR-A17_0_1-a" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="AUTOSAR-A17_0_1-b" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="AUTOSAR-A17_0_1-c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not redefine reserved words" id="AUTOSAR-A17_0_1-d" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="AUTOSAR-A17_0_1-e" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_1_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-A17_1_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_6_1" desc="Do not modify the standard namespaces 'std' and 'posix'" id="AUTOSAR-A17_6_1-a" origId="CODSTA-CPP-95" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_1" desc="The C library shall not be used" id="AUTOSAR-A18_0_1-a" origId="CODSTA-CPP-59" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-a" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-b" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not include &lt;locale.h> header" id="AUTOSAR-A18_0_3-a" origId="MISRA-121_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not use 'setlocale' function" id="AUTOSAR-A18_0_3-b" origId="MISRA-121_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_1_1" desc="C-style arrays shall not be used" id="AUTOSAR-A18_1_1-a" origId="STL-37" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_2" desc="Avoid using vector&lt;bool>" id="AUTOSAR-A18_1_2-a" origId="STL-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_3" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A18_1_3-a" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_4" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="AUTOSAR-A18_1_4-a" origId="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_6" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="AUTOSAR-A18_1_6-a" origId="CODSTA-MCPP-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_1" desc="Do not use calloc, malloc, realloc and free functions" id="AUTOSAR-A18_5_1-a" origId="MRM-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="AUTOSAR-A18_5_10-a" origId="MRM-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="AUTOSAR-A18_5_10-b" origId="MRM-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete if you write operator new" id="AUTOSAR-A18_5_11-a" origId="MRM-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete[] if you write operator new[]" id="AUTOSAR-A18_5_11-b" origId="MRM-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_5_2" desc="Dynamic heap memory allocation shall not be used" id="AUTOSAR-A18_5_2-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="AUTOSAR-A18_5_3-a" origId="MRM-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="AUTOSAR-A18_5_3-b" origId="MRM-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Properly deallocate dynamically allocated resources" id="AUTOSAR-A18_5_3-c" origId="BD-RES-BADDEALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_4" desc="Define both sized and unsized versions of operator delete" id="AUTOSAR-A18_5_4-a" origId="CODSTA-MCPP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="AUTOSAR-A18_5_5-a" origId="MRM-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Freed memory shouldn't be accessed under any circumstances" id="AUTOSAR-A18_5_5-b" origId="MRM-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Properly define new handlers" id="AUTOSAR-A18_5_5-c" origId="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_8" desc="Use allocation by declaration rather than by new or malloc" id="AUTOSAR-A18_5_8-a" origId="MRM-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_9" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="AUTOSAR-A18_5_9-a" origId="MRM-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A18_9_1-a" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_2" desc="The 'std::forward' function shall be used to forward universal references" id="AUTOSAR-A18_9_2-a" origId="CODSTA-MCPP-13_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_3" desc="Do not use std::move on objects declared with the const or const &amp; type" id="AUTOSAR-A18_9_3-a" origId="CODSTA-MCPP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_4" desc="Do not subsequently use the argument to std::forward" id="AUTOSAR-A18_9_4-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A1_1_1-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="AUTOSAR-A1_1_1-b" origId="MRM-40_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="AUTOSAR-A1_1_1-c" origId="MRM-40_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The C library shall not be used" id="AUTOSAR-A1_1_1-d" origId="CODSTA-CPP-59" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A1_1_1-e" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="AUTOSAR-A1_1_1-f" origId="CODSTA-MCPP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A1_1_1-g" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'random_shuffle' identifier should not be used" id="AUTOSAR-A1_1_1-h" origId="CODSTA-MCPP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="AUTOSAR-A1_1_1-i" origId="CODSTA-MCPP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'set_unexpected' identifier should not be used" id="AUTOSAR-A1_1_1-j" origId="CODSTA-MCPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use throw exception specifications" id="AUTOSAR-A1_1_1-k" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_1" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="AUTOSAR-A20_8_1-a" origId="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_2" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_2-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_3" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_3-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_4" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="AUTOSAR-A20_8_4-a" origId="CODSTA-MCPP-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_5" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="AUTOSAR-A20_8_5-a" origId="CODSTA-MCPP-16_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_6" desc="Prefer 'std::make_shared' to the direct use of new" id="AUTOSAR-A20_8_6-a" origId="CODSTA-MCPP-16_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_7" desc="Avoid cyclic shared_ptr references" id="AUTOSAR-A20_8_7-a" origId="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A21_8_1" desc="Do not pass incorrect values to ctype.h library functions" id="AUTOSAR-A21_8_1-a" origId="BD-API-CTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="AUTOSAR-A23_0_1-a" origId="CODSTA-MCPP-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Do not modify container while iterating over it" id="AUTOSAR-A23_0_2-a" origId="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="AUTOSAR-A23_0_2-b" origId="BD-CO-STRMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_1_1" desc="Make predicates const pure functions" id="AUTOSAR-A25_1_1-a" origId="STL-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_4_1" desc="For associative containers never use comparison function returning true for equal values" id="AUTOSAR-A25_4_1-a" origId="STL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_1" desc="Do not use the rand() function for generating pseudorandom numbers" id="AUTOSAR-A26_5_1-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_2" desc="Properly seed pseudorandom number generators" id="AUTOSAR-A26_5_2-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="AUTOSAR-A27_0_1-a" origId="SECURITY-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid tainted data in array indexes" id="AUTOSAR-A27_0_1-b" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_1-c" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="AUTOSAR-A27_0_1-d" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer read overflow from tainted data" id="AUTOSAR-A27_0_1-e" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_1-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Protect against command injection" id="AUTOSAR-A27_0_1-g" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Exclude unsanitized user input from format strings" id="AUTOSAR-A27_0_1-h" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-A27_0_2-a" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-A27_0_2-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_2-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_2-e" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_2-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_3" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="AUTOSAR-A27_0_3-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="AUTOSAR-A27_0_4-a" origId="SECURITY-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Avoid using unsafe string functions that do not check bounds" id="AUTOSAR-A27_0_4-b" origId="SECURITY-13" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_4-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="C-style strings shall not be used" id="AUTOSAR-A27_0_4-d" origId="PB-76" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="AUTOSAR-A2_10_1-a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="AUTOSAR-A2_10_1-b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="AUTOSAR-A2_10_1-c" origId="CODSTA-CPP-83" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="AUTOSAR-A2_10_1-d" origId="CODSTA-CPP-84" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="AUTOSAR-A2_10_1-e" origId="CODSTA-CPP-85" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="AUTOSAR-A2_10_4-a" origId="GLOBAL-REUSEDQUALGLOBVAR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="AUTOSAR-A2_10_4-b" origId="GLOBAL-REUSEDQUALSTATFUN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-a" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-c" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_11_1" desc="Do not use the volatile keyword" id="AUTOSAR-A2_11_1-a" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="AUTOSAR-A2_13_1-a" origId="CODSTA-CPP-60_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_2" desc="String literals with different encoding prefixes shall not be concatenated" id="AUTOSAR-A2_13_2-a" origId="PB-38_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_3" desc="Type wchar_t shall not be used" id="AUTOSAR-A2_13_3-a" origId="PORT-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_4" desc="A string literal shall not be modified" id="AUTOSAR-A2_13_4-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_5" desc="Hexadecimal constants will be represented using all uppercase letters" id="AUTOSAR-A2_13_5-a" origId="CODSTA-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_6" desc="Universal character names shall be used only inside character or string literals" id="AUTOSAR-A2_13_6-a" origId="NAMING-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_3_1" desc="Only use characters defined in ISO C standard" id="AUTOSAR-A2_3_1-a" origId="MISRA-005" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-a" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-b" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_2" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="AUTOSAR-A2_5_2-a" origId="CODSTA-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_1" desc="Line-splicing shall not be used in // comments" id="AUTOSAR-A2_7_1-a" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="AUTOSAR-A2_7_2-a" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="AUTOSAR-A2_7_3-a" origId="COMMENT-14" sev="2" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="AUTOSAR-A2_7_3-b" origId="COMMENT-14_b" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_8_1" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="AUTOSAR-A2_8_1-a" origId="NAMING-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_1_1-a" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_2" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="AUTOSAR-A3_1_2-a" origId="NAMING-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_3" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="AUTOSAR-A3_1_3-a" origId="NAMING-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_4" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="AUTOSAR-A3_1_4-a" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_5" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="AUTOSAR-A3_1_5-a" origId="CODSTA-CPP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_6" desc="Trivial accessor and mutator functions should be inlined" id="AUTOSAR-A3_1_6-a" origId="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="AUTOSAR-A3_3_1" desc="Objects or functions with external linkage shall be declared in a header file" id="AUTOSAR-A3_3_1-a" origId="MISRA-023" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_3_1-b" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A3_3_2" desc="Static and thread-local objects shall be constant-initialized" id="AUTOSAR-A3_3_2-a" origId="CODSTA-MCPP-32" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not use resources that have been freed" id="AUTOSAR-A3_8_1-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-A3_8_1-b" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-A3_8_1-c" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not point to a wrapped object that has been freed" id="AUTOSAR-A3_8_1-d" origId="BD-PB-WRAPESC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="AUTOSAR-A3_9_1" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="AUTOSAR-A3_9_1-b" origId="CODSTA-223" sev="2" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-A4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="AUTOSAR-A4_10_1-b" origId="CODSTA-MCPP-04" sev="2" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_5_1" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="AUTOSAR-A4_5_1-a" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from signed to unsigned type" id="AUTOSAR-A4_7_1-a" origId="PB-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-b" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid conversions of constant values to a narrower type" id="AUTOSAR-A4_7_1-c" origId="PORT-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-d" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-A4_7_1-e" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-A4_7_1-f" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-g" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid integer overflows" id="AUTOSAR-A4_7_1-h" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function calls" id="AUTOSAR-A5_0_1-a" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Do not use more than one volatile between two adjacent sequence points" id="AUTOSAR-A5_0_1-b" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="AUTOSAR-A5_0_1-c" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="AUTOSAR-A5_0_1-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="AUTOSAR-A5_0_1-e" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="AUTOSAR-A5_0_1-f" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="AUTOSAR-A5_0_1-g" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_2" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="AUTOSAR-A5_0_2-a" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_3" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="AUTOSAR-A5_0_3-a" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Don't treat arrays polymorphically" id="AUTOSAR-A5_0_4-a" origId="PB-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="AUTOSAR-A5_0_4-b" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Do not treat arrays polymorphically" id="AUTOSAR-A5_0_4-c" origId="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_10_1" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="AUTOSAR-A5_10_1-a" origId="CODSTA-MCPP-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_16_1" desc="The conditional operator should not be used as a sub-expression" id="AUTOSAR-A5_16_1-a" origId="CODSTA-224" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="1;" cat="AUTOSAR-A5_1_1" desc="Avoid magic numbers" id="AUTOSAR-A5_1_1-a" origId="CODSTA-26" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_2" desc="Avoid default capture modes" id="AUTOSAR-A5_1_2-a" origId="CODSTA-MCPP-15_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_3" desc="Include a parameter list in every lambda expression" id="AUTOSAR-A5_1_3-a" origId="CODSTA-MCPP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never return lambdas that capture local objects by reference" id="AUTOSAR-A5_1_4-a" origId="CODSTA-MCPP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never capture local objects from an outer lambda by reference" id="AUTOSAR-A5_1_4-b" origId="CODSTA-MCPP-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="AUTOSAR-A5_1_4-c" origId="CODSTA-MCPP-17_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_6" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="AUTOSAR-A5_1_6-a" origId="CODSTA-MCPP-45" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_7" desc="A lambda shall not be an operand to typeid" id="AUTOSAR-A5_1_7-a" origId="CODSTA-MCPP-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_8" desc="Lambda expressions should not be defined inside another lambda expression" id="AUTOSAR-A5_1_8-a" origId="CODSTA-MCPP-44" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_1" desc="Avoid dynamic_casts" id="AUTOSAR-A5_2_1-a" origId="CODSTA-CPP-35" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A5_2_2" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="AUTOSAR-A5_2_2-a" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_3" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="AUTOSAR-A5_2_3-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_4" desc="Avoid using reinterpret_cast" id="AUTOSAR-A5_2_4-a" origId="CODSTA-CPP-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-A5_2_5-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays and pointers out of bounds" id="AUTOSAR-A5_2_5-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-A5_2_5-c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid tainted data in array indexes" id="AUTOSAR-A5_2_5-d" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_6" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="AUTOSAR-A5_2_6-a" origId="CODSTA-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="AUTOSAR-A5_3_1-a" origId="CODSTA-CPP-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="AUTOSAR-A5_3_1-b" origId="CODSTA-CPP-104_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_3_2" desc="Avoid null pointer dereferencing" id="AUTOSAR-A5_3_2-a" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_3" desc="Do not delete objects with incomplete class at the point of deletion" id="AUTOSAR-A5_3_3-a" origId="PB-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_5_1" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-A5_5_1-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_6_1" desc="Avoid division by zero" id="AUTOSAR-A5_6_1-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Copy assignment operators should not have side effects that could affect copying the object" id="AUTOSAR-A6_2_1-a" origId="MRM-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Move assignment operators should not have side effects that could affect moving the object" id="AUTOSAR-A6_2_1-b" origId="MRM-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_2" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="AUTOSAR-A6_2_2-a" origId="PB-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_4_1" desc="Every switch statement will have at least two cases and a potential default" id="AUTOSAR-A6_4_1-a" origId="CODSTA-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="AUTOSAR-A6_5_1-a" origId="CODSTA-MCPP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_2" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="AUTOSAR-A6_5_2-a" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_3" desc="'Do' statements should not be used except in a function-like macro" id="AUTOSAR-A6_5_3-a" origId="CODSTA-18_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="AUTOSAR-A6_5_4-a" origId="CODSTA-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="AUTOSAR-A6_5_4-b" origId="CODSTA-53" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_6_1" desc="The goto statement shall not be used" id="AUTOSAR-A6_6_1-a" origId="MISRA2004-14_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-A7_1_1" desc="Declare parameters or local variable as const whenever possible" id="AUTOSAR-A7_1_1-a" origId="CODSTA-CPP-53" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare const variables whenever possible" id="AUTOSAR-A7_1_2-a" origId="CODSTA-MCPP-11_a_cpp11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare functions whenever possible" id="AUTOSAR-A7_1_2-b" origId="CODSTA-MCPP-11_b_cpp11" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_3" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="AUTOSAR-A7_1_3-a" origId="FORMAT-47_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_4" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A7_1_4-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_5" desc="Do not overuse 'auto' specifier" id="AUTOSAR-A7_1_5-a" origId="CODSTA-MCPP-40" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_6" desc="Prefer alias declarations to typedefs" id="AUTOSAR-A7_1_6-a" origId="CODSTA-MCPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Only one statement shall be allowed per line" id="AUTOSAR-A7_1_7-a" origId="FORMAT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Multiple variable declarations shall not be allowed on the same line" id="AUTOSAR-A7_1_7-b" origId="FORMAT-29" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-A7_1_7-c" origId="FORMAT-33" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_8" desc="Do not place type specifiers before non-type specifiers in a declaration" id="AUTOSAR-A7_1_8-a" origId="HICPP-7_1_3-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_9" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="AUTOSAR-A7_1_9-a" origId="CODSTA-CPP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_1" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="AUTOSAR-A7_2_1-a" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_2" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="AUTOSAR-A7_2_2-a" origId="HICPP-7_2_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_3" desc="Prefer Scoped Enums to Unscoped Enums" id="AUTOSAR-A7_2_3-a" origId="CODSTA-MCPP-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_4" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="AUTOSAR-A7_2_4-a" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_5" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="AUTOSAR-A7_2_5-a" origId="CODSTA-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_3_1" desc="Write a using declaration to redeclare overloaded functions" id="AUTOSAR-A7_3_1-a" origId="OOP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_4_1" desc="Do not use the asm declaration" id="AUTOSAR-A7_4_1-a" origId="HICPP-7_5_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_1" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="AUTOSAR-A7_5_1-a" origId="PB-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_2" desc="Functions shall not call themselves, either directly or indirectly" id="AUTOSAR-A7_5_2-a" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_6_1" desc="Never return from functions that should not return" id="AUTOSAR-A7_6_1-a" origId="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_2_1" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="AUTOSAR-A8_2_1-a" origId="TEMPL-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_1" desc="Do not use functions with variable numbers of arguments" id="AUTOSAR-A8_4_1-a" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="AUTOSAR-A8_4_10" desc="A parameter shall be passed by reference if it can't be NULL" id="AUTOSAR-A8_4_10-a" origId="BD-PB-REFPARAM" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_11" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_11-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not pass std::unique_ptr by const reference" id="AUTOSAR-A8_4_12-a" origId="HICPP-8_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_12-b" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_12-c" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_12-d" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_13-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_13-b" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_13-c" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="AUTOSAR-A8_4_2-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Pass objects by reference instead of by value" id="AUTOSAR-A8_4_3-a" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_3-b" origId="CODSTA-CPP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_4" desc="Multiple output values from a function should be returned as a struct or tuple" id="AUTOSAR-A8_4_4-a" origId="CODSTA-MCPP-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_5" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_5-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_6" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_6-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass built-in-types by value unless you are modifying them" id="AUTOSAR-A8_4_7-a" origId="CODSTA-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass small objects with a trivial copy constructor by value" id="AUTOSAR-A8_4_7-b" origId="HICPP-8_2_3-b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_8" desc="Output parameters shall not be used" id="AUTOSAR-A8_4_8-a" origId="CODSTA-CPP-103" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_9" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_9-a" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_0" desc="Avoid use before initialization" id="AUTOSAR-A8_5_0-a" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_1" desc="List members in an initialization list in the order in which they are declared" id="AUTOSAR-A8_5_1-a" origId="INIT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="3;" cat="AUTOSAR-A8_5_2" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="AUTOSAR-A8_5_2-a" origId="CODSTA-MCPP-38" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_3" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="AUTOSAR-A8_5_3-a" origId="CODSTA-MCPP-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_4" desc="Avoid overloading constructors with std::initializer_list" id="AUTOSAR-A8_5_4-a" origId="CODSTA-MCPP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Public member functions shall not return non-const handles to private/protected class-data" id="AUTOSAR-A9_3_1-a" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Protected member function shall not return non-const handles to private class-data" id="AUTOSAR-A9_3_1-b" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-a" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-b" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="AUTOSAR-A9_6_1-a" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_2" desc="Do not declare member variables as bit-fields" id="AUTOSAR-A9_6_2-a" origId="CODSTA-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="AUTOSAR-M0_1_1-a" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="AUTOSAR-M0_1_1-b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="AUTOSAR-M0_1_1-c" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="AUTOSAR-M0_1_1-d" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="AUTOSAR-M0_1_1-e" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in 'for' loop" id="AUTOSAR-M0_1_1-f" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in switch statement" id="AUTOSAR-M0_1_1-g" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with external linkage shall be used at least once" id="AUTOSAR-M0_1_10-a" origId="GLOBAL-UNUSEDFUNC" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-M0_1_10-b" origId="OPT-30" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-a" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-aa" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-ab" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Avoid conditions that always evaluate to the same value" id="AUTOSAR-M0_1_2-ac" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-b" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-c" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-d" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-e" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-f" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-g" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-h" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-i" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-j" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-k" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-l" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-m" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-n" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-o" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-p" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-q" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-r" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-s" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-t" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-u" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-v" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-w" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-x" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-y" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-z" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused local variables" id="AUTOSAR-M0_1_3-a" origId="OPT-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unnecessary local variables" id="AUTOSAR-M0_1_3-b" origId="OPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused private member variables" id="AUTOSAR-M0_1_3-c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="AUTOSAR-M0_1_4" desc="A project shall not contain non-volatile POD variables having only one use" id="AUTOSAR-M0_1_4-a" origId="GLOBAL-ONEUSEVAR" sev="2" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="All non-empty functions with void return type shall have external side effect(s)" id="AUTOSAR-M0_1_8-a" origId="OPT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="Functions with void return type shall not be empty" id="AUTOSAR-M0_1_8-b" origId="OPT-32_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_9" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="AUTOSAR-M0_1_9-a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M0_3_1-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-M0_3_1-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not compare two unrelated pointers" id="AUTOSAR-M0_3_1-c" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M0_3_1-d" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid division by zero" id="AUTOSAR-M0_3_1-e" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid null pointer dereferencing" id="AUTOSAR-M0_3_1-f" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-M0_3_1-g" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="AUTOSAR-M0_3_1-h" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when reading from a buffer" id="AUTOSAR-M0_3_1-i" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not check for null after dereferencing" id="AUTOSAR-M0_3_1-j" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="AUTOSAR-M0_3_2" desc="If a function returns error information, then that error information shall be tested" id="AUTOSAR-M0_3_2-a" origId="MISRA2004-16_10" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_4_2" desc="Use of floating-point arithmetic shall be documented" id="AUTOSAR-M0_4_2-a" origId="COMMENT-10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_1" desc="Classes should not be derived from virtual bases" id="AUTOSAR-M10_1_1-a" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_2" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="AUTOSAR-M10_1_2-a" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_3" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="AUTOSAR-M10_1_3-a" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_2_1" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="AUTOSAR-M10_2_1-a" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_3_3" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="AUTOSAR-M10_3_3-a" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M11_0_1" desc="Member data in non-POD types shall be private" id="AUTOSAR-M11_0_1-a" origId="OOP-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M12_1_1" desc="Do not use dynamic type of an object under construction" id="AUTOSAR-M12_1_1-a" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_5_3" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="AUTOSAR-M14_5_3-a" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_6_1" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="AUTOSAR-M14_6_1-a" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_0_3" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="AUTOSAR-M15_0_3-a" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_1" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="AUTOSAR-M15_1_1-a" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_2" desc="NULL shall not be thrown explicitly" id="AUTOSAR-M15_1_2-a" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-M15_1_3-a" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M15_3_1" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-M15_3_1-a" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="AUTOSAR-M15_3_3-a" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-M15_3_4-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-M15_3_4-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="AUTOSAR-M15_3_6-a" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_7" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="AUTOSAR-M15_3_7-a" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="AUTOSAR-M16_0_1-a" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_2" desc="Macros shall not be #define'd or #undef'd within a block" id="AUTOSAR-M16_0_2-a" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="AUTOSAR-M16_0_5-a" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-M16_0_6" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="AUTOSAR-M16_0_6-a" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_7" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="AUTOSAR-M16_0_7-a" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_8" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="AUTOSAR-M16_0_8-a" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="AUTOSAR-M16_1_1-a" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="AUTOSAR-M16_1_2-a" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_2_3" desc="Use multiple include guards" id="AUTOSAR-M16_2_3-a" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_1" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="AUTOSAR-M16_3_1-a" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_2" desc="The # and ## preprocessor operators should not be used" id="AUTOSAR-M16_3_2-a" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_2" desc="The names of standard library macros and objects shall not be reused" id="AUTOSAR-M17_0_2-a" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_3" desc="The names of standard library functions shall not be overridden" id="AUTOSAR-M17_0_3-a" origId="CODSTA-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_5" desc="The facilities provided by &lt;setjmp.h> should not be used" id="AUTOSAR-M17_0_5-a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-a" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-c" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-d" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_4" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="AUTOSAR-M18_0_4-a" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_5" desc="The unbounded functions of library &lt;cstring> shall not be used" id="AUTOSAR-M18_0_5-a" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_2_1" desc="The macro offsetof, in library stddef.h, shall not be used" id="AUTOSAR-M18_2_1-a" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="AUTOSAR-M18_7_1-b" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M19_3_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-M19_3_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M27_0_1" desc="The input/output library stdio.h shall not be used" id="AUTOSAR-M27_0_1-a" origId="MISRA2004-20_9" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M2_10_1" desc="Different identifiers shall be typographically unambiguous" id="AUTOSAR-M2_10_1-a" origId="NAMING-47" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal constants (other than zero) shall not be used" id="AUTOSAR-M2_13_2-a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal escape sequences shall not be used" id="AUTOSAR-M2_13_2-b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_3" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="AUTOSAR-M2_13_3-a" origId="CODSTA-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_4" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="AUTOSAR-M2_13_4-a" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="AUTOSAR-M2_7_1-a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_1_2" desc="Always declare functions at file scope" id="AUTOSAR-M3_1_2-a" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_1" desc="All declarations of an object or function shall have compatible types" id="AUTOSAR-M3_2_1-a" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_2" desc="The One Definition Rule shall not be violated" id="AUTOSAR-M3_2_2-a" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="AUTOSAR-M3_2_3-a" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_4" desc="An identifier with external linkage shall have exactly one external definition" id="AUTOSAR-M3_2_4-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_3_2" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="AUTOSAR-M3_3_2-a" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Declare variables as locally as possible" id="AUTOSAR-M3_4_1-a" origId="OPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="AUTOSAR-M3_4_1-b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_1" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="AUTOSAR-M3_9_1-a" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_3" desc="The underlying bit representations of floating-point values shall not be used" id="AUTOSAR-M3_9_3-a" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-M4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M4_10_2" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="AUTOSAR-M4_10_2-a" origId="CODSTA-CPP-63" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_1" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="AUTOSAR-M4_5_1-a" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_3" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="AUTOSAR-M4_5_3-a" origId="CODSTA-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_10" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="AUTOSAR-M5_0_10-a" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_11" desc="The plain char type shall be used only for the storage and use of character values" id="AUTOSAR-M5_0_11-a" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_12" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="AUTOSAR-M5_0_12-a" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_14" desc="The first operand of a conditional-operator shall have type bool" id="AUTOSAR-M5_0_14-a" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_15" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="AUTOSAR-M5_0_15-a" origId="MISRA2004-17_4" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M5_0_16-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-M5_0_16-b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_17" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M5_0_17-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_18" desc="Do not compare two unrelated pointers" id="AUTOSAR-M5_0_18-a" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="AUTOSAR-M5_0_2-a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="No parentheses are required for the operand of a unary operator" id="AUTOSAR-M5_0_2-c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parentheses unless all operators in the expression are the same" id="AUTOSAR-M5_0_2-e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_20" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="AUTOSAR-M5_0_20-a" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_21" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="AUTOSAR-M5_0_21-a" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-a" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-b" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M5_0_4" desc="Avoid implicit conversions between signed and unsigned integer types" id="AUTOSAR-M5_0_4-a" origId="MISRA2004-10_1_a" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="There shall be no implicit conversions from integral to floating type" id="AUTOSAR-M5_0_5-a" origId="MISRA2004-10_1_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-M5_0_5-b" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit integral conversions from a wider to a narrower type" id="AUTOSAR-M5_0_6-a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-M5_0_6-b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="AUTOSAR-M5_0_6-c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of floating type should not be cast to an integer type" id="AUTOSAR-M5_0_7-a" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_7-b" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_8-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="AUTOSAR-M5_0_8-b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_9" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_9-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="AUTOSAR-M5_14_1-a" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_17_1" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="AUTOSAR-M5_17_1-a" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_18_1" desc="The comma operator shall not be used" id="AUTOSAR-M5_18_1-a" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="AUTOSAR-M5_19_1-a" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="AUTOSAR-M5_19_1-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_10" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="AUTOSAR-M5_2_10-a" origId="MISRA2004-12_13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading comma operator &quot;,&quot;" id="AUTOSAR-M5_2_11-a" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="AUTOSAR-M5_2_11-b" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_12" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="AUTOSAR-M5_2_12-a" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_2" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="AUTOSAR-M5_2_2-a" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_3" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="AUTOSAR-M5_2_3-a" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_6" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-M5_2_6-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M5_2_8" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="AUTOSAR-M5_2_8-a" origId="CODSTA-65" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_9" desc="A cast should not convert a pointer type to an integral type" id="AUTOSAR-M5_2_9-a" origId="MISRA2004-11_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M5_3_1" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="AUTOSAR-M5_3_1-a" origId="CODSTA-CPP-67" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_2" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="AUTOSAR-M5_3_2-a" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_3" desc="The unary &amp; operator shall not be overloaded" id="AUTOSAR-M5_3_3-a" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="AUTOSAR-M5_3_4-a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="AUTOSAR-M5_3_4-b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="AUTOSAR-M5_3_4-c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_8_1" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="AUTOSAR-M5_8_1-a" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_1" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="AUTOSAR-M6_2_1-a" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_2" desc="Floating-point expressions shall not be tested for equality or inequality" id="AUTOSAR-M6_2_2-a" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_3" desc="A null statement shall occur on a line by itself or be followed by a comment" id="AUTOSAR-M6_2_3-a" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="AUTOSAR-M6_3_1-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_1" desc="'if' and 'else' should be followed by a compound statement" id="AUTOSAR-M6_4_1-a" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="AUTOSAR-M6_4_2-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_3-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_3-b" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_3-c" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="Every switch statement shall have at least one case clause" id="AUTOSAR-M6_4_3-d" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_3-e" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_4" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_4-a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_5" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_5-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_6" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_6-a" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_7-a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_2" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="AUTOSAR-M6_5_2-a" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_3" desc="Do not modify for loop counter within a body of the loop" id="AUTOSAR-M6_5_3-a" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_4" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="AUTOSAR-M6_5_4-a" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_5" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="AUTOSAR-M6_5_5-a" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_6" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="AUTOSAR-M6_5_6-a" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="AUTOSAR-M6_6_1-a" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_2" desc="The goto statement shall jump to a label declared later in the same function body" id="AUTOSAR-M6_6_2-a" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_3" desc="The continue statement shall only be used within a well formed for loop" id="AUTOSAR-M6_6_3-a" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-a" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-b" origId="MISRA2004-16_7" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-M7_1_2-c" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="AUTOSAR-M7_3_1" desc="The global namespace shall only contain main() and namespace declarations" id="AUTOSAR-M7_3_1-a" origId="CODSTA-CPP-36" sev="2" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_2" desc="The identifier main shall not be used for a function other than the global function main" id="AUTOSAR-M7_3_2-a" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_3" desc="There shall be no unnamed namespaces in header files" id="AUTOSAR-M7_3_3-a" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_4" desc="using-directives shall not be used" id="AUTOSAR-M7_3_4-a" origId="CODSTA-CPP-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_6" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="AUTOSAR-M7_3_6-a" origId="CODSTA-CPP-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_1" desc="All usage of assembler shall be documented" id="AUTOSAR-M7_4_1-a" origId="COMMENT-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_2" desc="Assembler instructions shall only be introduced using the asm declaration" id="AUTOSAR-M7_4_2-a" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_3" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="AUTOSAR-M7_4_3-a" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-M7_5_1-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-M7_5_2-a" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-M8_0_1" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-M8_0_1-a" origId="FORMAT-33" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_3_1" desc="Do not redefine an inherited virtual function with a different default parameter value" id="AUTOSAR-M8_3_1-a" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_2" desc="The identifiers used in the declaration and definition of a function shall be identical" id="AUTOSAR-M8_4_2-a" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_4" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="AUTOSAR-M8_4_4-a" origId="MISRA2004-16_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="AUTOSAR-M8_5_2-a" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="Arrays shall not be partially initialized" id="AUTOSAR-M8_5_2-b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="AUTOSAR-M8_5_2-c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_1" desc="Const member functions shall not return non-const pointers or references to class-data" id="AUTOSAR-M9_3_1-a" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_3" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="AUTOSAR-M9_3_3-a" origId="CODSTA-CPP-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_6_4" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="AUTOSAR-M9_6_4-a" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to library functions" id="BD-API-BADPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to ctype.h library functions" id="BD-API-CTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not check for a non-negative value after passing as a non-negative argument" id="BD-API-REVNEGPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="BD-API-STRSIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Validate values passed to library functions" id="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not access iterator out of range" id="BD-CO-ITOUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="BD-CO-STRMOD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not pass empty container iterators to std algorithms as destinations" id="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not compare iterators from different containers" id="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not modify container while iterating over it" id="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Always close transactions" id="BD-MISC-TRANS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Prevent calling unsafe functions (custom rule)" id="BD-MISC-DC" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify string literals" id="BD-PB-MODSTR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overwriting method parameters" id="BD-PB-POVR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not point to a wrapped object that has been freed" id="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid incorrect shift operations" id="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use the correct byte ordering when transferring data between systems" id="BD-PB-BYTEORD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Consistently check the returned value of non-void functions" id="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always check the returned value of non-void function" id="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not check for null after dereferencing" id="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify the alignment of objects by calling realloc()" id="BD-PB-DNMPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly use errno value" id="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define exit handlers" id="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Reset strings on fgets() or fgetws() failure" id="BD-PB-FGETS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Only use values for fsetpos() that are returned from fgetpos()" id="BD-PB-FSETPOS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid infinite recursion" id="BD-PB-INFREC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="BD-PB-INVENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="BD-PB-INVRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid calls to memory-setting functions that can be optimized out by the compiler" id="BD-PB-MEMOPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define new handlers" id="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid throwing exceptions from functions that are declared not to throw" id="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="BD-PB-NORETDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Never return from functions that should not return" id="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays and pointers out of bounds" id="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="An object shall not be assigned or copied to an overlapping object" id="BD-PB-OVERLAP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not treat arrays polymorphically" id="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not compare two unrelated pointers" id="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subtract two pointers that do not address elements of the same array" id="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define signal handlers" id="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not return from a computational exception signal handler" id="BD-PB-SIGRETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subsequently use the argument to std::forward" id="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on the value of a moved-from object" id="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid switch with unreachable branches" id="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define terminate handlers" id="BD-PB-TERMHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define unexpected handlers" id="BD-PB-UNEXPHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under construction" id="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under destruction" id="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the size of the variable length array is in valid range" id="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The same file shall not be opened for read and write access at the same time on different streams" id="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid writing to a stream which has been opened as read only" id="BD-PB-WRROS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid integer overflows" id="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure strings are zero terminated" id="BD-PB-NZTS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the output buffer is large enough when using path manipulation functions" id="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="BD-PB" desc="A parameter shall be passed by reference if it can't be NULL" id="BD-PB-REFPARAM" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always throw the created std::exception object" id="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use macros for variable arguments correctly" id="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unused values" id="BD-PB-VOVR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unreachable methods" id="BD-PB-UCMETH" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Guarantee that container indices are within the valid range" id="BD-PB-VALRANGE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use recursion" id="BD-PB-RECFUN" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure deallocation functions guarantee resource freeing" id="BD-RES-BADFREEF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Allocate sufficient memory to hold an object of a given type" id="BD-RES-INSUFMEM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Avoid cyclic shared_ptr references" id="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not create variables on the stack above the defined limits" id="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid tainted data in array indexes" id="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Prevent buffer overflows from tainted data" id="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against integer overflow/underflow from tainted data" id="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer read overflow from tainted data" id="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer write overflow from tainted data" id="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against command injection" id="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid printing tainted data on the output console" id="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against environment injection" id="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against file name injection" id="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Exclude unsanitized user input from format strings" id="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used in the controlling expression of a loop" id="BD-SECURITY-TDLOOP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against SQL injection" id="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing unvalidated binary data to log methods" id="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Properly seed pseudorandom number generators" id="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Sensitive data should be cleared before being deallocated" id="BD-SECURITY-SENSFREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing sensitive data to functions that write to log files" id="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="BD-SECURITY-TDALLOC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use global variable with different locks set" id="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="BD-TRS-ARG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Make const member functions thread-safe" id="BD-TRS-CMF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="6;" authUrg="0;" cat="BD-TRS" desc="Variable should be used in context of single critical section" id="BD-TRS-DIFCS" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while accessing files" id="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not join or detach a thread that was previously joined or detached" id="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Use locks to prevent race conditions when modifying bit fields" id="BD-TRS-BITLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not destroy another thread's mutex" id="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not release a lock that has not been acquired" id="BD-TRS-REVLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="2;" authUrg="2;" cat="CDD" desc="Avoid function duplication" id="CDD-DUPM" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="6;" authUrg="6;" cat="CDD" desc="Avoid code duplication" id="CDD-DUPC" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid duplication of #include directives" id="CDD-DUPI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="1;" authUrg="1;" cat="CDD" desc="Avoid string literal duplication" id="CDD-DUPS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CERT_C-API00" desc="The validity of parameters must be checked inside each function" id="CERT_C-API00-a" origId="CODSTA-86" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid overflow when writing to a buffer" id="CERT_C-API01-a" origId="BD-PB-OVERFWR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API01-b" origId="SECURITY-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API02-a" origId="SECURITY-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-API02-b" origId="SECURITY-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR01" desc="Do not call 'sizeof' on a pointer type" id="CERT_C-ARR01-a" origId="PB-32" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR02" desc="Explicitly specify array bounds in array declarations with initializers" id="CERT_C-ARR02-a" origId="CODSTA-200" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR30" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR30-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR32" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-ARR32-a" origId="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_C-ARR36-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not compare two unrelated pointers" id="CERT_C-ARR36-b" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR37" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="CERT_C-ARR37-a" origId="PB-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when reading from a buffer" id="CERT_C-ARR38-a" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when writing to a buffer" id="CERT_C-ARR38-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid buffer overflow due to defining incorrect format limits" id="CERT_C-ARR38-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-ARR38-d" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR39-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Pointer arithmetic should not be used" id="CERT_C-ARR39-b" origId="MISRA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Do not add or subtract a scaled integer to a pointer" id="CERT_C-ARR39-c" origId="CODSTA-189" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-CON01" desc="Do not abandon unreleased locks" id="CERT_C-CON01-a" origId="BD-TRS-LOCK" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON02" desc="Do not use the volatile keyword" id="CERT_C-CON02-a" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON05" desc="Do not use blocking functions while holding a lock" id="CERT_C-CON05-a" origId="BD-TRS-TSHL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-CON30" desc="Ensure resources are freed" id="CERT_C-CON30-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not destroy another thread's mutex" id="CERT_C-CON31-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not use resources that have been freed" id="CERT_C-CON31-b" origId="BD-RES-FREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not free resources using invalid pointers" id="CERT_C-CON31-c" origId="BD-RES-INVFREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON32" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-CON32-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON33" desc="Avoid using thread-unsafe functions" id="CERT_C-CON33-a" origId="SECURITY-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON34" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-CON34-a" origId="BD-TRS-ARG" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON35" desc="Do not acquire locks in different order" id="CERT_C-CON35-a" origId="BD-TRS-ORDER" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON36" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_C-CON36-a" origId="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON37" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-CON37-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON38" desc="Use the 'cnd_signal()' function with a unique condition variable" id="CERT_C-CON38-a" origId="SECURITY-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON39" desc="Do not join or detach a thread that was previously joined or detached" id="CERT_C-CON39-a" origId="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON40" desc="Do not refer to an atomic variable twice in an expression" id="CERT_C-CON40-a" origId="CODSTA-195" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON41" desc="Wrap functions that can fail spuriously in a loop" id="CERT_C-CON41-a" origId="CODSTA-194" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON43" desc="Do not use global variable with different locks set" id="CERT_C-CON43-a" origId="BD-TRS-MLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-DCL00" desc="Declare parameters or local variable as const whenever possible" id="CERT_C-DCL00-a" origId="CODSTA-CPP-53" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="CERT_C-DCL01-a" origId="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="CERT_C-DCL01-b" origId="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL02" desc="Use visually distinct identifiers" id="CERT_C-DCL02-a" origId="NAMING-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CERT_C-DCL04" desc="Each variable should be declared in a separate declaration statement" id="CERT_C-DCL04-a" origId="FORMAT-33" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL05" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL05-a" origId="MISRA2004-16_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL06" desc="Use meaningful symbolic constants to represent literal values" id="CERT_C-DCL06-a" origId="CODSTA-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL10" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL10-a" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-a" origId="PB-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-b" origId="PB-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-c" origId="PB-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-d" origId="PB-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-e" origId="PB-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL11-f" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL12" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CERT_C-DCL12-a" origId="CODSTA-115" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CERT_C-DCL13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL13-a" origId="MISRA2004-16_7" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="CERT_C-DCL15" desc="Objects or functions with external linkage shall be declared in a header file" id="CERT_C-DCL15-a" origId="MISRA-023" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL16" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="CERT_C-DCL16-a" origId="PORT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal and hexadecimal escape sequences shall be terminated" id="CERT_C-DCL18-a" origId="CODSTA-117" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal constants (other than zero) shall not be used" id="CERT_C-DCL18-b" origId="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL19" desc="Declare variables as locally as possible" id="CERT_C-DCL19-a" origId="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL20" desc="The number of arguments passed to a function shall match the number of parameters" id="CERT_C-DCL20-a" origId="MISRA2004-16_6" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-DCL22" desc="Avoid unused values" id="CERT_C-DCL22-a" origId="BD-PB-VOVR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_C-DCL30-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_C-DCL30-b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL31" desc="All functions shall be declared before use" id="CERT_C-DCL31-a" origId="MISRA-020" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL36" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="CERT_C-DCL36-a" origId="MISRA-024" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_C-DCL37-a" origId="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL38" desc="The final member of a structure should not be an array of size '0' or '1'" id="CERT_C-DCL38-a" origId="CODSTA-192" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL39" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_C-DCL39-a" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="All declarations of an object or function shall have compatible types" id="CERT_C-DCL40-a" origId="GLOBAL-COMPATDECLS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="If objects or functions are declared more than once their types shall be compatible" id="CERT_C-DCL40-b" origId="MISRA2004-8_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL41" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="CERT_C-DCL41-a" origId="MISRA2004-15_0_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-ENV01-a" origId="SECURITY-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-ENV01-b" origId="SECURITY-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid overflow when writing to a buffer" id="CERT_C-ENV01-c" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV02" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-ENV02-a" origId="SECURITY-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV30" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CERT_C-ENV30-a" origId="CODSTA-185_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV31" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="CERT_C-ENV31-a" origId="BD-PB-INVENV" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV32" desc="Properly define exit handlers" id="CERT_C-ENV32-a" origId="BD-PB-EXITHAN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV33" desc="Do not call the 'system()' function from the 'stdlib.h' or 'cstdlib' library with an argument other than '0' (null pointer)" id="CERT_C-ENV33-a" origId="SECURITY-48" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV34" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="CERT_C-ENV34-a" origId="BD-PB-INVRET" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR01" desc="The error indicator 'errno' shall not be used" id="CERT_C-ERR01-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR02" desc="The Standard Library input/output functions shall not be used" id="CERT_C-ERR02-a" origId="CODSTA-110" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-a" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-c" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-a" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-c" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR06" desc="Do not use assertions" id="CERT_C-ERR06-a" origId="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR07" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-ERR07-a" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR07" desc="The Standard Library input/output functions shall not be used" id="CERT_C-ERR07-b" origId="CODSTA-110" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Properly use errno value" id="CERT_C-ERR30-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Provide error handling for file opening errors right next to the call to fopen" id="CERT_C-ERR30-b" origId="MRM-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR32" desc="Properly use errno value" id="CERT_C-ERR32-a" origId="BD-PB-ERRNO" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-ERR33-a" origId="CODSTA-122_a" sev="1" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-ERR33-b" origId="CODSTA-122_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-ERR33" desc="Avoid null pointer dereferencing" id="CERT_C-ERR33-c" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR33" desc="Always check the returned value of non-void function" id="CERT_C-ERR33-d" origId="BD-PB-CHECKRETGEN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR34" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-ERR34-a" origId="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP00" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CERT_C-EXP00-a" origId="CODSTA-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP02" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="CERT_C-EXP02-a" origId="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP05" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP05-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Pointer arithmetic should not be used" id="CERT_C-EXP08-a" origId="MISRA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Avoid accessing arrays out of bounds" id="CERT_C-EXP08-b" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP10-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP10-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP10-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP10-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-a" origId="CODSTA-122_a" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-b" origId="CODSTA-122_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP14" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-EXP14-a" origId="MISRA-043_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP15" desc="Suspicious use of semicolon" id="CERT_C-EXP15-a" origId="CODSTA-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP16" desc="Function address should not be compared to zero" id="CERT_C-EXP16-a" origId="PB-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP19" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="CERT_C-EXP19-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP20" desc="Avoid comparing values with TRUE macro/enum constant using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CERT_C-EXP20-a" origId="CODSTA-60" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP30-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP30-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP30-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP30-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP32" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP32-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP33" desc="Avoid use before initialization" id="CERT_C-EXP33-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-EXP34" desc="Avoid null pointer dereferencing" id="CERT_C-EXP34-a" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP35" desc="Do not modify objects with temporary lifetime" id="CERT_C-EXP35-a" origId="CODSTA-196" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP36" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP36-a" origId="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CERT_C-EXP37-a" origId="CODSTA-124_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CERT_C-EXP37-b" origId="SECURITY-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Functions shall always have visible prototype at the function call" id="CERT_C-EXP37-d" origId="MISRA-071_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-EXP39" desc="There shall be no implicit conversions from integral to floating type" id="CERT_C-EXP39-a" origId="MISRA2004-10_1_b" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP39-b" origId="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid accessing arrays and pointers out of bounds" id="CERT_C-EXP39-c" origId="BD-PB-OVERFARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="CERT_C-EXP39-d" origId="BD-SECURITY-OVERFFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer read overflow from tainted data" id="CERT_C-EXP39-e" origId="BD-SECURITY-OVERFRD" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer write overflow from tainted data" id="CERT_C-EXP39-f" origId="BD-SECURITY-OVERFWR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP40" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP40-a" origId="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP42" desc="Don't memcpy or memcmp non-PODs" id="CERT_C-EXP42-a" origId="MRM-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP43" desc="The restrict type qualifier shall not be used" id="CERT_C-EXP43-a" origId="CODSTA-121" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_C-EXP44-a" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_C-EXP44-b" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in conditions without brackets" id="CERT_C-EXP45-b" origId="PB-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="CERT_C-EXP45-d" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP46" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="CERT_C-EXP46-b" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP47" desc="Do not call va_arg with an argument of the incorrect type" id="CERT_C-EXP47-a" origId="PB-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Don't use chmod(), chown(), chgrp()" id="CERT_C-FIO01-a" origId="SECURITY-27" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO01-b" origId="SECURITY-19" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO21" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO21-a" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO22" desc="Ensure resources are freed" id="CERT_C-FIO22-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO24" desc="Avoid race conditions while accessing files" id="CERT_C-FIO24-a" origId="BD-TRS-FRC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="CERT_C-FIO30-a" origId="SECURITY-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="CERT_C-FIO30-b" origId="SECURITY-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Never use unfiltered data from an untrusted user as the format parameter" id="CERT_C-FIO30-c" origId="SECURITY-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO32" desc="Protect against file name injection" id="CERT_C-FIO32-a" origId="BD-SECURITY-TDFNAMES" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO34" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="CERT_C-FIO34-a" origId="BD-PB-EOFCOMP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO37" desc="Avoid accessing arrays out of bounds" id="CERT_C-FIO37-a" origId="BD-PB-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO38" desc="A pointer to a FILE object shall not be dereferenced" id="CERT_C-FIO38-a" origId="CODSTA-166_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO39" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_C-FIO39-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO40" desc="Reset strings on fgets() or fgetws() failure" id="CERT_C-FIO40-a" origId="BD-PB-FGETS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-FIO41-a" origId="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-FIO41-b" origId="MISRA2004-12_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-FIO41-c" origId="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-FIO41-d" origId="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CERT_C-FIO41-e" origId="CODSTA-123" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO42" desc="Ensure resources are freed" id="CERT_C-FIO42-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO44" desc="Only use values for fsetpos() that are returned from fgetpos()" id="CERT_C-FIO44-a" origId="BD-PB-FSETPOS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO45" desc="Avoid race conditions while accessing files" id="CERT_C-FIO45-a" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO46" desc="Do not use resources that have been freed" id="CERT_C-FIO46-a" origId="BD-RES-FREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-a" origId="PB-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-b" origId="PB-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-c" origId="PB-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-d" origId="PB-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-e" origId="PB-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-FIO47-f" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP00" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP00-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP02" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP02-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid division by zero" id="CERT_C-FLP03-a" origId="BD-PB-ZERO" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP03-b" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from narrower to wider floating type" id="CERT_C-FLP03-c" origId="MISRA2004-10_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP03-d" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-a" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-b" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP30" desc="Do not use floating point variables as loop counters" id="CERT_C-FLP30-a" origId="MISRA-065" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP32" desc="Validate values passed to library functions" id="CERT_C-FLP32-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP34-a" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP34-b" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-a" origId="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-b" origId="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP37" desc="Do not use object representations to compare floating-point values" id="CERT_C-FLP37-c" origId="CODSTA-190" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CERT_C-INT02-a" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-INT02-b" origId="MISRA-043_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Protect against integer overflow/underflow from tainted data" id="CERT_C-INT04-a" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer read overflow from tainted data" id="CERT_C-INT04-b" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer write overflow from tainted data" id="CERT_C-INT04-c" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-INT05" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-INT05-a" origId="SECURITY-13" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-INT07-a" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="CERT_C-INT07-b" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT08" desc="Avoid integer overflows" id="CERT_C-INT08-a" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT09" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="CERT_C-INT09-a" origId="MISRA2004-9_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT10" desc="Avoid accessing arrays out of bounds" id="CERT_C-INT10-a" origId="BD-PB-ARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT12" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="CERT_C-INT12-a" origId="MISRA2004-6_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT13" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CERT_C-INT13-a" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT15" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="CERT_C-INT15-a" origId="PB-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT16" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CERT_C-INT16-a" origId="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CERT_C-INT18-a" origId="PB-65" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CERT_C-INT18-b" origId="PB-65_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CERT_C-INT18-c" origId="MISRA-048_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Avoid integer overflows" id="CERT_C-INT30-a" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT30-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT30-c" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CERT_C-INT31-a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CERT_C-INT31-d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CERT_C-INT31-e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CERT_C-INT31-f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CERT_C-INT31-g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CERT_C-INT31-h" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CERT_C-INT31-i" origId="CODSTA-163_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CERT_C-INT31-j" origId="CODSTA-164_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CERT_C-INT31-k" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CERT_C-INT31-l" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CERT_C-INT31-m" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CERT_C-INT31-n" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Avoid integer overflows" id="CERT_C-INT31-o" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Avoid integer overflows" id="CERT_C-INT32-a" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT32-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT32-c" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT33" desc="Avoid division by zero" id="CERT_C-INT33-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT34" desc="Avoid incorrect shift operations" id="CERT_C-INT34-a" origId="BD-PB-BADSHIFT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT35" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="CERT_C-INT35-a" origId="SECURITY-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT36" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CERT_C-INT36-b" origId="CODSTA-127_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-a" origId="MRM-18" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-b" origId="MRM-19" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-c" origId="MRM-20" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not use resources that have been freed" id="CERT_C-MEM00-d" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Ensure resources are freed" id="CERT_C-MEM00-e" origId="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Do not use resources that have been freed" id="CERT_C-MEM01-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to an expression that points to deallocated memory" id="CERT_C-MEM01-b" origId="MRM-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to global or member variable that points to deallocated memory" id="CERT_C-MEM01-c" origId="MRM-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="CERT_C-MEM01-d" origId="MRM-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="Assignment operator should have operands of compatible types" id="CERT_C-MEM02-a" origId="PB-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="Do not assign function return value to a variable of incompatible type" id="CERT_C-MEM02-b" origId="PB-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM03" desc="Sensitive data should be cleared before being deallocated" id="CERT_C-MEM03-a" origId="BD-SECURITY-SENSFREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM04" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM04-a" origId="MISRA2004-20_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Do not use recursion" id="CERT_C-MEM05-a" origId="BD-PB-RECFUN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-MEM05-b" origId="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM07" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM07-a" origId="MISRA2004-20_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM12" desc="Ensure resources are freed" id="CERT_C-MEM12-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM30" desc="Do not use resources that have been freed" id="CERT_C-MEM30-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM31" desc="Ensure resources are freed" id="CERT_C-MEM31-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Allocate structures containing a flexible array member dynamically" id="CERT_C-MEM33-a" origId="CODSTA-193" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Do not copy instances of structures containing a flexible array member" id="CERT_C-MEM33-b" origId="PB-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM34" desc="Do not free resources using invalid pointers" id="CERT_C-MEM34-a" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM35" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="CERT_C-MEM35-a" origId="MRM-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM36" desc="Do not modify the alignment of objects by calling realloc()" id="CERT_C-MEM36-a" origId="BD-PB-DNMPTR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="CERT_C-MSC01-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="The final clause of a switch statement shall be the default clause" id="CERT_C-MSC01-b" origId="MISRA2004-15_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C-style comment" id="CERT_C-MSC04-a" origId="MISRA2004-2_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence // shall not be used within a C-style comment" id="CERT_C-MSC04-b" origId="COMMENT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C++-style comment" id="CERT_C-MSC04-c" origId="COMMENT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="Line-splicing shall not be used in // comments" id="CERT_C-MSC04-d" origId="COMMENT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC07-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="CERT_C-MSC07-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC07-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC07-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC07-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC07-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC07-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="Avoid switch with unreachable branches" id="CERT_C-MSC07-h" origId="BD-PB-SWITCH" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC09" desc="Only use characters defined in ISO C standard" id="CERT_C-MSC09-a" origId="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC11" desc="Assert liberally to document internal assumptions and invariants" id="CERT_C-MSC11-a" origId="CODSTA-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC12-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="CERT_C-MSC12-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC12-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC12-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC12-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC12-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC12-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="Avoid switch with unreachable branches" id="CERT_C-MSC12-h" origId="BD-PB-SWITCH" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC13" desc="Avoid unnecessary local variables" id="CERT_C-MSC13-a" origId="OPT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC14" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC14-a" origId="PB-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC15" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC15-a" origId="PB-73" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC17" desc="Missing break statement between cases in a switch statement" id="CERT_C-MSC17-a" origId="CODSTA-149" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid accessing arrays out of bounds" id="CERT_C-MSC19-a" origId="BD-PB-ARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid null pointer dereferencing" id="CERT_C-MSC19-b" origId="BD-PB-NP" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC22" desc="The facilities provided by &lt;setjmp.h> should not be used" id="CERT_C-MSC22-a" origId="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-MSC24" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-MSC24-a" origId="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-MSC24-b" origId="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-MSC24-c" origId="SECURITY-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-MSC24-d" origId="SECURITY-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC30" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_C-MSC30-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC32" desc="Properly seed pseudorandom number generators" id="CERT_C-MSC32-d" origId="BD-SECURITY-RAND" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC33" desc="The 'asctime()' and 'asctime_r()' functions should not be used" id="CERT_C-MSC33-a" origId="SECURITY-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC37" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_C-MSC37-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC38" desc="A function-like macro shall not be invoked without all of its arguments" id="CERT_C-MSC38-a" origId="MISRA2004-19_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC39" desc="Use macros for variable arguments correctly" id="CERT_C-MSC39-a" origId="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC40" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CERT_C-MSC40-a" origId="CODSTA-202" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="CERT_C-MSC41" desc="Do not hard code string literals" id="CERT_C-MSC41-a" origId="CODSTA-203" sev="1" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-POS30-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CERT_C-POS30-b" origId="CODSTA-144" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CERT_C-POS30-c" origId="CODSTA-145" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS33" desc="Avoid using the 'vfork()' function" id="CERT_C-POS33-a" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-POS34-a" origId="SECURITY-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="CERT_C-POS34-b" origId="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS35" desc="Avoid race conditions while checking for the existence of a symbolic link" id="CERT_C-POS35-b" origId="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS36" desc="Observe correct revocation order while relinquishing privileges" id="CERT_C-POS36-a" origId="SECURITY-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS37" desc="Ensure that privilege relinquishment is successful" id="CERT_C-POS37-a" origId="SECURITY-45" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS38" desc="Avoid race conditions when using fork and file descriptors" id="CERT_C-POS38-a" origId="BD-TRS-FORKFILE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS39" desc="Use the correct byte ordering when transferring data between systems" id="CERT_C-POS39-a" origId="BD-PB-BYTEORD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS44" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-POS44-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS47" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="CERT_C-POS47-a" origId="SECURITY-43" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not destroy another thread's mutex" id="CERT_C-POS48-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not release a lock that has not been acquired" id="CERT_C-POS48-b" origId="BD-TRS-REVLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS49" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-POS49-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS50" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-POS50-a" origId="BD-TRS-ARG" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS51" desc="Do not acquire locks in different order" id="CERT_C-POS51-a" origId="BD-TRS-ORDER" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS52" desc="Do not use blocking functions while holding a lock" id="CERT_C-POS52-a" origId="BD-TRS-TSHL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-POS53" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="CERT_C-POS53-a" origId="GLOBAL-CONDMUTEXVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-POS54-a" origId="CODSTA-122_a" sev="1" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-POS54-b" origId="CODSTA-122_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-POS54" desc="Avoid null pointer dereferencing" id="CERT_C-POS54-c" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE00" desc="A function should be used in preference to a function-like macro" id="CERT_C-PRE00-a" origId="MISRA2004-19_7" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE01" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="CERT_C-PRE01-a" origId="MISRA2004-19_10" sev="1" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE02" desc="Enclose in parentheses whole definition of a function-like macro" id="CERT_C-PRE02-a" origId="MISRA-096" sev="1" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE06" desc="Use multiple include guards" id="CERT_C-PRE06-a" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE07" desc="Trigraphs shall not be used" id="CERT_C-PRE07-a" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE30" desc="Avoid token concatenation that may produce universal character names" id="CERT_C-PRE30-a" origId="PREPROC-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain assignments, increment, or decrement operators" id="CERT_C-PRE31-b" origId="CODSTA-150" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain function calls nor function-like macro calls" id="CERT_C-PRE31-c" origId="CODSTA-150_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Avoid side effects in arguments to unsafe macros" id="CERT_C-PRE31-d" origId="CODSTA-150_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE32" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="CERT_C-PRE32-a" origId="MISRA2004-19_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG00" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG00-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG01" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG01-a" origId="MISRA2004-20_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG02" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG02-a" origId="MISRA2004-20_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG30" desc="Properly define signal handlers" id="CERT_C-SIG30-a" origId="BD-PB-SIGHAN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG31" desc="Properly define signal handlers" id="CERT_C-SIG31-a" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG34" desc="Properly define signal handlers" id="CERT_C-SIG34-a" origId="BD-PB-SIGHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG35" desc="Do not return from a computational exception signal handler" id="CERT_C-SIG35-a" origId="BD-PB-SIGRETURN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR00" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR00-a" origId="MISRA2004-6_1" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against command injection" id="CERT_C-STR02-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against file name injection" id="CERT_C-STR02-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against SQL injection" id="CERT_C-STR02-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR03" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR03-a" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR04" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR04-a" origId="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR05" desc="A string literal shall not be modified" id="CERT_C-STR05-a" origId="PB-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-STR07" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-STR07-a" origId="SECURITY-13" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR09" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CERT_C-STR09-a" origId="CODSTA-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR10" desc="Narrow and wide string literals shall not be concatenated" id="CERT_C-STR10-a" origId="PB-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR11" desc="Do not specify the bound of a character array initialized with a string literal" id="CERT_C-STR11-a" origId="CODSTA-197" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="A string literal shall not be modified" id="CERT_C-STR30-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="Do not modify string literals" id="CERT_C-STR30-b" origId="BD-PB-MODSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid accessing arrays out of bounds" id="CERT_C-STR31-a" origId="BD-PB-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid overflow when writing to a buffer" id="CERT_C-STR31-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Prevent buffer overflows from tainted data" id="CERT_C-STR31-c" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid buffer write overflow from tainted data" id="CERT_C-STR31-d" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-STR31-e" origId="SECURITY-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR32" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR32-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CERT_C-STR34-b" origId="CODSTA-187_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="An expressions of the 'signed char' type should not be used as an array index" id="CERT_C-STR34-c" origId="CODSTA-187_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CERT_C-STR34-d" origId="CODSTA-187_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR37" desc="Do not pass incorrect values to ctype.h library functions" id="CERT_C-STR37-a" origId="BD-API-CTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR38" desc="Do not confuse narrow and wide character strings and functions" id="CERT_C-STR38-a" origId="CODSTA-188" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-WIN00" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CERT_C-WIN00-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-WIN30" desc="Ensure resources are freed" id="CERT_C-WIN30-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON50" desc="Do not destroy another thread's mutex" id="CERT_CPP-CON50-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON51" desc="Do not call lock() directly on a mutex" id="CERT_CPP-CON51-a" origId="CODSTA-MCPP-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON52" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_CPP-CON52-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON53" desc="Do not acquire locks in different order" id="CERT_CPP-CON53-a" origId="BD-TRS-ORDER" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON54" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_CPP-CON54-a" origId="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON55" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="CERT_CPP-CON55-a" origId="SECURITY-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON56" desc="Avoid double locking" id="CERT_CPP-CON56-a" origId="BD-TRS-DLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR50" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-CTR50-a" origId="BD-PB-VALRANGE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR51" desc="Do not modify container while iterating over it" id="CERT_CPP-CTR51-a" origId="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR52" desc="Do not pass empty container iterators to std algorithms as destinations" id="CERT_CPP-CTR52-a" origId="BD-CO-EMPCON" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not use an iterator range that isn't really a range" id="CERT_CPP-CTR53-a" origId="STL-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR53-b" origId="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR54-a" origId="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare two unrelated pointers" id="CERT_CPP-CTR54-b" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_CPP-CTR54-c" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR55" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="CERT_CPP-CTR55-a" origId="PB-74" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Don't treat arrays polymorphically" id="CERT_CPP-CTR56-a" origId="PB-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="CERT_CPP-CTR56-b" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Do not treat arrays polymorphically" id="CERT_CPP-CTR56-c" origId="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR57" desc="For associative containers never use comparison function returning true for equal values" id="CERT_CPP-CTR57-a" origId="STL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR58" desc="Make predicates const pure functions" id="CERT_CPP-CTR58-a" origId="STL-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL50" desc="Functions shall not be defined with a variable number of arguments" id="CERT_CPP-DCL50-a" origId="MISRA2004-16_1" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_CPP-DCL51-a" origId="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not redefine reserved words" id="CERT_CPP-DCL51-b" origId="MISRA2004-20_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define nor #undef identifier 'defined'" id="CERT_CPP-DCL51-c" origId="MISRA2004-20_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused" id="CERT_CPP-DCL51-d" origId="MISRA2004-20_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="CERT_CPP-DCL51-e" origId="MISRA2004-20_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="CERT_CPP-DCL51-f" origId="MISRA2004-20_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL52" desc="Never qualify a reference type with 'const' or 'volatile'" id="CERT_CPP-DCL52-a" origId="CODSTA-CPP-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Parameter names in function declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-a" origId="FORMAT-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-b" origId="FORMAT-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Avoid function declarations that are syntactically ambiguous" id="CERT_CPP-DCL53-c" origId="PB-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL54" desc="Always provide new and delete together" id="CERT_CPP-DCL54-a" origId="MRM-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL55" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_CPP-DCL55-a" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL56" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="CERT_CPP-DCL56-a" origId="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-DCL57-a" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Always catch exceptions" id="CERT_CPP-DCL57-b" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL58" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CERT_CPP-DCL58-a" origId="CODSTA-CPP-95" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL59" desc="There shall be no unnamed namespaces in header files" id="CERT_CPP-DCL59-a" origId="CODSTA-CPP-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL60" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="CERT_CPP-DCL60-a" origId="GLOBAL-UNIQUETYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="CERT_CPP-ERR50-a" origId="PB-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-ERR50-b" origId="EXCEPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Do not throw from within destructor" id="CERT_CPP-ERR50-c" origId="EXCEPT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR50" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="CERT_CPP-ERR50-d" origId="EXCEPT-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="CERT_CPP-ERR50-e" origId="EXCEPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR50-f" origId="EXCEPT-08" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR50-g" origId="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR50-h" origId="EXCEPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="CERT_CPP-ERR50-i" origId="EXCEPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Always catch exceptions" id="CERT_CPP-ERR50-j" origId="BD-PB-EXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Properly define exit handlers" id="CERT_CPP-ERR50-k" origId="BD-PB-EXITHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-l" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Avoid throwing exceptions from functions that are declared not to throw" id="CERT_CPP-ERR50-m" origId="BD-PB-NOEXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-n" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Always catch exceptions" id="CERT_CPP-ERR51-a" origId="BD-PB-EXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR51-b" origId="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The facilities provided by &lt;setjmp.h> should not be used" id="CERT_CPP-ERR52-a" origId="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="CERT_CPP-ERR52-b" origId="MISRA2004-20_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR53" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="CERT_CPP-ERR53-a" origId="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR54" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="CERT_CPP-ERR54-a" origId="EXCEPT-17" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR55" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR55-a" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Always catch exceptions" id="CERT_CPP-ERR56-a" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Do not leave 'catch' blocks empty" id="CERT_CPP-ERR56-b" origId="EXCEPT-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR57" desc="Ensure resources are freed" id="CERT_CPP-ERR57-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR58" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR58-a" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR59" desc="Do not throw an exception across execution boundaries" id="CERT_CPP-ERR59-a" origId="PORT-30" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="Exception objects must be nothrow copy constructible" id="CERT_CPP-ERR60-a" origId="EXCEPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="CERT_CPP-ERR60-b" origId="EXCEPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="A class type exception shall always be caught by reference" id="CERT_CPP-ERR61-a" origId="EXCEPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="Throw by value, catch by reference" id="CERT_CPP-ERR61-b" origId="EXCEPT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-ERR62" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_CPP-ERR62-a" origId="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_CPP-EXP50-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_CPP-EXP50-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_CPP-EXP50-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_CPP-EXP50-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="CERT_CPP-EXP50-e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function calls" id="CERT_CPP-EXP50-f" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP51" desc="Do not treat arrays polymorphically" id="CERT_CPP-EXP51-a" origId="BD-PB-POLARR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="CERT_CPP-EXP52-a" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_CPP-EXP52-b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_CPP-EXP52-c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CERT_CPP-EXP52-d" origId="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CERT_CPP-EXP52-e" origId="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP53" desc="Avoid use before initialization" id="CERT_CPP-EXP53-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="Do not use resources that have been freed" id="CERT_CPP-EXP54-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_CPP-EXP54-b" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_CPP-EXP54-c" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP55" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_CPP-EXP55-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_CPP-EXP56" desc="Do not call a function with a mismatched language linkage" id="CERT_CPP-EXP56-a" origId="CODSTA-CPP-96" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Do not delete objects with incomplete class at the point of deletion" id="CERT_CPP-EXP57-a" origId="PB-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CERT_CPP-EXP57-b" origId="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP58" desc="Use macros for variable arguments correctly" id="CERT_CPP-EXP58-a" origId="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP59" desc="Use offsetof() on valid types and members" id="CERT_CPP-EXP59-a" origId="CODSTA-CPP-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP60" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="CERT_CPP-EXP60-a" origId="PORT-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never return lambdas that capture local objects by reference" id="CERT_CPP-EXP61-a" origId="CODSTA-MCPP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never capture local objects from an outer lambda by reference" id="CERT_CPP-EXP61-b" origId="CODSTA-MCPP-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CERT_CPP-EXP61-c" origId="CODSTA-MCPP-17_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP62" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CERT_CPP-EXP62-a" origId="CODSTA-CPP-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP63" desc="Do not rely on the value of a moved-from object" id="CERT_CPP-EXP63-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-FIO50" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_CPP-FIO50-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-FIO51" desc="Ensure resources are freed" id="CERT_CPP-FIO51-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-INT50" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="CERT_CPP-INT50-a" origId="PB-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM50" desc="Do not use resources that have been freed" id="CERT_CPP-MEM50-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="CERT_CPP-MEM51-a" origId="MRM-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="CERT_CPP-MEM51-b" origId="MRM-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="CERT_CPP-MEM51-c" origId="MRM-40_d" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Properly deallocate dynamically allocated resources" id="CERT_CPP-MEM51-d" origId="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Check the return value of new" id="CERT_CPP-MEM52-a" origId="MRM-34" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="CERT_CPP-MEM52-b" origId="MRM-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM53" desc="Do not invoke malloc/realloc for objects having constructors" id="CERT_CPP-MEM53-a" origId="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="CERT_CPP-MEM54-a" origId="MRM-55" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="CERT_CPP-MEM54-b" origId="MRM-55_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM55" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="CERT_CPP-MEM55-a" origId="MRM-53" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM56" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="CERT_CPP-MEM56-a" origId="BD-PB-PTRVALUE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM57" desc="Avoid using the default operator 'new' for over-aligned types" id="CERT_CPP-MEM57-a" origId="MRM-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC50" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_CPP-MSC50-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC51" desc="Properly seed pseudorandom number generators" id="CERT_CPP-MSC51-a" origId="BD-SECURITY-RAND" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC52" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_CPP-MSC52-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC53" desc="Never return from functions that should not return" id="CERT_CPP-MSC53-a" origId="BD-PB-NORETURN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC54" desc="Properly define signal handlers" id="CERT_CPP-MSC54-a" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from constructors" id="CERT_CPP-OOP50-a" origId="OOP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from destructors" id="CERT_CPP-OOP50-b" origId="OOP-16_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under construction" id="CERT_CPP-OOP50-c" origId="BD-PB-VCTOR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under destruction" id="CERT_CPP-OOP50-d" origId="BD-PB-VDTOR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP51" desc="Avoid slicing function arguments / return value" id="CERT_CPP-OOP51-a" origId="PB-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP52" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CERT_CPP-OOP52-a" origId="OOP-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP53" desc="List members in an initialization list in the order in which they are declared" id="CERT_CPP-OOP53-a" origId="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP54" desc="Check for assignment to self in operator=" id="CERT_CPP-OOP54-a" origId="OOP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP55" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CERT_CPP-OOP55-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define terminate handlers" id="CERT_CPP-OOP56-a" origId="BD-PB-TERMHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define unexpected handlers" id="CERT_CPP-OOP56-b" origId="BD-PB-UNEXPHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define new handlers" id="CERT_CPP-OOP56-c" origId="BD-PB-NEWHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CERT_CPP-OOP57-a" origId="CODSTA-CPP-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CERT_CPP-OOP57-b" origId="CODSTA-CPP-94" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP58" desc="Copy operations must not mutate the source object" id="CERT_CPP-OOP58-a" origId="CODSTA-CPP-98" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_CPP-STR50-b" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow when writing to a buffer" id="CERT_CPP-STR50-c" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Prevent buffer overflows from tainted data" id="CERT_CPP-STR50-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid buffer write overflow from tainted data" id="CERT_CPP-STR50-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="CERT_CPP-STR50-g" origId="SECURITY-51" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-STR51" desc="Avoid null pointer dereferencing" id="CERT_CPP-STR51-a" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR52" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="CERT_CPP-STR52-a" origId="BD-CO-STRMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR53" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-STR53-a" origId="BD-PB-VALRANGE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variable or parameter names and class member variable or parent class/struct member variable names shall differ by more than a single character" id="CODSTA-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid internal or external name conflict with a C++ reserved word" id="CODSTA-39" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Parameters should not use the same names as member variables" id="CODSTA-45" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use break in for loops" id="CODSTA-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Global functions shall not declare parameters with array type" id="CODSTA-142" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is passed into a function as a parameter" id="CODSTA-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is initialized" id="CODSTA-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="CODSTA-160" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced" id="CODSTA-166_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="CODSTA-166_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="CODSTA-182" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CODSTA-185_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not specify the bound of a character array initialized with a string literal" id="CODSTA-197" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="EOS should be used to terminate a string rather than NULL" id="CODSTA-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CODSTA-202" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="CODSTA-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Array elements shall be accessed by the array operator [ ]" id="CODSTA-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Do not define constants via #define" id="CODSTA-03" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointers to pointers should be avoided whenever possible" id="CODSTA-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using the '?:' operator" id="CODSTA-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has no parameters, use ( ) instead of ( void )" id="CODSTA-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast pointers to functions to pointers to primitive types" id="CODSTA-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="CODSTA-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="CODSTA-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="CODSTA-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A single operation with side-effect shall only be used in the proper context" id="CODSTA-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A call of function with side-effect shall only be used in the proper context" id="CODSTA-103" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="CODSTA-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="CODSTA-107" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The standard header file &lt;tgmath.h> shall not be used" id="CODSTA-108" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="CODSTA-108_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The features provided by &lt;fenv.h> should not be used" id="CODSTA-109" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="The Standard Library input/output functions shall not be used" id="CODSTA-110" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The union keyword should not be used" id="CODSTA-111" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Variable-length array types shall not be used" id="CODSTA-112" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Flexible array members shall not be declared" id="CODSTA-113" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="CODSTA-114" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="CODSTA-116" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Octal and hexadecimal escape sequences shall be terminated" id="CODSTA-117" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A declaration shall be visible when an object or function with external linkage is defined" id="CODSTA-118" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="CODSTA-119" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using shift operations instead of arithmetic operations" id="CODSTA-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline function shall be declared with the static storage class" id="CODSTA-120" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The restrict type qualifier shall not be used" id="CODSTA-121" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_a" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CODSTA-124_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CODSTA-124_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CODSTA-126" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="CODSTA-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CODSTA-130" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="CODSTA" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="CODSTA-131" sev="3" total="19" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C90" id="CODSTA-133_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C99" id="CODSTA-133_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Type casting from any type to or from pointers shall not be used" id="CODSTA-135" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="CODSTA-136_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="CODSTA-136_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function call shall not be the operand of the sizeof operator" id="CODSTA-137" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The result of a built-in assignment operator should not be used" id="CODSTA-138" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="CODSTA-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Never convert consts to non-consts" id="CODSTA-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Initializer lists shall not contain persistent side effects" id="CODSTA-141_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="CODSTA-142_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CODSTA-143" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CODSTA-144" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CODSTA-145" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A value returned from a stdio character-oriented I/O function should not be implicitly converted to a type smaller than 'int'" id="CODSTA-146" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer should not be compared with NULL using relational operators &lt;, >, >=, &lt;=" id="CODSTA-147" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use string literals as operands of equality or relational operators" id="CODSTA-148" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Missing break statement between cases in a switch statement" id="CODSTA-149" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain assignments, increment, or decrement operators" id="CODSTA-150" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid side effects in arguments to unsafe macros" id="CODSTA-150_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="CODSTA-152" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="CODSTA-154" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="CODSTA-155" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CODSTA-156_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CODSTA-156_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CODSTA-157" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall have named parameters" id="CODSTA-158" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall be in prototype form" id="CODSTA-159" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CODSTA-161_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CODSTA-161_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CODSTA-161_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CODSTA-161_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CODSTA-161_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="CODSTA-162" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CODSTA-163_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CODSTA-163_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CODSTA-164_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CODSTA-164_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast from or to essentially Boolean type" id="CODSTA-165_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="CODSTA-167_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="CODSTA-167_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="CODSTA-168" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The first clause of a 'for' loop shall be well-formed" id="CODSTA-169_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second clause of a 'for' loop shall be well-formed" id="CODSTA-169_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The third clause of a 'for' statement shall be well-formed" id="CODSTA-169_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use NULL identifier; use 0 instead" id="CODSTA-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="CODSTA-170_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="CODSTA-170_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="CODSTA-171_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="CODSTA-171_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="CODSTA-172_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="CODSTA-172_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_a_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_a_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_b_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_b_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="External identifiers shall be distinct" id="CODSTA-178" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="CODSTA-179_a_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="CODSTA-179_a_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="CODSTA-179_b_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="CODSTA-179_b_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers that define objects or functions with external linkage shall be unique" id="CODSTA-180" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="CODSTA-183" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="CODSTA-184" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="CODSTA-185_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="CODSTA-186" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CODSTA-187_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expressions of the 'signed char' type should not be used as an array index" id="CODSTA-187_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CODSTA-187_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not confuse narrow and wide character strings and functions" id="CODSTA-188" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not add or subtract a scaled integer to a pointer" id="CODSTA-189" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use the ctype.h facilities for character test" id="CODSTA-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use object representations to compare floating-point values" id="CODSTA-190" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can spuriously wake up in a loop" id="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final member of a structure should not be an array of size '0' or '1'" id="CODSTA-192" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Allocate structures containing a flexible array member dynamically" id="CODSTA-193" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can fail spuriously in a loop" id="CODSTA-194" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not refer to an atomic variable twice in an expression" id="CODSTA-195" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not modify objects with temporary lifetime" id="CODSTA-196" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="CODSTA-198" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to an integer type" id="CODSTA-198_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use assertions" id="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Explicitly specify array bounds in array declarations with initializers" id="CODSTA-200" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not process structured text data natively" id="CODSTA-201" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions declared as 'noreturn' shall have the 'void' return type" id="CODSTA-204" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast an array to the pointer to a structure of a larger size than the size of the array" id="CODSTA-205" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Noreturn' function specifier should not be used" id="CODSTA-206" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdnoreturn.h> header file should not be used" id="CODSTA-207" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdalign.h> header file shall not be used" id="CODSTA-208" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="CODSTA-209" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Thread_local' storage class specifier should not be used" id="CODSTA-210" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="CODSTA-211" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'rsize_t' type should not be used" id="CODSTA-212" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="CODSTA-213" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="CODSTA-214" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="CODSTA-215" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Generic' operator should not be used" id="CODSTA-216" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'errno_t' type should not be used" id="CODSTA-217" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="CODSTA-218" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="CODSTA-219" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" id="CODSTA-220" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not include any type qualifiers in the specification of a function type" id="CODSTA-221" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid implicit integral conversions from a wider to a narrower type" id="CODSTA-222" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="CODSTA" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="CODSTA-223" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The conditional operator should not be used as a sub-expression" id="CODSTA-224" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="All 'if' statements should have an 'else' clause" id="CODSTA-23" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="1;" cat="CODSTA" desc="Avoid magic numbers" id="CODSTA-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Avoid functions that modify global variables" id="CODSTA-27" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use meaningful symbolic constants to represent literal values" id="CODSTA-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid returning handles to function parameters" id="CODSTA-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Avoid explicit type conversions (casts)" id="CODSTA-31" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer" id="CODSTA-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use operator ++ or -- in the conditional expression of if, while, or switch" id="CODSTA-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use a typedef to simplify program syntax when declaring function pointers" id="CODSTA-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Always provide a default branch for switch statements" id="CODSTA-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pass built-in-types by value unless you are modifying them" id="CODSTA-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Prefer const objects or enums to #defines for simple constants" id="CODSTA-37" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use a #define that prevents the compiler from checking types" id="CODSTA-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="'void' should be used when a function is passed or returns no values" id="CODSTA-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All structures should be typedef'd" id="CODSTA-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="CODSTA-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hexadecimal constants will be represented using all uppercase letters" id="CODSTA-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="CODSTA-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="CODSTA-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Every switch statement will have at least two cases and a potential default" id="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment" id="CODSTA-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid comparing values with TRUE macro/enum constant using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CODSTA-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="CODSTA-61" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CODSTA-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="CODSTA-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="CODSTA-65" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="CODSTA-66" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="CODSTA-67" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="CODSTA-68" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CODSTA-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="CODSTA-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="CODSTA-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembler instructions shall only be introduced using the asm declaration" id="CODSTA-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall not have enum type" id="CODSTA-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="CODSTA-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifier main shall not be used for a function other than the global function main" id="CODSTA-76" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The goto statement shall jump to a label declared later in the same function body" id="CODSTA-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="CODSTA-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="CODSTA-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The continue statement shall only be used within a well formed for loop" id="CODSTA-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="CODSTA-81" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid infinite loops" id="CODSTA-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use empty infinite loops" id="CODSTA-82_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA" desc="All loops must have a fixed upper or lower bound" id="CODSTA-83" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid exit points within infinite loops" id="CODSTA-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CODSTA" desc="The validity of parameters must be checked inside each function" id="CODSTA-86" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use no more than one level of dereferencing" id="CODSTA-87" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function pointers are not permitted" id="CODSTA-88" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="The declaration should not contain more than one level of pointer indirection" id="CODSTA-89" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression" id="CODSTA-90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function shall have at most one exit point" id="CODSTA-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library macros and objects shall not be reused" id="CODSTA-92" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="CODSTA-92_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="CODSTA-92_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="30;" authUrg="2;" cat="CODSTA" desc="Do not declare pointer or array type" id="CODSTA-94" sev="3" total="30" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="30;" authUrg="1;" cat="CODSTA" desc="Do not declare pointer type" id="CODSTA-95" sev="3" total="30" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="CODSTA-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CODSTA-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="CODSTA-98" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in comparison operations" id="CODSTA-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="CODSTA-105" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object and an integer type" id="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CODSTA-127_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed from pointer to void into pointer to object" id="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function parameter should not be modified" id="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="CODSTA-134" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use enumerations in boolean condition" id="CODSTA-151" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The cast operation to essentially enumeration type is not allowed" id="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use casts between essentially character types and essentially floating types" id="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused type declarations" id="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused type declarations" id="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused local tag declarations" id="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused tag declarations" id="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused macro definitions" id="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid switch statements with only one case" id="CODSTA-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of semicolon" id="CODSTA-57" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast to void is not allowed" id="CODSTA-58" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hardcoded array declarations and 'malloc' calls should not be used" id="CODSTA-59" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare member variables as bit-fields" id="CODSTA-02" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare local variables with the 'static' keyword" id="CODSTA-04" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assert liberally to document internal assumptions and invariants" id="CODSTA-11" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain function calls nor function-like macro calls" id="CODSTA-150_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Prefer 'while' statements over 'do' statements" id="CODSTA-18" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="CODSTA" desc="Do not hard code string literals" id="CODSTA-203" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="When using enum, the values of each member should be explicitly declared" id="CODSTA-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro FALSE should be defined as 0 (zero)" id="CODSTA-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'FALSE' should be explicitly initialized by 0 value" id="CODSTA-25" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Define fields for union declarations" id="CODSTA-28" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro TRUE should be defined as 1" id="CODSTA-42" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'TRUE' should be explicitly initialized by 1 value" id="CODSTA-43" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="Use positive logic rather than negative logic whenever practical" id="CODSTA-46" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library functions shall not be overridden" id="CODSTA-93" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use user-defined conversion functions" id="CODSTA-CPP-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The first operand of a conditional-operator shall have type bool" id="CODSTA-CPP-65" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Declare at least one constructor to prevent the compiler from doing so" id="CODSTA-CPP-19" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Arrays shall not be used in interfaces" id="CODSTA-CPP-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Private and protected methods shall not declare parameters with array type" id="CODSTA-CPP-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Copy operations must not mutate the source object" id="CODSTA-CPP-98" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="CODSTA-CPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Bitwise operators, comparison operators, logical operators, comma operator should be const" id="CODSTA-CPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid returning handles to class data from member functions" id="CODSTA-CPP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Postfix increment and decrement should be implemented in terms of their prefix counterparts" id="CODSTA-CPP-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="CODSTA-CPP-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using reinterpret_cast" id="CODSTA-CPP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define structs that contain member functions" id="CODSTA-CPP-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CODSTA-CPP-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A relational operator shall return a boolean value" id="CODSTA-CPP-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="CODSTA-CPP-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Output parameters shall not be used" id="CODSTA-CPP-103" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="CODSTA-CPP-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use delegating constructors to reduce code duplication" id="CODSTA-CPP-106" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions" id="CODSTA-CPP-107" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="CODSTA-CPP-107_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer C++-style casts" id="CODSTA-CPP-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as base classes and classes that are used as member variables into separate include files" id="CODSTA-CPP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as function return type into separate include files" id="CODSTA-CPP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as argument types in function prototypes into separate include files" id="CODSTA-CPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put functions that are used in the body of inline member function into separate include file" id="CODSTA-CPP-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When two operators are opposites (such as == and !=), it is appropriate to define both" id="CODSTA-CPP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'struct' keyword to declare a variable in C++" id="CODSTA-CPP-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If you'd like to support mixed-mode operations make operators a non-member functions" id="CODSTA-CPP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator" id="CODSTA-CPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider making virtual functions nonpublic, and public functions nonvirtual" id="CODSTA-CPP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep types and functions in separate namespaces unless they're specifically intended to work together" id="CODSTA-CPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep a type and its nonmember function interface in the same namespace" id="CODSTA-CPP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When binary arithmetic operators are defined  ( + , - , * , / , ^ , % , | , &amp; ), assignment versions should be provided too" id="CODSTA-CPP-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer the canonical forms of arithmetic and assignment operators" id="CODSTA-CPP-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member operators than member ones to support mixed-mode arithmetic" id="CODSTA-CPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="CODSTA-CPP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall not be defined within the template class definition" id="CODSTA-CPP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using static_cast on pointers" id="CODSTA-CPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid dynamic_casts" id="CODSTA-CPP-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="CODSTA-CPP" desc="The global namespace shall only contain main() and namespace declarations" id="CODSTA-CPP-36" sev="3" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define class/struct/union inside function implementation" id="CODSTA-CPP-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Conversion operator, operator->, operator(), operator[] should be const" id="CODSTA-CPP-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Don't write namespace usings in a header file or before an #include" id="CODSTA-CPP-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'enum' keyword to declare a variable in C++" id="CODSTA-CPP-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not declare member variables with the 'mutable' keyword" id="CODSTA-CPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare reference parameters as const references whenever possible" id="CODSTA-CPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have the non-const version call the const version of member function instead of duplicating the const version definition" id="CODSTA-CPP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in class: public before all others" id="CODSTA-CPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in classes: protected before private" id="CODSTA-CPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use static keyword except inside functions and classes" id="CODSTA-CPP-50" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define inline functions in source files" id="CODSTA-CPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider using the natural relationship between the assignment version of an operator and the stand-alone version" id="CODSTA-CPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA-CPP" desc="Declare parameters or local variable as const whenever possible" id="CODSTA-CPP-53" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall be declared const whenever possible" id="CODSTA-CPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="CODSTA-CPP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Namespaces will not be nested more than two levels deep" id="CODSTA-CPP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA-CPP" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="CODSTA-CPP-58" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="The C library shall not be used" id="CODSTA-CPP-59" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="CODSTA-CPP-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="CODSTA-CPP-60_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="NULL shall not be used as an integer value" id="CODSTA-CPP-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-CPP" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="CODSTA-CPP-63" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="CODSTA-CPP-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="CODSTA-CPP-66" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-CPP" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="CODSTA-CPP-67" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The unary &amp; operator shall not be overloaded" id="CODSTA-CPP-68" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="CODSTA-CPP-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="CODSTA-CPP-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="CODSTA-CPP-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="CODSTA-CPP-72" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="CODSTA-CPP-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="There shall be no unnamed namespaces in header files" id="CODSTA-CPP-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives shall not be used" id="CODSTA-CPP-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="CODSTA-CPP-76" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Const member functions shall not return non-const pointers or references to class-data" id="CODSTA-CPP-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="CODSTA-CPP-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="CODSTA-CPP-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading comma operator &quot;,&quot;" id="CODSTA-CPP-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" id="CODSTA-CPP-82" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="CODSTA-CPP-83" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="CODSTA-CPP-84" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="CODSTA-CPP-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="CODSTA-CPP-86" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The name of typedef should not be the same as the name of its basic type" id="CODSTA-CPP-88" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="CODSTA-CPP-90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="CODSTA-CPP-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="CODSTA-CPP-92" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CODSTA-CPP-93" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CODSTA-CPP-94" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CODSTA-CPP-95" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA-CPP" desc="Do not call a function with a mismatched language linkage" id="CODSTA-CPP-96" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Never qualify a reference type with 'const' or 'volatile'" id="CODSTA-CPP-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use offsetof() on valid types and members" id="CODSTA-CPP-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member non-friend functions to member functions" id="CODSTA-CPP-22" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="CODSTA-CPP-81" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not assign enumerations to bool" id="CODSTA-CPP-89" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer iostream.h to stdio.h" id="CODSTA-CPP-01" sev="5" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA-CPP" desc="Encapsulate global variables and constants, enumerated types, and typedefs in a class" id="CODSTA-CPP-18" sev="5" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Assignment operator must return const reference" id="CODSTA-CPP-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA-CPP" desc="Whenever a global function  is  referenced, use the :: operator" id="CODSTA-CPP-23" sev="5" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the keyword 'explicit' for a constructor" id="CODSTA-CPP-31" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Limiting the number of objects of a class" id="CODSTA-CPP-40" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names in variable declarations" id="CODSTA-MCPP-08_a" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="2;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names for function return types" id="CODSTA-MCPP-08_b" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="CODSTA-MCPP-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-conversion cast operators should be made explicit" id="CODSTA-MCPP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer alias declarations to typedefs" id="CODSTA-MCPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer Scoped Enums to Unscoped Enums" id="CODSTA-MCPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Each overriding virtual function shall be declared with the override or final specifier" id="CODSTA-MCPP-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class" id="CODSTA-MCPP-06_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class" id="CODSTA-MCPP-06_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="CODSTA-MCPP-07_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare functions 'noexcept' if they will not emit exceptions" id="CODSTA-MCPP-09" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer const iterators to iterators" id="CODSTA-MCPP-10_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use cbegin(), crbegin, cend(), crend() functions" id="CODSTA-MCPP-10_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="CODSTA-MCPP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'std::forward' function shall be used to forward universal references" id="CODSTA-MCPP-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid Overloading on Forwarding References" id="CODSTA-MCPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid default capture modes" id="CODSTA-MCPP-15_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use the 'this' pointer explicitly in lambdas with a default by-reference capture" id="CODSTA-MCPP-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'std::make_shared' to the direct use of new" id="CODSTA-MCPP-16_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="CODSTA-MCPP-16_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="CODSTA-MCPP-16_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never return lambdas that capture local objects by reference" id="CODSTA-MCPP-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never capture local objects from an outer lambda by reference" id="CODSTA-MCPP-17_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CODSTA-MCPP-17_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary default capture modes in lambda expressions" id="CODSTA-MCPP-18_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary lambda captures" id="CODSTA-MCPP-18_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare assignment operators with the ref-qualifier &amp;" id="CODSTA-MCPP-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use explicit ref-qualifiers on auto declarations in range-based 'for' loops" id="CODSTA-MCPP-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-MCPP" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="CODSTA-MCPP-23" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Only one of virtual, override or final should be specified in a member function declaration" id="CODSTA-MCPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Digit sequences separators ' shall only be used consistently" id="CODSTA-MCPP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="CODSTA-MCPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A lambda shall not be an operand to typeid" id="CODSTA-MCPP-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use smart pointers when passing a pointer to an object in a thread" id="CODSTA-MCPP-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="CODSTA-MCPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Define both sized and unsized versions of operator delete" id="CODSTA-MCPP-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-MCPP" desc="Static and thread-local objects shall be constant-initialized" id="CODSTA-MCPP-32" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User defined literals operators shall only perform conversion of passed parameters" id="CODSTA-MCPP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="CODSTA-MCPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="CODSTA-MCPP-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="CODSTA-MCPP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="CODSTA-MCPP-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="3;" cat="CODSTA-MCPP" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="CODSTA-MCPP-38" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="CODSTA-MCPP-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not overuse 'auto' specifier" id="CODSTA-MCPP-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'random_shuffle' identifier should not be used" id="CODSTA-MCPP-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="CODSTA-MCPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'set_unexpected' identifier should not be used" id="CODSTA-MCPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Lambda expressions should not be defined inside another lambda expression" id="CODSTA-MCPP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="CODSTA-MCPP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Include a parameter list in every lambda expression" id="CODSTA-MCPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid overloading constructors with std::initializer_list" id="CODSTA-MCPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Multiple output values from a function should be returned as a struct or tuple" id="CODSTA-MCPP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="CODSTA-MCPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="CODSTA-MCPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use const container calls when the result is immediately converted to a const iterator" id="CODSTA-MCPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not introduce virtual functions in a final class" id="CODSTA-MCPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use std::move on objects declared with the const or const &amp; type" id="CODSTA-MCPP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not create an rvalue reference of std::array" id="CODSTA-MCPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="CODSTA-MCPP-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="CODSTA-MCPP-04" sev="4" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare const variables whenever possible" id="CODSTA-MCPP-11_a_cpp11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare functions whenever possible" id="CODSTA-MCPP-11_b_cpp11" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointer members over raw pointer members" id="CODSTA-MCPP-16_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw pointers for arrays or STL containers" id="CODSTA-MCPP-16_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw local pointers" id="CODSTA-MCPP-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not call lock() directly on a mutex" id="CODSTA-MCPP-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Line-splicing shall not be used in // comments" id="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Prefer C++ style comment" id="COMMENT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="COMMENT" desc="Provide copyright information" id="COMMENT-02" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="COMMENT" desc="Every source file will be documented with an introductory comment that provides information on the file" id="COMMENT-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="2;" cat="COMMENT" desc="Document functions in comments that precede function definitions" id="COMMENT-04" sev="3" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Document functions in comments that precede function declarations" id="COMMENT-04_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="COMMENT" desc="Each variable declaration should be commented" id="COMMENT-05" sev="3" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each typedef should be commented" id="COMMENT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each enumeration value should be commented" id="COMMENT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each structure member variable should be commented" id="COMMENT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="All usage of assembler shall be documented" id="COMMENT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="COMMENT" desc="Use of floating-point arithmetic shall be documented" id="COMMENT-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence // shall not be used within a C-style comment" id="COMMENT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence /* shall not be used within a C++-style comment" id="COMMENT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="0;" cat="COMMENT" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="COMMENT-14" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="COMMENT" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="COMMENT-14_b" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-119-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when reading from a buffer" id="CWE-119-d" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when writing to a buffer" id="CWE-119-e" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid tainted data in array indexes" id="CWE-119-f" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Prevent buffer overflows from tainted data" id="CWE-119-g" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer read overflow from tainted data" id="CWE-119-h" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer write overflow from tainted data" id="CWE-119-i" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays out of bounds" id="CWE-119-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-119-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-119" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CWE-119-j" origId="CODSTA-143" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-119-k" origId="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid overflow when reading from a buffer" id="CWE-125-c" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid buffer read overflow from tainted data" id="CWE-125-d" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays out of bounds" id="CWE-125-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-125-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid integer overflows" id="CWE-190-a" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CWE-190-b" origId="MISRA-048_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CWE-190-c" origId="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CWE-190-d" origId="PB-65_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CWE-190-e" origId="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CWE-190-f" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CWE-190-g" origId="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid tainted data in array indexes" id="CWE-20-a" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against integer overflow/underflow from tainted data" id="CWE-20-b" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against command injection" id="CWE-20-d" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid printing tainted data on the output console" id="CWE-20-e" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against environment injection" id="CWE-20-f" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Exclude unsanitized user input from format strings" id="CWE-20-g" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against SQL injection" id="CWE-20-h" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against file name injection" id="CWE-20-i" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid passing unvalidated binary data to log methods" id="CWE-20-c" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CWE-20" desc="Untrusted data is used as a loop boundary" id="CWE-20-j" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-200" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="CWE-200-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-22" desc="Protect against file name injection" id="CWE-22-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Observe correct revocation order while relinquishing privileges" id="CWE-269-a" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Ensure that privilege relinquishment is successful" id="CWE-269-b" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-287" desc="Do not use weak encryption functions" id="CWE-287-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-326" desc="Do not use weak encryption functions" id="CWE-326-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions when using fork and file descriptors" id="CWE-362-d" origId="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Do not use global variable with different locks set" id="CWE-362-e" origId="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-362" desc="Usage of functions prone to race is not allowed" id="CWE-362-a" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions while accessing files" id="CWE-362-b" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Use locks to prevent race conditions when modifying bit fields" id="CWE-362-c" origId="BD-TRS-BITLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-400" desc="Do not create variables on the stack above the defined limits" id="CWE-400-a" origId="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-415" desc="Do not use resources that have been freed" id="CWE-415-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not use resources that have been freed" id="CWE-416-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not point to a wrapped object that has been freed" id="CWE-416-b" origId="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-416" desc="Freed memory shouldn't be accessed under any circumstances" id="CWE-416-c" origId="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-426" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CWE-426-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-476" desc="Avoid null pointer dereferencing" id="CWE-476-a" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-476" desc="Do not check for null after dereferencing" id="CWE-476-b" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-532" desc="Avoid passing sensitive data to functions that write to log files" id="CWE-532-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-611" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="CWE-611-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-617" desc="Do not use assertions" id="CWE-617-a" origId="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CWE-704-a" origId="CODSTA-124_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CWE-704-b" origId="CODSTA-124_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CWE-704-c" origId="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CWE-704-d" origId="CODSTA-126" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CWE-704-g" origId="CODSTA-129_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CWE-704-h" origId="CODSTA-129_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CWE-704-i" origId="CODSTA-130" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CWE-704-j" origId="MISRA-043" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CWE-704-k" origId="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CWE-704-l" origId="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CWE-704-e" origId="CODSTA-127_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed from pointer to void into pointer to object" id="CWE-704-f" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CWE-732-b" origId="SECURITY-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Call 'umask' before calling 'mkstemp'" id="CWE-732-a" origId="SECURITY-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-770" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="CWE-770-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-772" desc="Ensure resources are freed" id="CWE-772-a" origId="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-772" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CWE-772-b" origId="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-78" desc="Protect against command injection" id="CWE-78-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-787-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid overflow when writing to a buffer" id="CWE-787-d" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Prevent buffer overflows from tainted data" id="CWE-787-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer write overflow from tainted data" id="CWE-787-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays out of bounds" id="CWE-787-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-787-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-787-g" origId="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="CWE-798" desc="Do not hard code string literals" id="CWE-798-a" origId="CODSTA-203" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-835" desc="Avoid infinite loops" id="CWE-835-a" origId="CODSTA-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-863" desc="Do not use 'cuserid' function" id="CWE-863-a" origId="SECURITY-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-89" desc="Protect against SQL injection" id="CWE-89-a" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="EXCEPT-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="EXCEPT-11" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All exceptions should be rethrown or logged with standard logger" id="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="EXCEPT" desc="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" id="EXCEPT-05" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="EXCEPT-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="EXCEPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="Exceptions shall be raised only after start-up and before termination of the program" id="EXCEPT-08" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="An exception object should not have pointer type" id="EXCEPT-09" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="EXCEPT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="NULL shall not be thrown explicitly" id="EXCEPT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="EXCEPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="A class type exception shall always be caught by reference" id="EXCEPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="EXCEPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Exception objects must be nothrow copy constructible" id="EXCEPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="EXCEPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="EXCEPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="EXCEPT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not use throw exception specifications" id="EXCEPT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="EXCEPT-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not leave 'catch' blocks empty" id="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Avoid using catch-all exception handlers" id="EXCEPT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Place an opening brace '{' on its own line" id="FORMAT-02" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Place a closing brace '}' on its own line" id="FORMAT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="Physical lines should be less than eighty characters" id="FORMAT-04" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The length of a macro should not exceed 10 lines" id="FORMAT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Only one statement shall be allowed per line" id="FORMAT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding assignment operators" id="FORMAT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following assignment operators" id="FORMAT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding bitwise operators" id="FORMAT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following bitwise operators" id="FORMAT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following bitwise operator '&amp;'" id="FORMAT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" id="FORMAT-12" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements" id="FORMAT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding ternary conditional operator" id="FORMAT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following ternary conditional operator" id="FORMAT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following relational and equality operators" id="FORMAT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space following '.' or '->' operator" id="FORMAT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space preceding '.' or '->' operator" id="FORMAT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all commas" id="FORMAT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all semicolons" id="FORMAT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;!&quot; or &quot;~&quot; and its operand" id="FORMAT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a increment/decrement operator (++/--) and its operand" id="FORMAT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" id="FORMAT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator" id="FORMAT-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="FORMAT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="FORMAT" desc="Parenthesis shall be used with the &quot;return&quot; statement" id="FORMAT-25_b" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following logical operators" id="FORMAT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Line should be indented by a multiple of four spaces" id="FORMAT-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="FORMAT" desc="In a function definition, the return type of the function should be written on a separate line directly above the function name" id="FORMAT-28" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="FORMAT" desc="Multiple variable declarations shall not be allowed on the same line" id="FORMAT-29" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Place left parenthesis directly after function name" id="FORMAT-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Separate logical tests in conditional expressions" id="FORMAT-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="FORMAT" desc="Each variable should be declared in a separate declaration statement" id="FORMAT-33" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Braces &quot;{}&quot; which enclose a block should be placed in the same column" id="FORMAT-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name" id="FORMAT-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sibling statement lines should be indented to the same level" id="FORMAT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="First line in control statement body should be indented more than control statement keyword" id="FORMAT-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="FORMAT-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="FORMAT-42" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="FORMAT-43" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="FORMAT-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;&amp;&quot;, &quot;*&quot;, &quot;+&quot;, &quot;-&quot; and its operand" id="FORMAT-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="FORMAT-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="FORMAT" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="FORMAT-47_a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="FORMAT-47_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Parameter names in function declarations should not be enclosed in parentheses" id="FORMAT-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="FORMAT-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" id="FORMAT-32" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sort #include directives in alphabetical order" id="FORMAT-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="153;" authUrg="0;" cat="FORMAT" desc="Tabs that do not use ASCII spaces shall not be used" id="FORMAT-01" sev="5" total="153" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way" id="FORMAT-40" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no space between '[' opening square bracket and preceding token" id="FORMAT-41" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All declarations of an object or function shall have compatible types" id="GLOBAL-COMPATDECLS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="GLOBAL-CONDMUTEXVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="GLOBAL-EXCSPECDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFINLINE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The One Definition Rule shall not be violated" id="GLOBAL-ONEDEFRULE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTEMPL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An identifier with external linkage shall have exactly one external definition" id="GLOBAL-ONEEXTERNDEF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="GLOBAL-ONEFILEDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain non-volatile POD variables having only one use" id="GLOBAL-ONEUSEVAR" sev="3" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="GLOBAL-REUSEDQUALGLOBVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="GLOBAL-REUSEDQUALSTATFUN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one" id="GLOBAL-TEMPLNOINST" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPEDEF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="GLOBAL" desc="Every defined function with external linkage shall be used at least once" id="GLOBAL-UNUSEDFUNC" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain unused type declarations" id="GLOBAL-UNUSEDTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="GLOBAL-UNUSEDVIRTPARAM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="GLOBAL-VIRTBASECLASS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="GLOBAL-AVOIDEXTERN" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_1_1" desc="For multiple inheritance use virtual common base class" id="HICPP-10_1_1-a" origId="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_2_1" desc="Each overriding virtual function shall be declared with the override or final specifier" id="HICPP-10_2_1-a" origId="CODSTA-MCPP-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_3_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="HICPP-10_3_1-a" origId="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid &quot;public&quot; data members" id="HICPP-11_1_1-a" origId="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid 'protected' data members" id="HICPP-11_1_1-b" origId="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_2_1" desc="Avoid using the friend mechanism" id="HICPP-11_2_1-a" origId="OOP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="Constructors allowing for conversion should be made explicit" id="HICPP-12_1_1-a" origId="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="User-conversion cast operators should be made explicit" id="HICPP-12_1_1-b" origId="CODSTA-MCPP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_2_1" desc="Make destructors virtual in base classes" id="HICPP-12_2_1-a" origId="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete if you write operator new" id="HICPP-12_3_1-a" origId="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete[] if you write operator new[]" id="HICPP-12_3_1-b" origId="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under construction" id="HICPP-12_4_1-b" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under destruction" id="HICPP-12_4_1-c" origId="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_2" desc="All member variables should be initialized in constructor" id="HICPP-12_4_2-a" origId="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_3" desc="Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" id="HICPP-12_4_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_4" desc="List members in an initialization list in the order in which they are declared" id="HICPP-12_4_4-a" origId="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_5" desc="Use delegating constructors to reduce code duplication" id="HICPP-12_4_5-a" origId="CODSTA-CPP-106" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="HICPP-12_5_1" desc="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" id="HICPP-12_5_1-a" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_2" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="HICPP-12_5_2-a" origId="CODSTA-CPP-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_3" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="HICPP-12_5_3-a" origId="OOP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_4" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="HICPP-12_5_4-a" origId="EXCEPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_6" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="HICPP-12_5_6-a" origId="CODSTA-MCPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="HICPP-12_5_7-a" origId="CODSTA-MCPP-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_8" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="HICPP-12_5_8-a" origId="OOP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_1" desc="Write a using declaration to redeclare overloaded functions" id="HICPP-13_1_1-a" origId="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_2" desc="Avoid Overloading on Forwarding References" id="HICPP-13_1_2-a" origId="CODSTA-MCPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="HICPP-13_2_1-a" origId="CODSTA-CPP-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading comma operator &quot;,&quot;" id="HICPP-13_2_1-b" origId="CODSTA-CPP-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A relational operator shall return a boolean value" id="HICPP-13_2_2-a" origId="CODSTA-CPP-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="HICPP-13_2_2-b" origId="CODSTA-CPP-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_3" desc="Declare binary arithmetic and bitwise operators as non-members" id="HICPP-13_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_4" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="HICPP-13_2_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_5" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="HICPP-13_2_5-a" origId="CODSTA-CPP-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_1_1" desc="Do not use functions with variable numbers of arguments" id="HICPP-14_1_1-a" origId="MISRA-069" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_1" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="HICPP-14_2_1-a" origId="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_2" desc="Overloaded function templates shall not be explicitly specialized" id="HICPP-14_2_2-a" origId="TEMPL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_3" desc="Declare 'extern' an explicitly instantiated template" id="HICPP-14_2_3-a" origId="TEMPL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-15_1_1" desc="Only use instances of std::exception for exceptions" id="HICPP-15_1_1-a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_1_1" desc="Always throw the created std::exception object" id="HICPP-15_1_1-b" origId="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_2_1" desc="Do not throw from within destructor" id="HICPP-15_2_1-a" origId="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_3_1" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="HICPP-15_3_1-a" origId="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Always catch exceptions" id="HICPP-15_3_2-a" origId="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="HICPP-15_3_2-c" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-15_3_2" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="HICPP-15_3_2-b" origId="EXCEPT-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="HICPP-16_1_1" desc="Avoid using macro definitions" id="HICPP-16_1_1-a" origId="PREPROC-01" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-b" origId="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="HICPP-16_1_1-c" origId="PREPROC-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="Use multiple include guards" id="HICPP-16_1_1-d" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-e" origId="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-f" origId="PREPROC-10_c" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#error directive shall not be used" id="HICPP-16_1_1-g" origId="PREPROC-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #pragma directive shall not be used" id="HICPP-16_1_1-h" origId="PREPROC-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#undef shall not be used" id="HICPP-16_1_1-i" origId="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="Do not allow absolute or relative path names in #include statements" id="HICPP-16_1_2-a" origId="PREPROC-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="The \ character should not occur in a header file name" id="HICPP-16_1_2-b" origId="NAMING-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_3" desc="Match the filename in a #include directive to the one on the filesystem" id="HICPP-16_1_3-a" origId="PREPROC-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_4" desc="Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" id="HICPP-16_1_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="HICPP-16_1_5" desc="Avoid duplication of #include directives" id="HICPP-16_1_5-a" origId="CDD-DUPI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_1_1" desc="Avoid using vector&lt;bool>" id="HICPP-17_1_1-a" origId="STL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_2_1" desc="The error indicator 'errno' shall not be used" id="HICPP-17_2_1-b" origId="MISRA2004-20_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-17_2_1" desc="Wrap use of the C Standard Library" id="HICPP-17_2_1-a" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_1" desc="Do not use std::move on objects declared with the const or const &amp; type" id="HICPP-17_3_1-a" origId="CODSTA-MCPP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_2" desc="The 'std::forward' function shall be used to forward universal references" id="HICPP-17_3_2-a" origId="CODSTA-MCPP-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-17_3_3" desc="Do not subsequently use the argument to std::forward" id="HICPP-17_3_3-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_4" desc="Do not create smart pointers of array type" id="HICPP-17_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_5" desc="Do not create an rvalue reference of std::array" id="HICPP-17_3_5-a" origId="CODSTA-MCPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="HICPP-17_4_1-a" origId="CODSTA-MCPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_2" desc="Prefer 'std::make_shared' to the direct use of new" id="HICPP-17_4_2-a" origId="CODSTA-MCPP-16_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_5_1" desc="Follow remove-like algorithms by erase to remove elements from a container" id="HICPP-17_5_1-a" origId="STL-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-18_1_1" desc="Do not use platform-specific multi-threading facilities" id="HICPP-18_1_1-a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_1" desc="Use high_integrity::thread in place of std::thread" id="HICPP-18_2_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Do not use global variable with different locks set" id="HICPP-18_2_2-a" origId="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Make const member functions thread-safe" id="HICPP-18_2_2-b" origId="BD-TRS-CMF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_3" desc="Do not share volatile data between threads" id="HICPP-18_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_4" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="HICPP-18_2_4-a" origId="CODSTA-MCPP-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_1" desc="Avoid double locking" id="HICPP-18_3_1-a" origId="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_2" desc="Do not acquire locks in different order" id="HICPP-18_3_2-a" origId="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_3" desc="Do not use std::recursive_mutex" id="HICPP-18_3_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_4" desc="Only use std::unique lock when std::lock guard cannot be used" id="HICPP-18_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_5" desc="Do not access the members of std::mutex directly" id="HICPP-18_3_5-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_6" desc="Do not use relaxed atomics" id="HICPP-18_3_6-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_4_1" desc="Do not use std::condition_variable_any on a std::mutex" id="HICPP-18_4_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid conditions that always evaluate to the same value" id="HICPP-1_2_1-i" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid switch with unreachable branches" id="HICPP-1_2_1-j" origId="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="HICPP-1_2_1-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="HICPP-1_2_1-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="HICPP-1_2_1-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in switch statement" id="HICPP-1_2_1-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in 'for' loop" id="HICPP-1_2_1-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="HICPP-1_2_1-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="HICPP-1_2_1-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid unreachable methods" id="HICPP-1_2_1-h" origId="BD-PB-UCMETH" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="HICPP-1_2_2-a" origId="MISRA2004-14_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="HICPP-1_3_1-a" origId="CODSTA-MCPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_2" desc="The 'register' storage class specifier shall not be used" id="HICPP-1_3_2-a" origId="MISRA-028" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-1_3_3" desc="The C library shall not be used" id="HICPP-1_3_3-a" origId="CODSTA-CPP-59" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_4" desc="Do not use deprecated STL library features" id="HICPP-1_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_5" desc="Do not use throw exception specifications" id="HICPP-1_3_5-a" origId="EXCEPT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="153;" authUrg="0;" cat="HICPP-2_1_1" desc="Tabs that do not use ASCII spaces shall not be used" id="HICPP-2_1_1-a" origId="FORMAT-01" sev="5" total="153" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="HICPP-2_2_1-a" origId="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Trigraphs shall not be used" id="HICPP-2_2_1-b" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_3_1" desc="Prefer C++ style comment" id="HICPP-2_3_1-a" origId="COMMENT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_3_2" desc="Do not use comments to remove sections of code" id="HICPP-2_3_2-a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-2_4_1" desc="Different identifiers shall be typographically unambiguous" id="HICPP-2_4_1-a" origId="NAMING-47" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_1" desc="String literals with different encoding prefixes shall not be concatenated" id="HICPP-2_5_1-a" origId="PB-38_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_2" desc="Octal constants (other than zero) shall not be used" id="HICPP-2_5_2-a" origId="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="HICPP-2_5_3" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="HICPP-2_5_3-a" origId="CODSTA-MCPP-04" sev="4" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="HICPP-3_1_1-a" origId="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="HICPP-3_1_1-b" origId="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="HICPP-3_1_1-c" origId="CODSTA-CPP-83" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="HICPP-3_1_1-d" origId="CODSTA-CPP-84" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="HICPP-3_1_1-e" origId="CODSTA-CPP-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_2_1" desc="Always declare functions at file scope" id="HICPP-3_2_1-a" origId="MISRA2004-8_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="HICPP-3_3_1" desc="Do not use variables with static storage duration" id="HICPP-3_3_1-a" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_1" desc="The address of an object with automatic storage shall not be returned from a function" id="HICPP-3_4_1-a" origId="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="HICPP-3_4_2-a" origId="MISRA2004-17_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Prefer smart pointers over raw local pointers" id="HICPP-3_4_3-a" origId="CODSTA-MCPP-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Do not call lock() directly on a mutex" id="HICPP-3_4_3-b" origId="CODSTA-MCPP-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Use RAII to prevent resource leaks" id="HICPP-3_4_3-c" origId="MRM-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not subtract two pointers that do not address elements of the same array" id="HICPP-3_5_1-c" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not compare two unrelated pointers" id="HICPP-3_5_1-d" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Unions shall not be used" id="HICPP-3_5_1-a" origId="MISRA2004-18_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="HICPP-3_5_1" desc="typedefs should be used in place of the basic types" id="HICPP-3_5_1-b" origId="MISRA2004-6_3_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_1_1" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="HICPP-4_1_1-a" origId="PB-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_1_1" desc="Do not pass expression with array type to a function with pointer or array type parameter" id="HICPP-4_1_1-b" origId="PB-41_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-4_2_1" desc="Apply the U suffix to literals used in a context that requires an unsigned integral expression" id="HICPP-4_2_1-a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid incorrect shift operations" id="HICPP-4_2_2-f" origId="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="HICPP-4_2_2-a" origId="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid explicit type conversions (casts)" id="HICPP-4_2_2-b" origId="CODSTA-31" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="HICPP-4_2_2-c" origId="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid integer overflows" id="HICPP-4_2_2-e" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="HICPP-4_2_2-d" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions from wider to narrower floating type" id="HICPP-4_3_1-a" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="HICPP-4_3_1-b" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_4_1" desc="Avoid implicit conversions from floating to integral type" id="HICPP-4_4_1-a" origId="MISRA2004-10_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-5_1_1" desc="Avoid magic numbers" id="HICPP-5_1_1-a" origId="CODSTA-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="HICPP-5_1_2-b" origId="MISRA2004-12_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="HICPP-5_1_2-a" origId="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="HICPP-5_1_2-c" origId="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="HICPP-5_1_2-d" origId="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="HICPP-5_1_2-e" origId="MISRA2004-12_2_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Do not use more than one volatile between two adjacent sequence points" id="HICPP-5_1_2-f" origId="MISRA2004-12_2_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function calls" id="HICPP-5_1_2-g" origId="MISRA2004-12_2_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="HICPP-5_1_2-h" origId="MISRA2004-12_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The comma operator shall not be used" id="HICPP-5_1_2-i" origId="MISRA2004-12_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The result of a built-in assignment operator should not be used" id="HICPP-5_1_2-j" origId="CODSTA-138" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="Use parentheses unless all operators in the expression are the same" id="HICPP-5_1_3-a" origId="MISRA2004-12_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="HICPP-5_1_3-b" origId="MISRA2004-12_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_4" desc="Do not capture variables implicitly in a lambda" id="HICPP-5_1_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_5" desc="Include a parameter list in every lambda expression" id="HICPP-5_1_5-a" origId="CODSTA-MCPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="HICPP-5_1_6-a" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="HICPP-5_1_6-b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="HICPP-5_1_6-c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="HICPP-5_1_6-d" origId="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="HICPP-5_1_6-e" origId="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="HICPP-5_1_6-f" origId="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid null pointer dereferencing" id="HICPP-5_2_1-c" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays out of bounds" id="HICPP-5_2_1-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays and pointers out of bounds" id="HICPP-5_2_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Functions shall not call themselves, either directly or indirectly" id="HICPP-5_2_2-a" origId="MISRA2004-16_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Do not use recursion" id="HICPP-5_2_2-b" origId="BD-PB-RECFUN" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_1" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="HICPP-5_3_1-a" origId="MISRA2004-12_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_2" desc="Do not use calloc, malloc, realloc and free functions" id="HICPP-5_3_2-a" origId="MRM-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Properly deallocate dynamically allocated resources" id="HICPP-5_3_3-c" origId="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="HICPP-5_3_3-a" origId="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="HICPP-5_3_3-b" origId="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-5_4_1" desc="Prefer C++-style casts" id="HICPP-5_4_1-a" origId="CODSTA-CPP-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="Avoid using reinterpret_cast" id="HICPP-5_4_1-b" origId="CODSTA-CPP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="HICPP-5_4_1-c" origId="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_2" desc="Do not cast an expression to an enumeration type" id="HICPP-5_4_2-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_3" desc="Down casting (casting from base to derived class) shall not be allowed" id="HICPP-5_4_3-a" origId="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_5_1" desc="Avoid division by zero" id="HICPP-5_5_1-a" origId="BD-PB-ZERO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_6_1" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="HICPP-5_6_1-a" origId="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_1" desc="Floating-point expressions shall not be tested for equality or inequality" id="HICPP-5_7_1-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_2" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="HICPP-5_7_2-a" origId="CODSTA-MCPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_8_1" desc="The conditional operator should not be used as a sub-expression" id="HICPP-5_8_1-a" origId="CODSTA-224" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="HICPP-6_1_1-a" origId="MISRA2004-14_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="'if' and 'else' should be followed by a compound statement" id="HICPP-6_1_1-b" origId="MISRA2004-14_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="HICPP-6_1_2-a" origId="MISRA2004-14_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="The final clause of a switch statement shall be the default clause" id="HICPP-6_1_2-b" origId="MISRA2004-15_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="HICPP-6_1_3-a" origId="CODSTA-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="Every switch statement will have at least two cases and a potential default" id="HICPP-6_1_4-a" origId="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="A switch expression shall not represent a value that is effectively Boolean" id="HICPP-6_1_4-b" origId="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="HICPP-6_2_1-a" origId="CODSTA-MCPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="HICPP-6_2_2-a" origId="CODSTA-168" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_3" desc="Do not modify for loop counter within a body of the loop" id="HICPP-6_2_3-a" origId="MISRA2004-13_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_4" desc="The third clause of a 'for' statement shall be well-formed" id="HICPP-6_2_4-a" origId="CODSTA-169_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="HICPP-6_3_1-a" origId="MISRA2004-15_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="The goto statement shall jump to a label declared later in the same function body" id="HICPP-6_3_1-b" origId="CODSTA-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="HICPP-6_3_1-c" origId="CODSTA-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="HICPP-6_3_2-a" origId="MISRA2004-16_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Declare variables as locally as possible" id="HICPP-6_4_1-a" origId="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Postpone variable definitions as long as possible" id="HICPP-6_4_1-b" origId="OPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="HICPP-7_1_1" desc="Multiple variable declarations shall not be allowed on the same line" id="HICPP-7_1_1-a" origId="FORMAT-29" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="HICPP-7_1_1" desc="Each variable should be declared in a separate declaration statement" id="HICPP-7_1_1-b" origId="FORMAT-33" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_10" desc="Use static_assert for assertions involving compile time constants" id="HICPP-7_1_10-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="HICPP-7_1_2" desc="Declare parameters or local variable as const whenever possible" id="HICPP-7_1_2-a" origId="CODSTA-CPP-53" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_3" desc="Do not place type specifiers before non-type specifiers in a declaration" id="HICPP-7_1_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-7_1_4" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="HICPP-7_1_4-a" origId="FORMAT-47_a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_5" desc="Do not inline large functions" id="HICPP-7_1_5-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="The plain char type shall be used only for the storage and use of character values" id="HICPP-7_1_6-a" origId="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="HICPP-7_1_6" desc="Use class types or typedefs to abstract scalar quantities and standard integer types" id="HICPP-7_1_6-b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="Use class types or typedefs to abstract scalar quantities and standard integer types" id="HICPP-7_1_6-c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_7" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="HICPP-7_1_7-a" origId="TEMPL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-7_1_8" desc="Use auto id = expr when declaring a variable that is the same type as the initializer function call" id="HICPP-7_1_8-a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_9" desc="Do not explicitly specify the return type of a lambda" id="HICPP-7_1_9-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_1" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="HICPP-7_2_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_2" desc="Initialize all, only the first, or none of the enumerators in an enumeration" id="HICPP-7_2_2-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_3_1" desc="using-directives shall not be used" id="HICPP-7_3_1-a" origId="CODSTA-CPP-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-7_4_1" desc="Do not use static keyword except inside functions and classes" id="HICPP-7_4_1-a" origId="CODSTA-CPP-50" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-a" origId="GLOBAL-ONEDEFINLINE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-b" origId="GLOBAL-ONEDEFTEMPL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-c" origId="GLOBAL-ONEDEFTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="HICPP-7_4_3-a" origId="GLOBAL-ONEFILEDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_5_1" desc="Do not use the asm declaration" id="HICPP-7_5_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="HICPP-8_1_1" desc="The declaration should not contain more than one level of pointer indirection" id="HICPP-8_1_1-a" origId="CODSTA-89" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_1" desc="The identifiers used in the declaration and definition of a function shall be identical" id="HICPP-8_2_1-a" origId="MISRA2004-16_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_2" desc="Avoid functions with more than 5 parameters" id="HICPP-8_2_2-a" origId="METRICS-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_4" desc="Do not pass std::unique_ptr by const reference" id="HICPP-8_2_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_1" desc="Follow the Cyclomatic Complexity limit of 10" id="HICPP-8_3_1-a" origId="METRICS-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_3" desc="Do not use default arguments" id="HICPP-8_3_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_4" desc="Define rvalue reference functions that have a const parameter as =delete" id="HICPP-8_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Avoid use before initialization" id="HICPP-8_4_1-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Do not use resources that have been freed" id="HICPP-8_4_1-b" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="All automatic variables shall have been assigned a value before being used" id="HICPP-8_4_1-c" origId="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="HICPP-8_4_2-a" origId="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_1" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="HICPP-9_1_1-a" origId="CODSTA-CPP-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_2" desc="Do not redefine an inherited virtual function with a different default parameter value" id="HICPP-9_1_2-a" origId="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_3" desc="Const member functions shall not return non-const pointers or references to class-data" id="HICPP-9_1_3-a" origId="CODSTA-CPP-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_4" desc="Public member functions shall not return non-const handles to private/protected class-data" id="HICPP-9_1_4-a" origId="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_5" desc="Do not introduce virtual functions in a final class" id="HICPP-9_1_5-a" origId="CODSTA-MCPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_2_1" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="HICPP-9_2_1-a" origId="CODSTA-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize a reference to an object whose address can be changed" id="INIT-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize static class members" id="INIT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables in base class constructors" id="INIT-13_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors" id="INIT-13_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="INIT" desc="Initialize all pointer variables" id="INIT-04" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="An assignment operator shall assign all data members" id="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Objects with external linkage should not be initialized in a header file" id="INIT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize unsigned integer variables with signed constants" id="INIT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="INIT" desc="Initialize all variables" id="INIT-03" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Make class members' initialization explicit by providing user-defined constructor" id="INIT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects" id="INIT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="List members in an initialization list in the order in which they are declared" id="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not assume that members are initialized in any special order in constructors" id="INIT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors" id="INIT-13_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="The initializer for an aggregate or union shall be enclosed in braces" id="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="The data members initialized with the same constant values across all constructors should be initialized using NSDMI" id="INIT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Consider adding constructor to initialize 'struct' member variables" id="INIT-15" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Prefer initialization to assignment in constructors" id="INIT-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All functions shall have a cyclomatic complexity number of 20 or less" id="JSF-003" origId="METRICS-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Follow the Essential Complexity limit of 1" id="JSF-003_b" origId="METRICS-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Capital 'L' shall be used instead of lowercase 'l' to indicate long" id="JSF-014" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Ensure that array indices are within the bounds of the array" id="JSF-015" origId="MISRA-004_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The error indicator 'errno' shall not be used" id="JSF-017" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The macro 'offsetof', in library &lt;stddef.h>, shall not be used" id="JSF-018" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="'setlocale' function shall not be used" id="JSF-019" origId="MISRA-121_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="&lt;locale.h> shall not be used" id="JSF-019_b" origId="MISRA-121_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The 'setjmp' macro and the 'longjmp' function shall not be used" id="JSF-020" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;setjmp.h> shall not be used" id="JSF-020_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;signal.h> shall not be used" id="JSF-021" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="JSF-021_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The input/output library &lt;stdio.h> shall not be used" id="JSF-022" origId="PREPROC-18" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" id="JSF-023" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="JSF-024" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="JSF-024_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="JSF-024_c" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="JSF-024_d" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The time handling functions of library &lt;time.h> shall not be used" id="JSF-025" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="JSF-026" origId="PREPROC-11" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #if preprocessor directive should not be used" id="JSF-026_b" origId="PREPROC-11_b" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#error directive shall not be used" id="JSF-026_c" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #pragma directive shall not be used" id="JSF-026_d" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#undef shall not be used" id="JSF-026_e" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to create inline macros" id="JSF-029" origId="MISRA2004-19_7" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to define constant values" id="JSF-030" origId="CODSTA-03" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="JSF-033" origId="PREPROC-09" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="JSF-046_a" origId="PORT-34_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="JSF-046_b" origId="PORT-34_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="JSF-046_c" origId="PORT-34_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers for constant and enumerator values shall be lowercase" id="JSF-052" origId="NAMING-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot; " id="JSF-053.1" origId="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces" id="JSF-059_a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces" id="JSF-059_b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare both private copy constructor and copy assignment operator at the same time" id="JSF-068" origId="MRM-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Freed memory shall not be accessed under any circumstances" id="JSF-070.1" origId="MRM-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Destructor shall not be called manually" id="JSF-070.1_b" origId="MRM-31_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public and protected methods shall not be invoked by class constructor" id="JSF-071" origId="PB-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071.1" origId="OOP-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from its destructor" id="JSF-071.1_b" origId="OOP-16_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All member variables shall be initialized in constructor" id="JSF-071_b" origId="INIT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071_c" origId="OOP-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables shall not be used in base class constructors" id="JSF-071_d" origId="INIT-13_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors" id="JSF-071_e" origId="INIT-13_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors" id="JSF-071_f" origId="INIT-13_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Members of the initialization list shall be listed in the order in which they are declared in the class" id="JSF-075" origId="INIT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="JSF-076" origId="MRM-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor shall copy all data members and bases" id="JSF-077" origId="MRM-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="JSF-077.1" origId="PB-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All base classes with a virtual function shall define a virtual destructor" id="JSF-078" origId="OOP-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="JSF-079" origId="MRM-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call delete on pointer members in destructors" id="JSF-079_b" origId="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The assignment operator shall handle self-assignment correctly" id="JSF-081" origId="OOP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall return a reference to *this" id="JSF-082" origId="CODSTA-CPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data members" id="JSF-083_a" origId="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data bases" id="JSF-083_b" origId="MRM-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="JSF-088" origId="OOP-07_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="JSF-088.1" origId="OOP-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall not use any public implementations" id="JSF-088_b" origId="OOP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="JSF-089" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited nonvirtual function shall not be redefined in a derived class" id="JSF-094" origId="OOP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Member functions declared in derived class shall not hide functions declared in base classes" id="JSF-094_b" origId="OOP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited default parameter shall never be redefined" id="JSF-095" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be treated polymorphically" id="JSF-096" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in interfaces" id="JSF-097" origId="CODSTA-CPP-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="JSF-097.1" origId="CODSTA-CPP-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in private or protected methods" id="JSF-097_b" origId="CODSTA-CPP-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in global functions" id="JSF-097_c" origId="CODSTA-142" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be passed to functions as array/pointer parameters" id="JSF-097_d" origId="PB-41_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="JSF-097_e" origId="CODSTA-142_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall always be declared at file scope" id="JSF-107" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with variable numbers of arguments shall not be used" id="JSF-108" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or reference to a non-static local object" id="JSF-111" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="JSF-111_a" origId="PB-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All exit points of value-returning functions shall be through return statements" id="JSF-114" origId="MISRA2004-16_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall not call themselves, either directly or indirectly" id="JSF-119" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only valid C++ style comments (//) shall be used" id="JSF-126" origId="COMMENT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Code that is not used (commented out) shall be deleted" id="JSF-127" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="JSF-135_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope" id="JSF-135_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a local scope shall not hide identifiers declared in a class scope" id="JSF-135_c" origId="CODSTA-CPP-83" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope" id="JSF-135_d" origId="CODSTA-CPP-84" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope" id="JSF-135_e" origId="CODSTA-CPP-85" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="JSF-138_a" origId="MISRA-024" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="JSF-138_b" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The register storage class specifier shall not be used" id="JSF-140" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All automatic variables shall have been assigned a value before being used" id="JSF-142_a" origId="MISRA-030" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="All variables shall be initialized before use" id="JSF-142_b" origId="INIT-03" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="JSF-144" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="JSF-145" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The underlying bit representations of floating point numbers shall not be used in any way by the programmer" id="JSF-147" origId="MISRA-016" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" id="JSF-148" origId="CODSTA-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Octal constants (other than zero) shall not be used" id="JSF-149" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A string literal shall not be modified" id="JSF-151.1" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="JSF" desc="Multiple variable declarations shall not be allowed on the same line" id="JSF-152" origId="FORMAT-29" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unions shall not be used" id="JSF-153" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="JSF-154" origId="CODSTA-96" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All the members of a structure (or class) shall be named" id="JSF-156" origId="MISRA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a &amp;&amp; or || operator shall not contain side effects" id="JSF-157" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="JSF-158" origId="CODSTA-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operators ||, &amp;&amp; shall not be overloaded" id="JSF-159" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operator unary &amp; shall not be overloaded" id="JSF-159_b" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment expression shall be used only as the expression in an expression statement" id="JSF-160" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in comparison operations" id="JSF-162_a" origId="CODSTA-99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="JSF-162_b" origId="CODSTA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="JSF-162_c" origId="CODSTA-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unsigned arithmetic shall not be used" id="JSF-163" origId="PB-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand" id="JSF-164" origId="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="JSF-164.1" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The unary minus operator shall not be applied to an unsigned expression" id="JSF-165" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't assign the dividend of two integers to a floating-point type" id="JSF-167_a" origId="PB-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The comma operator shall not be used" id="JSF-168_b" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="More than 2 levels of pointer indirection shall not be used" id="JSF-170" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="Relational operators shall not be applied to pointer types except where they point to the same array" id="JSF-171" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="JSF-173" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_a" origId="MISRA-107_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_b" origId="MISRA-107_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="NULL identifier shall not be used; use plain 0 instead" id="JSF-175" origId="CODSTA-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Down casting (casting from base to derived class) shall not be allowed" id="JSF-178" origId="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A pointer to a virtual base class shall not be converted to a pointer to a derived class" id="JSF-179" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="JSF-180_a" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from floating to integral type" id="JSF-180_b" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from wider to narrower floating type" id="JSF-180_c" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid conversions of constant values to a narrower type" id="JSF-180_d" origId="PORT-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from signed to unsigned type" id="JSF-180_e" origId="PB-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="JSF-180_f" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="JSF-180_g" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Type casting from any type to or from pointers shall not be used" id="JSF-182" origId="CODSTA-135" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point numbers shall not implicitly be converted to integers" id="JSF-184_a" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="JSF-185" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'else' block" id="JSF-186_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="JSF-186_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'if', 'else', 'while' and 'for' block" id="JSF-186_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'switch' statement" id="JSF-186_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'for' loop" id="JSF-186_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="JSF-186_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop" id="JSF-186_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every defined function with internal linkage shall be used" id="JSF-186_h" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All non-null statements shall potentially have a side-effect" id="JSF-187" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The goto statement shall not be used" id="JSF-189" origId="MISRA2004-14_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The continue statement shall not be used" id="JSF-190" origId="MISRA2004-14_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The break statement shall not be used (except to terminate the cases of a switch statement)" id="JSF-191" origId="MISRA-058" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="JSF-191_a" origId="CODSTA-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every non-empty case clause in a switch statement shall be terminated with a break statement" id="JSF-193" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All switch statements that do not intend to test for every enumeration value shall contain a final default clause" id="JSF-194" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be used as loop counters" id="JSF-197" origId="MISRA-065" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop" id="JSF-201" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be tested for exact equality or inequality" id="JSF-202" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Evaluation of expressions shall not lead to overflow/underflow" id="JSF-203" origId="PB-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="JSF-204.1_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function arguments" id="JSF-204.1_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="JSF-204.1_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="JSF-204.1_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="JSF-204.1_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Do not use more than one volatile in one expression" id="JSF-204.1_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function calls" id="JSF-204.1_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A single operation with side-effect shall only be used in the proper context" id="JSF-204_a" origId="CODSTA-102" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A call of function with side-effect shall only be used in the proper context" id="JSF-204_b" origId="CODSTA-103" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="JSF-204_d" origId="CODSTA-105" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The volatile keyword shall not be used" id="JSF-205" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Dynamic heap memory allocation shall not be used" id="JSF-206" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="C++ exceptions shall not be used" id="JSF-208" origId="EXCEPT-05" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209" origId="MISRA2004-6_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209_b" origId="MISRA2004-6_3_b" sev="2" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="JSF-210.1" origId="PORT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not assume particular memory alignment" id="JSF-211" origId="MISRA2004-11_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="JSF-213_e" origId="CODSTA-97" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done" id="JSF-214" origId="INIT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="JSF-001" origId="METRICS-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only those characters specified in the C++ basic source character set will be used" id="JSF-009" origId="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Values of character types will be restricted to a defined and documented subset of ISO 10646-1" id="JSF-010" origId="MISRA-006" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trigraphs will not be used" id="JSF-011" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following digraphs will not be used &lt;%, %>, &lt;:, :>, %:, %:%:" id="JSF-012" origId="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Wide string literals (for example L&quot;abc&quot;) will not be used" id="JSF-013" origId="MISRA-008" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file" id="JSF-027" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="JSF-028" origId="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="JSF-028_b" origId="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" id="JSF-031" origId="PREPROC-01" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="JSF-032" origId="PREPROC-08" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A header file will contain a mechanism that prevents multiple inclusions of itself" id="JSF-035" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files (*.h) will not contain non-const variable definitions or function definitions" id="JSF-039_a" origId="PFO-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Source lines will be kept to a length of 120 characters or less" id="JSF-041" origId="METRICS-26" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each expression-statement will be on a separate line" id="JSF-042" origId="FORMAT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All indentations will be consistent" id="JSF-044" origId="FORMAT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers will not begin with the underscore character &quot;_&quot;" id="JSF-047" origId="NAMING-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="JSF-048" origId="NAMING-45" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="JSF-050" origId="NAMING-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="JSF" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="JSF-051" origId="NAMING-44" sev="3" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files will always have a file name extension of &quot;.h&quot;" id="JSF-053" origId="NAMING-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implementation files will always have a file name extension of &quot;.cpp&quot;" id="JSF-054" origId="NAMING-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The public section of a class will be declared before the protected section and before the private section" id="JSF-057_a" origId="CODSTA-CPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The protected section of a class will be declared before the private section" id="JSF-057_b" origId="CODSTA-CPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="JSF-058" origId="FORMAT-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-060_a" origId="FORMAT-42" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="JSF-060_b" origId="FORMAT-43" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="JSF-060_c" origId="FORMAT-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-061" origId="FORMAT-42" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" id="JSF-062" origId="FORMAT-32" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space following '.' or '->' operator" id="JSF-063_a" origId="FORMAT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space preceding '.' or '->' operator" id="JSF-063_b" origId="FORMAT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '!' or '~' and its operand" id="JSF-063_c" origId="FORMAT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a increment/decrement operator (++/--) and its operand" id="JSF-063_d" origId="FORMAT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '&amp;', '*', '+', '-' and its operand" id="JSF-063_e" origId="FORMAT-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="JSF-063_f" origId="FORMAT-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A member function that does not affect the state of an object will be declared const" id="JSF-069" origId="CODSTA-CPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor" id="JSF-074" origId="INIT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When two operators are opposites (such as == and !=), both will be defined" id="JSF-085" origId="CODSTA-CPP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other" id="JSF-085_a" origId="CODSTA-CPP-86" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Namespaces will not be nested more than two levels deep" id="JSF-099" origId="CODSTA-CPP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template" id="JSF-104" origId="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with more than 7 arguments will not be used" id="JSF-110" origId="METRICS-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions will have a single exit point" id="JSF-113" origId="MISRA2004-14_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="JSF" desc="If a function returns error information, then that error information will be tested" id="JSF-115" origId="MISRA2004-16_10" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="JSF" desc="Each variable declaration will be commented" id="JSF-132_a" origId="COMMENT-05" sev="3" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each typedef will be commented" id="JSF-132_b" origId="COMMENT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each enumeration value will be commented" id="JSF-132_c" origId="COMMENT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each structure member variable will be commented" id="JSF-132_d" origId="COMMENT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Every source file will be documented with an introductory comment that provides information on the file" id="JSF-133_a" origId="COMMENT-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Every source file will contain copyright information" id="JSF-133_b" origId="COMMENT-02" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in more than one file" id="JSF-139" origId="MISRA-027" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in implementation files" id="JSF-139_b" origId="MISRA-027_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="JSF-141" origId="CODSTA-CPP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Variables will not be introduced until they can be initialized with meaningful values" id="JSF-143" origId="OPT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid unused local variables" id="JSF-143_a" origId="OPT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hexadecimal constants will be represented using all uppercase letters" id="JSF-150" origId="CODSTA-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="1;" cat="JSF" desc="Numeric values in code will not be used; symbolic values will be used instead" id="JSF-151" origId="CODSTA-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The implementation of integer division shall be documented" id="JSF-167" origId="MISRA-041" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A typedef will be used to simplify program syntax when declaring function pointers" id="JSF-176" origId="CODSTA-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Redundant explicit casts will not be used" id="JSF-181_a" origId="OPT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid explicit cast from derived to a base class" id="JSF-181_b" origId="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Labels will not be used, except in switch statements" id="JSF-188" origId="MISRA-055" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="JSF-192" origId="CODSTA-98" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A switch expression will not represent a Boolean value" id="JSF-195" origId="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every switch statement will have at least two cases and a potential default" id="JSF-196" origId="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="JSF-198" origId="CODSTA-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="JSF-199" origId="CODSTA-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="JSF-200" origId="CODSTA-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="JSF" desc="Unencapsulated global data will be avoided" id="JSF-207" origId="CODSTA-CPP-82" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A file should directly include only headers containing declarations and definitions needed to a compilation" id="JSF-037" origId="OPT-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="153;" authUrg="0;" cat="JSF" desc="Tabs should be avoided" id="JSF-043" origId="FORMAT-01" sev="4" total="153" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public data should only be used in structs, not in classes" id="JSF-067_a" origId="OOP-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Protected data should only be used in structs, not in classes" id="JSF-067_b" origId="OOP-19" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using the friend mechanism" id="JSF-070" origId="OOP-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hierarchies should be based on abstract classes" id="JSF-087" origId="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="JSF" desc="Every nonlocal name, except main(), should be placed in some namespace" id="JSF-098" origId="CODSTA-CPP-36" sev="4" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write namespace usings in a header file or before an #include" id="JSF-100" origId="CODSTA-CPP-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier" id="JSF-105" origId="TEMPL-12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function definition should not be placed in a class specification" id="JSF-109" origId="CODSTA-CPP-32" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Dereferenced local pointer initialized by new in function scope should not be returned" id="JSF-112" origId="MRM-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="JSF" desc="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="JSF-115_a" origId="CODSTA-CPP-58" sev="4" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Built-in-types should be passed by value unless you are modifying them" id="JSF-116" origId="CODSTA-36" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arguments should be passed by reference" id="JSF-117" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An object should be passed as const reference if the function should not change the value of the object" id="JSF-117.1" origId="CODSTA-CPP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid slicing function arguments / return value" id="JSF-117_a" origId="PB-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="JSF-117_b" origId="PB-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="JSF-118" origId="MISRA2004-16_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="JSF-118_b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="JSF-121" origId="OPT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial accessor and mutator functions should be inlined" id="JSF-122" origId="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="JSF-123" origId="CODSTA-CPP-81" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial forwarding functions should be inlined" id="JSF-124" origId="OPT-24" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pass and return by reference when possible" id="JSF-125_a" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="2;" cat="JSF" desc="Document functions in comments that precede function definitions" id="JSF-134" origId="COMMENT-04" sev="4" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Document functions in comments that precede function declarations" id="JSF-134_b" origId="COMMENT-04_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Objects should be defined at block scope if they are only accessed from within a single function" id="JSF-136_a" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declarations of local variables should be at the smallest feasible scope" id="JSF-136_b" origId="OPT-01" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="JSF" desc="All declarations at file scope should be static where possible" id="JSF-137" origId="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointers to pointers should be avoided" id="JSF-169" origId="CODSTA-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-defined conversion functions should be avoided" id="JSF-177" origId="CODSTA-CPP-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Constructors allowing for conversion should be made explicit" id="JSF-177_b" origId="CODSTA-CPP-04" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Every possible measure should be taken to avoid type casting" id="JSF-183" origId="CODSTA-31" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using static_cast on pointers" id="JSF-183_a" origId="CODSTA-CPP-34" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using reinterpret_cast" id="JSF-183_b" origId="CODSTA-CPP-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointer arithmetic will not be used" id="JSF-215" origId="MISRA-101" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Consider using op= instead of stand-alone op" id="JSF-125_b" origId="OPT-19" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of blocks of code in a function" id="METRICS-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of function calls within function" id="METRICS-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Class inheritance level" id="METRICS-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of data member(s) per class should not exceed 15" id="METRICS-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of methods per class" id="METRICS-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of parameter(s) per method should not exceed 10" id="METRICS-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private data member(s) per class" id="METRICS-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private methods per class" id="METRICS-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected data member(s) per class" id="METRICS-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected methods per class" id="METRICS-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public data member(s) per class" id="METRICS-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public methods per class" id="METRICS-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with more than 5 parameters" id="METRICS-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Macros should not use more than 5 parameters" id="METRICS-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 10" id="METRICS-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="2;" cat="METRICS" desc="The percentage of comment lines versus the total number of module lines should be between 20 and 60" id="METRICS-19" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (declarations and statements)" id="METRICS-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (blocks)" id="METRICS-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 75 lines of code" id="METRICS-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Nested block depth should not be higher than 5" id="METRICS-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="METRICS-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="METRICS" desc="Source lines will be kept to a length of 120 characters or less" id="METRICS-26" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Functions with more than 7 parameters will not be used" id="METRICS-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 20" id="METRICS-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="No function should be longer than 60 lines of code" id="METRICS-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="METRICS" desc="The assertion density of the code should average to a minimum of two assertions per function" id="METRICS-31" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="All functions with more than 20 lines should contain at least 2 assertions" id="METRICS-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A global function should not be called from more than 5 different functions" id="METRICS-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A function should not call more than 7 different functions" id="METRICS-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of statements within function should be in range 1 - 50" id="METRICS-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The value of VOCF metric for a function should not be higher than 4" id="METRICS-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Statements within function should not be nested deeper than 4 levels" id="METRICS-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" id="METRICS-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Report the value of Halstead's delivered bugs (B) for a function" id="METRICS-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 50 lines" id="METRICS-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid switch statements with many cases" id="METRICS-02" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid structs, unions, or classes with more than 20 fields" id="METRICS-17" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid source files that are longer than 500 lines" id="METRICS-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="METRICS" desc="Report Cyclomatic Complexity" id="METRICS-29" sev="5" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="METRICS" desc="Report Essential Complexity" id="METRICS-33" sev="5" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 4" id="METRICS-34" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 10" id="METRICS-35" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 1" id="METRICS-42" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Only use characters defined in ISO C standard" id="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Values of character types shall be restricted to a defined and documented subset of ISO 10646-1" id="MISRA-006" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use wide string literals" id="MISRA-008" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA" desc="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" id="MISRA-013" sev="3" total="18" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Explicitly declare 'char' type as signed or unsigned" id="MISRA-014" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The underlying bit representations of floating point numbers shall not be used" id="MISRA-016" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All functions shall be declared before use" id="MISRA-020" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="MISRA-024" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External object should not be declared in more than one file" id="MISRA-027" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External objects should not be declared in implementation files" id="MISRA-027_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The use of a tag shall agree with its declaration" id="MISRA-029" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All automatic variables shall have been assigned a value before being used" id="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA-038" origId="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The comma operator shall not be used, except in the control expression of a for loop" id="MISRA-042" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="MISRA-043" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid mixing arithmetic of different precisions in the same expression" id="MISRA-043_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Redundant explicit cast to the same type is not allowed" id="MISRA-044" origId="OPT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the volatile keyword" id="MISRA-046_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Assignment statements should not be nested within other assignment statements" id="MISRA-046_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="MISRA-048_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Don't cast the dividend of two integers to a floating-point type" id="MISRA-048_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="MISRA-048_c" origId="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid unintentionally discarding the remainder of integer division" id="MISRA-048_d" origId="PB-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="A null statement shall only occur on a line by itself" id="MISRA-054" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the break statement" id="MISRA-058" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use floating point variables as loop counters" id="MISRA-065" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use functions with variable numbers of arguments" id="MISRA-069" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA-071_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall always have visible prototype at the function call" id="MISRA-071_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide none or all identifiers for function arguments" id="MISRA-073" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide expression for return statement of non-void functions" id="MISRA-083" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid expressions in return statements of void functions" id="MISRA-084" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA-089" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA" desc="Enclose in parentheses whole definition of a function-like macro" id="MISRA-096" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use only non-ambiguous forms of defined pre-processor operator" id="MISRA-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Pointer arithmetic should not be used" id="MISRA-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use non-constant pointers to functions" id="MISRA-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type" id="MISRA-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All members of structure or union should be fully specified" id="MISRA-108" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Unions shall not be used to access the sub-parts of larger data structure" id="MISRA-110" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the members of a structure (or class/union) shall be named" id="MISRA-113" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Standard library function names shall not be reused" id="MISRA-115" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use 'setlocale' function" id="MISRA-121_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not include &lt;locale.h> header" id="MISRA-121_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="MISRA" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_a" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_a" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_c" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_d" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="MISRA" desc="Declare objects at function scope" id="MISRA-022" sev="5" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The 'register' storage class specifier shall not be used" id="MISRA-028" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Document integer division" id="MISRA-041" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="MISRA-051" origId="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use labels" id="MISRA-055" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2004-12_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions between signed and unsigned integer types" id="MISRA2004-10_1_a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="There shall be no implicit conversions from integral to floating type" id="MISRA2004-10_1_b" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower types" id="MISRA2004-10_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function return expressions" id="MISRA2004-10_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function arguments" id="MISRA2004-10_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_i" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from floating to integral type" id="MISRA2004-10_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower floating type" id="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from narrower to wider floating type" id="MISRA2004-10_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="MISRA2004-10_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="MISRA2004-10_4" origId="CODSTA-198" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to an integer type" id="MISRA2004-10_4_b" origId="CODSTA-198_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2004-10_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to a function and any type other than an integral type" id="MISRA2004-11_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert a pointer type to an integral type" id="MISRA2004-11_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert an integral type to a pointer type" id="MISRA2004-11_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The comma operator shall not be used" id="MISRA2004-12_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2004-12_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2004-12_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="MISRA2004-12_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2004-12_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2004-12_2_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRA2004-12_2_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2004-12_2_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2004-12_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" id="MISRA2004-12_6_a" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="MISRA2004-12_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bitwise operators shall not be applied to operands whose underlying type is signed" id="MISRA2004-12_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2004-12_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="MISRA2004-13_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRA2004-13_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The controlling expression of a for statement shall not contain any objects of floating type" id="MISRA2004-13_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The three expressions of a for statement shall be concerned only with loop control" id="MISRA2004-13_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not modify for loop counter within a body of the loop" id="MISRA2004-13_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aa" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ab" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ac" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ad" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ae" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_af" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ag" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ah" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ai" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aj" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ak" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_j" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_k" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_l" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_m" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_n" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_s" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_t" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_u" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_v" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_w" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_x" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_y" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_z" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRA2004-14_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in switch statement" id="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in 'for' loop" id="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2004-14_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A null statement shall occur on a line by itself or be followed by a comment" id="MISRA2004-14_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The goto statement shall not be used" id="MISRA2004-14_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The continue statement shall not be used" id="MISRA2004-14_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="For any iteration statement there shall be at most one break statement used for loop termination" id="MISRA2004-14_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function shall have a single point of exit at the end of the function" id="MISRA2004-14_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRA2004-14_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="'if' and 'else' should be followed by a compound statement" id="MISRA2004-14_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A break statement should be placed only at the end of switch clause" id="MISRA2004-15_0_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2004-15_0_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2004-15_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2004-15_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2004-15_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The final clause of a switch statement shall be the default clause" id="MISRA2004-15_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Every switch statement shall have at least one case clause" id="MISRA2004-15_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not be defined with a variable number of arguments" id="MISRA2004-16_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRA2004" desc="If a function returns error information, then that error information shall be tested" id="MISRA2004-16_10" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2004-16_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2004-16_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2004-16_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions with no parameters shall be declared with parameter type void" id="MISRA2004-16_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The number of arguments passed to a function shall match the number of parameters" id="MISRA2004-16_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="MISRA2004-16_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not apply arithmetic to pointers that don't address an array or array element" id="MISRA2004-17_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="MISRA2004-17_2" origId="CODSTA-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="MISRA2004-17_3" origId="CODSTA-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="MISRA2004-17_4" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRA2004-17_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2004-17_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All structure and union types shall be complete at the end of a translation unit" id="MISRA2004-18_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unions shall not be used" id="MISRA2004-18_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRA2004-19_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRA2004-19_10" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2004-19_11_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="MISRA2004-19_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The # and ## preprocessor operators should not be used" id="MISRA2004-19_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2004-19_14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Precautions shall be taken in order to prevent the contents of a header file being included twice" id="MISRA2004-19_15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRA2004-19_16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2004-19_17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Non-standard characters should not occur in header file names in #include directives" id="MISRA2004-19_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2004-19_3" origId="MISRA-089" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid keywords and basic types in macros" id="MISRA2004-19_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Macros shall not be #define'd or #undef'd within a block" id="MISRA2004-19_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#undef shall not be used" id="MISRA2004-19_6" origId="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="A function should be used in preference to a function-like macro" id="MISRA2004-19_7" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function-like macro shall not be invoked without all of its arguments" id="MISRA2004-19_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2004-19_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_c" origId="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_d" origId="SECURITY-48_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="MISRA2004-20_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not redefine reserved words" id="MISRA2004-20_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRA2004-20_1_c" origId="CODSTA-92_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2004-20_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRA2004-20_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRA2004-20_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRA2004-20_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The validity of values passed to library functions shall be checked" id="MISRA2004-20_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="Dynamic heap memory allocation shall not be used" id="MISRA2004-20_4" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The error indicator 'errno' shall not be used" id="MISRA2004-20_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The macro offsetof, in library stddef.h, shall not be used" id="MISRA2004-20_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRA2004-20_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="MISRA2004-20_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRA2004-20_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="The input/output library stdio.h shall not be used" id="MISRA2004-20_9" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assembly language shall be encapsulated and isolated" id="MISRA2004-2_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Source code shall only use /* ... */ style comments" id="MISRA2004-2_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2004-2_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All uses of the #pragma directive shall be documented and explained" id="MISRA2004-3_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not mix bit-fields and other data within the same structure" id="MISRA2004-3_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Only those escape sequences that are defined in the ISO C standard shall be used" id="MISRA2004-4_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Trigraphs shall not be used" id="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C external identifiers should differ in the first 31 characters" id="MISRA2004-5_1_a" origId="PORT-35_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="MISRA2004-5_1_b" origId="PORT-35_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="MISRA2004-5_1_c" origId="PORT-35_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names" id="MISRA2004-5_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names as a typedef name" id="MISRA2004-5_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2004-5_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused to define a different tag" id="MISRA2004-5_4_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The name of typedef should not be the same as the name of type that is typedef'd" id="MISRA2004-5_4_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The plain char type shall be used only for the storage and use of character values" id="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="MISRA2004-6_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="typedefs to basic types should contain some digits in their name" id="MISRA2004-6_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2004" desc="typedefs should be used in place of the basic types" id="MISRA2004-6_3_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRA2004-6_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5" origId="CODSTA-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unnamed bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal constants (other than zero) shall not be used" id="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal escape sequences shall not be used" id="MISRA2004-7_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRA2004-8_11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="MISRA2004-8_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA2004-8_1_a" origId="MISRA-071_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall always have visible prototype at the function call" id="MISRA2004-8_1_b" origId="MISRA-071_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2004-8_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no definitions of objects or functions in a header file" id="MISRA2004-8_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Always declare functions at file scope" id="MISRA2004-8_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRA2004-8_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All automatic variables shall have been assigned a value before being used" id="MISRA2004-9_1" origId="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2004-9_2" origId="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arrays shall not be partially initialized" id="MISRA2004-9_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="MISRA2004-9_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="MISRA2004-9_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names" id="MISRA2004-5_6" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier name should be reused" id="MISRA2004-5_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="MISRA2004" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2004-8_10" origId="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRA2004-10_6" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No parentheses are required for the operand of a unary operator" id="MISRA2004-12_1_c" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_f" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every defined function with internal linkage shall be used" id="MISRA2008-0_1_10" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="MISRA2008" desc="Every defined function with external linkage shall be used" id="MISRA2008-0_1_10_b" origId="GLOBAL-UNUSEDFUNC" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in nonvirtual functions" id="MISRA2008-0_1_11" origId="OPT-31" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="MISRA2008-0_1_12" origId="GLOBAL-UNUSEDVIRTPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'else' block" id="MISRA2008-0_1_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2008-0_1_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'if/else/while/for' block" id="MISRA2008-0_1_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in switch statement" id="MISRA2008-0_1_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'for' loop" id="MISRA2008-0_1_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" id="MISRA2008-0_1_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" id="MISRA2008-0_1_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_a" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_aa" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_b" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_c" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_d" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_e" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_f" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_g" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_h" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_i" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_j" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_k" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_l" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_m" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_n" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_o" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_p" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_q" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_r" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_rz" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_s" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_sz" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_t" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_u" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_v" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_w" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_x" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_y" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_z" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_a" origId="OPT-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_b" origId="OPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Eliminate unused private member variables" id="MISRA2008-0_1_3_c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain non-volatile POD variables having only one use" id="MISRA2008-0_1_4" origId="GLOBAL-ONEUSEVAR" sev="2" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused type declarations" id="MISRA2008-0_1_5" origId="GLOBAL-UNUSEDTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid unused values" id="MISRA2008-0_1_6" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRA2008" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRA2008-0_1_7" origId="CODSTA-CPP-58" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8" origId="OPT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8_b" origId="OPT-32_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2008-0_1_9" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRA2008" desc="If a function generates error information, then that error information shall be tested" id="MISRA2008-0_3_2" origId="MISRA2004-16_10" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="MISRA2008-10_1_2" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRA2008-10_1_3" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="MISRA2008-10_3_1" origId="OOP-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each overriding virtual function shall be declared with the virtual keyword" id="MISRA2008-10_3_2" origId="OOP-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="MISRA2008-10_3_3" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Member data in non-POD class types shall be private" id="MISRA2008-11_0_1" origId="OOP-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under construction" id="MISRA2008-12_1_1" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="MISRA2008-12_1_3" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" id="MISRA2008-12_8_1" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="MISRA2008-12_8_2" origId="OOP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not declare non-member generic functions in associated namespaces" id="MISRA2008-14_5_1" origId="TEMPL-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="MISRA2008-14_5_2" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="MISRA2008-14_5_3" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRA2008-14_6_1" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The function shall resolve to a function declared previously in the translation unit" id="MISRA2008-14_6_2" origId="TEMPL-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one." id="MISRA2008-14_7_1" origId="GLOBAL-TEMPLNOINST" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="MISRA2008-14_7_3" origId="TEMPL-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Overloaded function templates shall not be explicitly specialized" id="MISRA2008-14_8_1" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="MISRA2008-15_0_3" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="MISRA2008-15_1_1" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be thrown explicitly" id="MISRA2008-15_1_2" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="MISRA2008-15_1_3" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_3_1" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="MISRA2008-15_3_3" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_b" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class type exception shall always be caught by reference" id="MISRA2008-15_3_5" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRA2008-15_3_6" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" id="MISRA2008-15_3_7" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRA2008-15_4_1" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class destructor shall not exit with an exception" id="MISRA2008-15_5_1" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_2" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_2_b" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="MISRA2008-15_5_3" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="MISRA2008-15_5_3_b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not throw from within destructor" id="MISRA2008-15_5_3_c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_5_3_d" origId="EXCEPT-06" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="MISRA2008-15_5_3_e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_5_3_f" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_5_3_g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_3_h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="MISRA2008-15_5_3_i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Always catch exceptions" id="MISRA2008-15_5_3_j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Properly define exit handlers" id="MISRA2008-15_5_3_k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_3_l" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#include directives in a file shall only be preceded by other preprocessor directives or comments" id="MISRA2008-16_0_1" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Macros shall only be #define'd or #undef'd in the global namespace" id="MISRA2008-16_0_2" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_0_3" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="Function-like macros shall not be defined" id="MISRA2008-16_0_4" origId="MISRA2004-19_7" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2008-16_0_5" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="MISRA2008-16_0_6" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2008-16_0_7_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" id="MISRA2008-16_0_8" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2008-16_1_1" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2008-16_1_2" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="Avoid using macro definitions" id="MISRA2008-16_2_1_a" origId="PREPROC-01" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_b" origId="PREPROC-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="MISRA2008-16_2_1_c" origId="PREPROC-11" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_d" origId="PREPROC-10_b" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_e" origId="PREPROC-10_c" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#error directive shall not be used" id="MISRA2008-16_2_1_f" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #pragma directive shall not be used" id="MISRA2008-16_2_1_g" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_2_1_h" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" id="MISRA2008-16_2_2" origId="PREPROC-12" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Include guards shall be provided" id="MISRA2008-16_2_3" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRA2008-16_2_4" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2008-16_2_6" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be at most one occurrence of the # or ## operators in a single macro definition" id="MISRA2008-16_3_1" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_b" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_d" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_e" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library macros and objects shall not be reused" id="MISRA2008-17_0_2" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library functions shall not be overridden" id="MISRA2008-17_0_3" origId="CODSTA-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2008-17_0_5" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2008-17_0_5_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The C library shall not be used" id="MISRA2008-18_0_1" origId="CODSTA-CPP-59" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_2" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_c" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_d" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;ctime> shall not be used" id="MISRA2008-18_0_4" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unbounded functions of library &lt;cstring> shall not be used" id="MISRA2008-18_0_5" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The macro offsetof shall not be used" id="MISRA2008-18_2_1" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Dynamic heap memory allocation shall not be used" id="MISRA2008-18_4_1" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;csignal> shall not be used" id="MISRA2008-18_7_1" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The signal handling facilities of &lt;csignal> shall not be used" id="MISRA2008-18_7_1_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The error indicator errno shall not be used" id="MISRA2008-19_3_1" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The stream input/output library &lt;cstdio> shall not be used" id="MISRA2008-27_0_1" origId="MISRA2004-20_9" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Different identifiers shall be typographically unambiguous" id="MISRA2008-2_10_1" origId="NAMING-47" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_3" origId="GLOBAL-UNIQUETYPEDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4" origId="GLOBAL-UNIQUETYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_a" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_c" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="MISRA2008-2_13_1" origId="CODSTA-CPP-60" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal constants (other than zero) shall not be used" id="MISRA2008-2_13_2_a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal escape sequences (other than &quot;\0&quot;) shall not be used" id="MISRA2008-2_13_2_b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="MISRA2008-2_13_3" origId="CODSTA-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Literal suffixes shall be upper case" id="MISRA2008-2_13_4" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Narrow and wide string literals shall not be concatenated" id="MISRA2008-2_13_5" origId="PB-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Trigraphs shall not be used" id="MISRA2008-2_3_1" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2008-2_7_1" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be declared at block scope" id="MISRA2008-3_1_2" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" id="MISRA2008-3_1_3" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All declarations of an object or function shall have compatible types" id="MISRA2008-3_2_1" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The One Definition Rule shall not be violated" id="MISRA2008-3_2_2" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="MISRA2008-3_2_3" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2008-3_2_4" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="MISRA2008" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2008-3_3_1" origId="MISRA-023" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="MISRA2008-3_3_2" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_a" origId="OPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="MISRA2008-3_9_1" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2008-3_9_3" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be used as an integer value" id="MISRA2008-4_10_1" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRA2008-4_10_2" origId="CODSTA-CPP-63" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="MISRA2008-4_5_1" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="MISRA2008-4_5_2" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="MISRA2008-4_5_3" origId="CODSTA-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2008-5_0_10" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The plain char type shall only be used for the storage and use of character values" id="MISRA2008-5_0_11" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="signed char and unsigned char type shall only be used for the storage and use of numeric values" id="MISRA2008-5_0_12" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="MISRA2008-5_0_13" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The first operand of a conditional-operator shall have type bool" id="MISRA2008-5_0_14" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Array indexing shall be the only form of pointer arithmetic" id="MISRA2008-5_0_15" origId="MISRA2004-17_4" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-5_0_16_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2008-5_0_16_b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2008-5_0_17" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2008-5_0_18" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="MISRA2008-5_0_20" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="MISRA2008-5_0_21" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_a" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_b" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_a" origId="MISRA2004-10_1_a" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_a" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_b" origId="MISRA2004-10_1_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_b" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8_b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="MISRA2008-5_0_9" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2008-5_14_1" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="MISRA2008-5_17_1" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma operator shall not be used" id="MISRA2008-5_18_1" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" id="MISRA2008-5_2_1" origId="CODSTA-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The &amp;&amp; operator and the || operator shall not be overloaded" id="MISRA2008-5_2_11" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma &quot;,&quot; operator shall not be overloaded" id="MISRA2008-5_2_11_b" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="MISRA2008-5_2_12" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRA2008-5_2_2" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRA2008-5_2_4" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="MISRA2008-5_2_5" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="MISRA2008-5_2_6" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" id="MISRA2008-5_2_7" origId="MISRA2004-11_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRA2008-5_2_8" origId="CODSTA-65" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="MISRA2008-5_3_1" origId="CODSTA-CPP-67" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2008-5_3_2" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary &amp; operator shall not be overloaded" id="MISRA2008-5_3_3" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="MISRA2008-5_8_1" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assignment operators shall not be used in sub-expressions" id="MISRA2008-6_2_1" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="MISRA2008-6_2_2" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="MISRA2008-6_2_3" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The statement forming the body of a switch, while, do while or for statement shall be a compound statement" id="MISRA2008-6_3_1" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="MISRA2008-6_4_1" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All if ... else if constructs shall be terminated with an else clause" id="MISRA2008-6_4_2" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_b" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_c" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_d" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_e" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2008-6_4_4" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="MISRA2008-6_4_5" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The final clause of a switch statement shall be the default-clause" id="MISRA2008-6_4_6" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of a switch statement shall not have bool type" id="MISRA2008-6_4_7" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every switch statement shall have at least one case-clause" id="MISRA2008-6_4_8" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="MISRA2008-6_5_1" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="MISRA2008-6_5_2" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall not be modified within condition or statement" id="MISRA2008-6_5_3" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="MISRA2008-6_5_4" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="MISRA2008-6_5_5" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" id="MISRA2008-6_5_6" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRA2008-6_6_1" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRA2008-6_6_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The continue statement shall only be used within a well-formed for loop" id="MISRA2008-6_6_3" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRA2008-6_6_4" origId="CODSTA-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall have a single point of exit at the end of the function" id="MISRA2008-6_6_5" origId="MISRA2004-14_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="A variable which is not modified shall be const qualified" id="MISRA2008-7_1_1" origId="CODSTA-CPP-53" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" id="MISRA2008-7_1_2_a" origId="MISRA2004-16_7" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" id="MISRA2008-7_1_2_b" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2008-7_1_2_c" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="MISRA2008-7_2_1" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="MISRA2008" desc="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="MISRA2008-7_3_1" origId="CODSTA-CPP-36" sev="2" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier main shall not be used for a function other than the global function main" id="MISRA2008-7_3_2" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unnamed namespaces in header files" id="MISRA2008-7_3_3" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives shall not be used" id="MISRA2008-7_3_4" origId="CODSTA-CPP-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="MISRA2008-7_3_5" origId="CODSTA-CPP-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="MISRA2008-7_3_6" origId="CODSTA-CPP-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembler instructions shall only be introduced using the asm declaration" id="MISRA2008-7_4_2" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembly language shall be encapsulated and isolated" id="MISRA2008-7_4_3" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="MISRA2008-7_5_1" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="MISRA2008-7_5_3" origId="PB-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="MISRA2008" desc="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="MISRA2008-8_0_1" origId="FORMAT-33" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="MISRA2008-8_3_1" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be defined using the ellipsis notation" id="MISRA2008-8_4_1" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="MISRA2008-8_4_2" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2008-8_4_3" origId="MISRA2004-16_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" id="MISRA2008-8_4_4" origId="MISRA2004-16_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All variables shall have a defined value before they are used" id="MISRA2008-8_5_1" origId="MISRA-030" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="MISRA2008-8_5_2" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arrays shall not be partially initialized" id="MISRA2008-8_5_2_b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Structures shall not be partially initialized" id="MISRA2008-8_5_2_c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="MISRA2008-8_5_3" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="const member functions shall not return non-const pointers or references to class-data" id="MISRA2008-9_3_1" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Protected member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_a" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Public member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_b" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="MISRA2008-9_3_3" origId="CODSTA-CPP-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Unions shall not be used" id="MISRA2008-9_5_1" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="MISRA2008-9_6_2" origId="CODSTA-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall not have enum type" id="MISRA2008-9_6_3" origId="CODSTA-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2008-9_6_4" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Classes should not be derived from virtual bases" id="MISRA2008-10_1_1" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="MISRA2008-10_2_1" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRA2008-12_1_2" origId="PB-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="MISRA2008-14_8_2" origId="TEMPL-08" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="An exception object should not have pointer type" id="MISRA2008-15_0_2" origId="EXCEPT-09" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_3_2" origId="EXCEPT-06" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The \ character should not occur in a header file name" id="MISRA2008-16_2_5" origId="NAMING-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The # and ## operators should not be used" id="MISRA2008-16_3_2" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Digraphs should not be used" id="MISRA2008-2_5_1" origId="CODSTA-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA2008" desc="typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRA2008-3_9_2" origId="MISRA-013" sev="4" total="18" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2008-5_19_1_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2008-5_19_1_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2008-5_2_10" origId="MISRA2004-12_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="MISRA2008-5_2_3" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast should not convert a pointer type to an integral type" id="MISRA2008-5_2_9" origId="MISRA2004-11_3_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions should not call themselves, either directly or indirectly" id="MISRA2008-7_5_4" origId="MISRA2004-16_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-0_3_1_a" origId="BD-PB-ARRAY" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid null pointer dereferencing" id="MISRA2008-0_3_1_b" origId="BD-PB-NP" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid division by zero" id="MISRA2008-0_3_1_c" origId="BD-PB-ZERO" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2008-0_3_1_d" origId="BD-PB-OVERFFMT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2008-0_3_1_e" origId="BD-PB-OVERFNZT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not check for null after dereferencing" id="MISRA2008-0_3_1_f" origId="BD-PB-DEREF" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when reading from a buffer" id="MISRA2008-0_3_1_g" origId="BD-PB-OVERFRD" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when writing to a buffer" id="MISRA2008-0_3_1_h" origId="BD-PB-OVERFWR" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2008-0_3_1_i" origId="BD-PB-PTRSUB" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not compare two unrelated pointers" id="MISRA2008-0_3_1_j" origId="BD-PB-PTRCMP" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Use of floating-point arithmetic shall be documented" id="MISRA2008-0_4_2" origId="COMMENT-10" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All uses of the #pragma directive shall be documented" id="MISRA2008-16_6_1" origId="MISRA2004-3_4" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All usage of assembler shall be documented" id="MISRA2008-7_4_1" origId="COMMENT-09" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Precautions shall be taken in order to prevent the contents of a header file being included more than once" id="MISRA2012-DIR-4_10" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Validate values passed to library functions" id="MISRA2012-DIR-4_11" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-DIR" desc="Dynamic memory allocation shall not be used" id="MISRA2012-DIR-4_12" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid tainted data in array indexes" id="MISRA2012-DIR-4_14_a" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against integer overflow/underflow from tainted data" id="MISRA2012-DIR-4_14_b" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer read overflow from tainted data" id="MISRA2012-DIR-4_14_c" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer write overflow from tainted data" id="MISRA2012-DIR-4_14_d" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against command injection" id="MISRA2012-DIR-4_14_e" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against file name injection" id="MISRA2012-DIR-4_14_f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against SQL injection" id="MISRA2012-DIR-4_14_g" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Prevent buffer overflows from tainted data" id="MISRA2012-DIR-4_14_h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRA2012-DIR-4_14_i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against environment injection" id="MISRA2012-DIR-4_14_j" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid printing tainted data on the output console" id="MISRA2012-DIR-4_14_k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Exclude unsanitized user input from format strings" id="MISRA2012-DIR-4_14_l" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid accessing arrays out of bounds" id="MISRA2012-DIR-4_1_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid null pointer dereferencing" id="MISRA2012-DIR-4_1_b" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid division by zero" id="MISRA2012-DIR-4_1_c" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2012-DIR-4_1_d" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-DIR-4_1_e" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not check for null after dereferencing" id="MISRA2012-DIR-4_1_f" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when reading from a buffer" id="MISRA2012-DIR-4_1_g" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when writing to a buffer" id="MISRA2012-DIR-4_1_h" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2012-DIR-4_1_i" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not compare two unrelated pointers" id="MISRA2012-DIR-4_1_j" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid integer overflows" id="MISRA2012-DIR-4_1_k" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Assembly language shall be encapsulated and isolated" id="MISRA2012-DIR-4_3" origId="MISRA2004-2_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Consistently check the returned value of non-void functions" id="MISRA2012-DIR-4_7_a" origId="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Always check the returned value of non-void function" id="MISRA2012-DIR-4_7_b" origId="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-DIR-4_13_a" origId="BD-RES-LEAKS" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not use resources that have been freed" id="MISRA2012-DIR-4_13_b" origId="BD-RES-FREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not free resources using invalid pointers" id="MISRA2012-DIR-4_13_c" origId="BD-RES-INVFREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not abandon unreleased locks" id="MISRA2012-DIR-4_13_d" origId="BD-TRS-LOCK" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid double locking" id="MISRA2012-DIR-4_13_e" origId="BD-TRS-DLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not release a lock that has not been acquired" id="MISRA2012-DIR-4_13_f" origId="BD-TRS-REVLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="All usage of assembly language should be documented" id="MISRA2012-DIR-4_2" origId="COMMENT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2012-DIR-4_4" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRA2012-DIR-4_5" origId="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs to basic types should contain some digits in their name" id="MISRA2012-DIR-4_6_a" origId="MISRA2004-6_3" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs should be used in place of the basic types" id="MISRA2012-DIR-4_6_b" origId="MISRA2004-6_3_b" sev="4" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRA2012-DIR-4_6_c" origId="CODSTA-155" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRA2012-DIR-4_8" origId="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2012-DIR" desc="A function should be used in preference to a function-like macro where they are interchangeable" id="MISRA2012-DIR-4_9" origId="MISRA2004-19_7" sev="4" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRA2012-RULE-12_5" origId="CODSTA-182" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not be declared implicitly" id="MISRA2012-RULE-17_3" origId="MISRA-071_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4" origId="MISRA2004-16_8" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4_b" origId="MISRA2004-16_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRA2012-RULE-17_6" origId="CODSTA-160" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_a" origId="MISRA2004-18_2" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_b" origId="MISRA2004-18_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_c" origId="BD-PB-OVERLAP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any value passed to a function in &lt;ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF'" id="MISRA2012-RULE-21_13" origId="BD-API-CTYPE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-RULE-21_17_a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-21_17_b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'size_t' argument passed to any function in &lt;string.h> shall have an appropriate value" id="MISRA2012-RULE-21_18" origId="BD-API-STRSIZE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRA2012-RULE-21_19_a" origId="CODSTA-185_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRA2012-RULE-21_19_b" origId="CODSTA-185_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRA2012-RULE-21_20" origId="BD-PB-INVRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-22_2_a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not free resources using invalid pointers" id="MISRA2012-RULE-22_2_b" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid writing to a stream which has been opened as read only" id="MISRA2012-RULE-22_4" origId="BD-PB-WRROS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced" id="MISRA2012-RULE-22_5_a" origId="CODSTA-166_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRA2012-RULE-22_5_b" origId="CODSTA-166_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a pointer to a FILE shall not be used after the associated stream has been closed" id="MISRA2012-RULE-22_6" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-9_1" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRA2012-RULE-10_1_a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRA2012-RULE-10_1_d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRA2012-RULE-10_1_e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator" id="MISRA2012-RULE-10_1_f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRA2012-RULE-10_1_g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRA2012-RULE-10_2" origId="CODSTA-162" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRA2012-RULE-10_3_a" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRA2012-RULE-10_3_b" origId="CODSTA-163_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRA2012-RULE-10_4_a" origId="CODSTA-164_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRA2012-RULE-10_4_b" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRA2012-RULE-10_6" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_a" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_b" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRA2012-RULE-10_8" origId="CODSTA-152" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_a" origId="CODSTA-124_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_b" origId="CODSTA-124_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRA2012-RULE-11_2" origId="CODSTA-125" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRA2012-RULE-11_3" origId="CODSTA-126" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRA2012-RULE-11_6" origId="CODSTA-129_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRA2012-RULE-11_7" origId="CODSTA-130" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not remove any const or volatile qualification from the type pointed to by a pointer" id="MISRA2012-RULE-11_8" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_a" origId="CODSTA-CPP-63" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_b" origId="CODSTA-131" sev="2" total="19" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" id="MISRA2012-RULE-12_2" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Initializer lists shall not contain persistent side effects" id="MISRA2012-RULE-13_1_a" origId="CODSTA-141_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-13_2_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-13_2_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-13_2_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-13_2_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-13_2_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-13_2_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-13_2_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" id="MISRA2012-RULE-13_5" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_c" origId="CODSTA-137" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRA2012-RULE-14_1_a" origId="CODSTA-167_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRA2012-RULE-14_1_b" origId="CODSTA-167_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRA2012-RULE-14_2_a" origId="CODSTA-168" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The first clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_b" origId="CODSTA-169_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_c" origId="CODSTA-169_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The third clause of a 'for' statement shall be well-formed" id="MISRA2012-RULE-14_2_d" origId="CODSTA-169_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Controlling expressions shall not be invariant" id="MISRA2012-RULE-14_3_zc" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" id="MISRA2012-RULE-14_4" origId="MISRA2004-13_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement shall jump to a label declared later in the same function" id="MISRA2012-RULE-15_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" id="MISRA2012-RULE-15_3" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All 'if ... else if' constructs shall be terminated with an 'else' statement" id="MISRA2012-RULE-15_7" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2012-RULE-16_1_a" origId="MISRA2004-15_0_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_1_b" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2012-RULE-16_1_c" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2012-RULE-16_1_d" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Always provide a default branch for switch statements" id="MISRA2012-RULE-16_1_e" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_1_f" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_1_g" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_1_h" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_2" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_a" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_b" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every 'switch' statement shall have a 'default' label" id="MISRA2012-RULE-16_4_a" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_4_b" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A default label shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_5" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_6" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_b" origId="MISRA2004-15_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_a" origId="CODSTA-136_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_b" origId="CODSTA-136_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2012-RULE-17_2" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRA2012-RULE-17_5" origId="CODSTA-134" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_a" origId="CODSTA-122_a" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_b" origId="CODSTA-122_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays out of bounds" id="MISRA2012-RULE-18_1_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays and pointers out of bounds" id="MISRA2012-RULE-18_1_b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2012-RULE-18_1_c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2012-RULE-18_2" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2012-RULE-18_3" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2012-RULE-18_6_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2012-RULE-18_6_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Flexible array members shall not be declared" id="MISRA2012-RULE-18_7" origId="CODSTA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Variable-length array types shall not be used" id="MISRA2012-RULE-18_8" origId="CODSTA-112" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_a_c90" origId="CODSTA-174_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_a_c99" origId="CODSTA-174_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_b_c90" origId="CODSTA-174_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_b_c99" origId="CODSTA-174_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid division by zero" id="MISRA2012-RULE-1_3_a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-1_3_b" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-1_3_c" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when reading from a buffer" id="MISRA2012-RULE-1_3_d" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-1_3_e" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-1_3_f" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-1_3_g" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-1_3_h" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-1_3_i" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-1_3_j" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-1_3_k" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-1_3_l" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not return a pointer or reference to a non-static local object" id="MISRA2012-RULE-1_3_m" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="MISRA2012-RULE-1_3_n" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRA2012-RULE-1_3_o" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="MISRA2012-RULE-1_4_d" origId="CODSTA-214" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="MISRA2012-RULE-1_4_e" origId="CODSTA-209" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Thread_local' storage class specifier should not be used" id="MISRA2012-RULE-1_4_f" origId="CODSTA-210" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="MISRA2012-RULE-1_4_g" origId="CODSTA-211" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRA2012-RULE-1_4_j" origId="CODSTA-215" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'rsize_t' type should not be used" id="MISRA2012-RULE-1_4_k" origId="CODSTA-212" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'errno_t' type should not be used" id="MISRA2012-RULE-1_4_l" origId="CODSTA-217" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRA2012-RULE-1_4_m" origId="CODSTA-218" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRA2012-RULE-1_4_n" origId="CODSTA-219" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRA2012-RULE-20_11" origId="PREPROC-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRA2012-RULE-20_12" origId="PREPROC-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A line whose first token is # shall be a valid preprocessing directive" id="MISRA2012-RULE-20_13" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" id="MISRA2012-RULE-20_14" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_a" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_b" origId="NAMING-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2012-RULE-20_3" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_a" origId="CODSTA-133_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_b" origId="CODSTA-133_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Tokens that look like a preprocessing directive shall not occur within a macro argument" id="MISRA2012-RULE-20_6" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" id="MISRA2012-RULE-20_7" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRA2012-RULE-20_8" origId="PREPROC-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" id="MISRA2012-RULE-20_9_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;time.h> shall not be used" id="MISRA2012-RULE-21_10" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRA2012-RULE-21_11" origId="CODSTA-108" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features provided by &lt;fenv.h> should not be used" id="MISRA2012-RULE-21_12" origId="CODSTA-109" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library function 'memcmp' shall not be used to compare null-terminated strings" id="MISRA2012-RULE-21_14" origId="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRA2012-RULE-21_15" origId="CODSTA-183" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRA2012-RULE-21_16" origId="CODSTA-184" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2012-RULE-21_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code)" id="MISRA2012-RULE-21_1_b" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code)" id="MISRA2012-RULE-21_1_c" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2012-RULE-21_1_d" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_21" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with name which starts with underscore shall not be declared" id="MISRA2012-RULE-21_2_a" origId="MISRA2004-20_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C90 code)" id="MISRA2012-RULE-21_2_b" origId="MISRA2004-20_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C99 code)" id="MISRA2012-RULE-21_2_c" origId="MISRA2004-20_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_3" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_a" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library input/output functions shall not be used" id="MISRA2012-RULE-21_6" origId="CODSTA-110" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_7" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions 'quick_exit' and '_Exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_9" origId="CODSTA-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-RULE-22_1" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function" id="MISRA2012-RULE-22_10" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The same file shall not be opened for read and write access at the same time on different stream" id="MISRA2012-RULE-22_3" origId="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro 'EOF' should be compared with the unmodified return value from the Standard Library function" id="MISRA2012-RULE-22_7" origId="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be set to zero prior to a call to an errno-setting-function" id="MISRA2012-RULE-22_8" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be tested against zero after calling an errno-setting-function" id="MISRA2012-RULE-22_9" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'else' block" id="MISRA2012-RULE-2_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2012-RULE-2_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'if', 'else', 'while', 'for' block" id="MISRA2012-RULE-2_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'switch' statement" id="MISRA2012-RULE-2_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'for' loop" id="MISRA2012-RULE-2_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2012-RULE-2_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while'/'for'/'do...while' loop" id="MISRA2012-RULE-2_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2012-RULE-2_2_a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid unused values" id="MISRA2012-RULE-2_2_b" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence // shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_b" origId="COMMENT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRA2012-RULE-3_1_c" origId="COMMENT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Line-splicing shall not be used in // comments" id="MISRA2012-RULE-3_2" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRA2012-RULE-4_1" origId="CODSTA-117" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="External identifiers shall be distinct" id="MISRA2012-RULE-5_1" origId="CODSTA-178" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_a_c90" origId="CODSTA-179_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_a_c99" origId="CODSTA-179_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_b_c90" origId="CODSTA-179_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_b_c99" origId="CODSTA-179_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRA2012-RULE-5_4_a_c90" origId="CODSTA-171_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRA2012-RULE-5_4_a_c99" origId="CODSTA-171_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRA2012-RULE-5_4_b_c90" origId="CODSTA-172_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRA2012-RULE-5_4_b_c99" origId="CODSTA-172_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c90)" id="MISRA2012-RULE-5_5_c90" origId="CODSTA-170_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c99)" id="MISRA2012-RULE-5_5_c99" origId="CODSTA-170_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_a" origId="MISRA2004-5_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_b" origId="MISRA2004-5_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2012-RULE-5_7_a" origId="MISRA2004-5_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall not be reused to define a different tag" id="MISRA2012-RULE-5_7_b" origId="MISRA2004-5_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with external linkage shall be unique" id="MISRA2012-RULE-5_8" origId="CODSTA-180" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Bit-fields shall only be declared with an appropriate type" id="MISRA2012-RULE-6_1" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Single-bit named bit fields shall not be of a signed type" id="MISRA2012-RULE-6_2" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal constants shall not be used" id="MISRA2012-RULE-7_1" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type" id="MISRA2012-RULE-7_2" origId="MISRA2004-10_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The lowercase character 'l' shall not be used in a literal suffix" id="MISRA2012-RULE-7_3" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" id="MISRA2012-RULE-7_4" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An inline function shall be declared with the static storage class" id="MISRA2012-RULE-8_10" origId="CODSTA-120" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRA2012-RULE-8_12" origId="PB-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The restrict type qualifier shall not be used" id="MISRA2012-RULE-8_14" origId="CODSTA-121" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_a" origId="MISRA2004-8_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_b" origId="MISRA2004-8_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2012-RULE-8_2_a" origId="MISRA2004-16_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall have named parameters" id="MISRA2012-RULE-8_2_b" origId="CODSTA-158" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall be in prototype form" id="MISRA2012-RULE-8_2_c" origId="CODSTA-159" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2012-RULE-8_3_a" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2012-RULE-8_3_b" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All declarations of an object or function shall have compatible types" id="MISRA2012-RULE-8_3_c" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_a" origId="CODSTA-118" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_b" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRA2012-RULE-8_5" origId="CODSTA-154" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2012-RULE-8_6" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" id="MISRA2012-RULE-8_8" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2012-RULE-9_2" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Arrays shall not be partially initialized" id="MISRA2012-RULE-9_3" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An element of an object shall not be initialized more than once" id="MISRA2012-RULE-9_4" origId="PB-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRA2012-RULE-9_5" origId="CODSTA-186" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The cast operation to essentially enumeration type is not allowed" id="MISRA2012-RULE-10_5_a" origId="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not cast from or to essentially Boolean type" id="MISRA2012-RULE-10_5_b" origId="CODSTA-165_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use casts between essentially character types and essentially floating types" id="MISRA2012-RULE-10_5_c" origId="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRA2012-RULE-11_4" origId="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRA2012-RULE-11_5" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2012-RULE-12_1_a" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2012-RULE-12_1_b" origId="MISRA2004-12_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Parenthesis shall be used with 'sizeof' statement" id="MISRA2012-RULE-12_1_c" origId="FORMAT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The comma operator should not be used" id="MISRA2012-RULE-12_3" origId="MISRA2004-12_10" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2012-RULE-12_4_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2012-RULE-12_4_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" id="MISRA2012-RULE-13_3" origId="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The result of an assignment operator should not be used" id="MISRA2012-RULE-13_4" origId="CODSTA-138" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement should not be used" id="MISRA2012-RULE-15_1" origId="MISRA2004-14_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no more than one break or goto statement used to terminate any iteration statement" id="MISRA2012-RULE-15_4" origId="CODSTA-79" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should have a single point of exit at the end" id="MISRA2012-RULE-15_5" origId="MISRA2004-14_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function parameter should not be modified" id="MISRA2012-RULE-17_8" origId="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRA2012-RULE-18_4" origId="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declarations should contain no more than two levels of pointer nesting" id="MISRA2012-RULE-18_5" origId="MISRA2004-17_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The union keyword should not be used" id="MISRA2012-RULE-19_2" origId="CODSTA-111" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#include directives should only be preceded by preprocessor directives or comments" id="MISRA2012-RULE-20_1" origId="MISRA2004-19_1" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The # and ## preprocessor operators should not be used" id="MISRA2012-RULE-20_10" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#undef should not be used" id="MISRA2012-RULE-20_5" origId="PREPROC-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused type declarations" id="MISRA2012-RULE-2_3_a" origId="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused type declarations" id="MISRA2012-RULE-2_3_b" origId="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused local tag declarations" id="MISRA2012-RULE-2_4_a" origId="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused tag declarations" id="MISRA2012-RULE-2_4_b" origId="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused macro definitions" id="MISRA2012-RULE-2_5" origId="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused label declarations" id="MISRA2012-RULE-2_6" origId="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no unused parameters in functions" id="MISRA2012-RULE-2_7" origId="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Trigraphs should not be used" id="MISRA2012-RULE-4_2" origId="MISRA2004-4_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRA2012-RULE-8_11" origId="MISRA2004-8_12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_a" origId="MISRA2004-16_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRA2012-RULE-8_7" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object should be defined at block scope if its identifier only appears in a single function" id="MISRA2012-RULE-8_9" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-DIR_4_1-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid null pointer dereferencing" id="MISRAC2012-DIR_4_1-b" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid division by zero" id="MISRAC2012-DIR_4_1-c" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRAC2012-DIR_4_1-d" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-DIR_4_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not check for null after dereferencing" id="MISRAC2012-DIR_4_1-f" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-DIR_4_1-g" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-DIR_4_1-h" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-DIR_4_1-i" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not compare two unrelated pointers" id="MISRAC2012-DIR_4_1-j" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid integer overflows" id="MISRAC2012-DIR_4_1-k" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_10" desc="Use multiple include guards" id="MISRAC2012-DIR_4_10-a" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_11" desc="Validate values passed to library functions" id="MISRAC2012-DIR_4_11-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-DIR_4_12" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-DIR_4_12-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Ensure resources are freed" id="MISRAC2012-DIR_4_13-a" origId="BD-RES-LEAKS" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not use resources that have been freed" id="MISRAC2012-DIR_4_13-b" origId="BD-RES-FREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not free resources using invalid pointers" id="MISRAC2012-DIR_4_13-c" origId="BD-RES-INVFREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not abandon unreleased locks" id="MISRAC2012-DIR_4_13-d" origId="BD-TRS-LOCK" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Avoid double locking" id="MISRAC2012-DIR_4_13-e" origId="BD-TRS-DLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not release a lock that has not been acquired" id="MISRAC2012-DIR_4_13-f" origId="BD-TRS-REVLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid tainted data in array indexes" id="MISRAC2012-DIR_4_14-a" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against integer overflow/underflow from tainted data" id="MISRAC2012-DIR_4_14-b" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer read overflow from tainted data" id="MISRAC2012-DIR_4_14-c" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer write overflow from tainted data" id="MISRAC2012-DIR_4_14-d" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against command injection" id="MISRAC2012-DIR_4_14-e" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against file name injection" id="MISRAC2012-DIR_4_14-f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against SQL injection" id="MISRAC2012-DIR_4_14-g" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Prevent buffer overflows from tainted data" id="MISRAC2012-DIR_4_14-h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRAC2012-DIR_4_14-i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against environment injection" id="MISRAC2012-DIR_4_14-j" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid printing tainted data on the output console" id="MISRAC2012-DIR_4_14-k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Exclude unsanitized user input from format strings" id="MISRAC2012-DIR_4_14-l" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_2" desc="All usage of assembler shall be documented" id="MISRAC2012-DIR_4_2-a" origId="COMMENT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_3" desc="Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3-a" origId="MISRA2004-2_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4-a" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_5" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5-a" origId="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs to basic types should contain some digits in their name" id="MISRAC2012-DIR_4_6-a" origId="MISRA2004-6_3" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs should be used in place of the basic types" id="MISRAC2012-DIR_4_6-b" origId="MISRA2004-6_3_b" sev="4" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRAC2012-DIR_4_6-c" origId="CODSTA-155" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Consistently check the returned value of non-void functions" id="MISRAC2012-DIR_4_7-a" origId="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Always check the returned value of non-void function" id="MISRAC2012-DIR_4_7-b" origId="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_8" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8-a" origId="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRAC2012-DIR_4_9" desc="A function should be used in preference to a function-like macro" id="MISRAC2012-DIR_4_9-a" origId="MISRA2004-19_7" sev="4" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_2" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2-a" origId="CODSTA-162" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRAC2012-RULE_10_3-a" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRAC2012-RULE_10_3-b" origId="CODSTA-163_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4-a" origId="CODSTA-164_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRAC2012-RULE_10_4-b" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="The cast operation to essentially enumeration type is not allowed" id="MISRAC2012-RULE_10_5-a" origId="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not cast from or to essentially Boolean type" id="MISRAC2012-RULE_10_5-b" origId="CODSTA-165_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not use casts between essentially character types and essentially floating types" id="MISRAC2012-RULE_10_5-c" origId="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_6" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6-a" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-a" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-b" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_8" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8-a" origId="CODSTA-152" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="MISRAC2012-RULE_11_1-a" origId="CODSTA-124_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between non compatible pointer to a function types" id="MISRAC2012-RULE_11_1-b" origId="CODSTA-124_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_2" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2-a" origId="CODSTA-125" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_3" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3-a" origId="CODSTA-126" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_4" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4-a" origId="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_5" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5-a" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_6" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6-a" origId="CODSTA-129_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_7" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7-a" origId="CODSTA-130" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_8" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRAC2012-RULE_11_8-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRAC2012-RULE_11_9-a" origId="CODSTA-CPP-63" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="MISRAC2012-RULE_11_9-b" origId="CODSTA-131" sev="2" total="19" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="Use parentheses unless all operators in the expression are the same" id="MISRAC2012-RULE_12_1-a" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRAC2012-RULE_12_1-b" origId="MISRA2004-12_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRAC2012-RULE_12_1-c" origId="FORMAT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRAC2012-RULE_12_2-a" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_3" desc="The comma operator shall not be used" id="MISRAC2012-RULE_12_3-a" origId="MISRA2004-12_10" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRAC2012-RULE_12_4-a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRAC2012-RULE_12_4-b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_5" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5-a" origId="CODSTA-182" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_1" desc="Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1-a" origId="CODSTA-141_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_13_2-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_13_2-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_13_2-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_13_2-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_13_2-e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_13_2-f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_13_2-g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_3" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="MISRAC2012-RULE_13_3-a" origId="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_4" desc="The result of a built-in assignment operator should not be used" id="MISRAC2012-RULE_13_4-a" origId="CODSTA-138" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_5" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRAC2012-RULE_13_5-a" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRAC2012-RULE_13_6-a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The function call shall not be the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-c" origId="CODSTA-137" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRAC2012-RULE_14_1-a" origId="CODSTA-167_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRAC2012-RULE_14_1-b" origId="CODSTA-167_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRAC2012-RULE_14_2-a" origId="CODSTA-168" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The first clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-b" origId="CODSTA-169_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The second clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-c" origId="CODSTA-169_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The third clause of a 'for' statement shall be well-formed" id="MISRAC2012-RULE_14_2-d" origId="CODSTA-169_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_3" desc="Avoid conditions that always evaluate to the same value" id="MISRAC2012-RULE_14_3-ac" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" origId="MISRA2004-13_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_1" desc="The goto statement shall not be used" id="MISRAC2012-RULE_15_1-a" origId="MISRA2004-14_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_2" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRAC2012-RULE_15_2-a" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_3" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRAC2012-RULE_15_3-a" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_4" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRAC2012-RULE_15_4-a" origId="CODSTA-79" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" origId="MISRA2004-14_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRAC2012-RULE_15_6-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="'if' and 'else' should be followed by a compound statement" id="MISRAC2012-RULE_15_6-b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_7" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRAC2012-RULE_15_7-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRAC2012-RULE_16_1-a" origId="MISRA2004-15_0_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_1-b" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_1-c" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_1-d" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_1-e" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_1-f" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_1-g" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_1-h" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2-a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_3-a" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_3-b" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_4-a" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_4-b" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_5" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5-a" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_6" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6-a" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-b" origId="MISRA2004-15_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRAC2012-RULE_17_1-a" origId="CODSTA-136_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="MISRAC2012-RULE_17_1-b" origId="CODSTA-136_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_2" desc="Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2-a" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_3" desc="Functions shall always have visible prototype at the function call" id="MISRAC2012-RULE_17_3-a" origId="MISRA-071_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-a" origId="MISRA2004-16_8" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-b" origId="MISRA2004-16_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_5" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5-a" origId="CODSTA-134" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_6" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRAC2012-RULE_17_6-a" origId="CODSTA-160" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-a" origId="CODSTA-122_a" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-b" origId="CODSTA-122_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_8" desc="A function parameter should not be modified" id="MISRAC2012-RULE_17_8-a" origId="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-RULE_18_1-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays and pointers out of bounds" id="MISRAC2012-RULE_18_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRAC2012-RULE_18_1-c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-RULE_18_2-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_3" desc="Do not compare two unrelated pointers" id="MISRAC2012-RULE_18_3-a" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_4" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4-a" origId="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_5" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRAC2012-RULE_18_5-a" origId="MISRA2004-17_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_18_6-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_18_6-b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_7" desc="Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7-a" origId="CODSTA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_8" desc="Variable-length array types shall not be used" id="MISRAC2012-RULE_18_8-a" origId="CODSTA-112" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-a" origId="MISRA2004-18_2" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-b" origId="MISRA2004-18_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1-c" origId="BD-PB-OVERLAP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_2" desc="The union keyword should not be used" id="MISRAC2012-RULE_19_2-a" origId="CODSTA-111" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-a" origId="CODSTA-174_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-b" origId="CODSTA-174_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-c" origId="CODSTA-174_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-d" origId="CODSTA-174_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid division by zero" id="MISRAC2012-RULE_1_3-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid use before initialization" id="MISRAC2012-RULE_1_3-b" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_1_3-c" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-RULE_1_3-d" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_1_3-e" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_1_3-f" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_1_3-g" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_1_3-h" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_1_3-i" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_1_3-j" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_1_3-k" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_1_3-l" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_1_3-m" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_1_3-n" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRAC2012-RULE_1_3-o" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="MISRAC2012-RULE_1_4-d" origId="CODSTA-214" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="MISRAC2012-RULE_1_4-e" origId="CODSTA-209" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Thread_local' storage class specifier should not be used" id="MISRAC2012-RULE_1_4-f" origId="CODSTA-210" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="MISRAC2012-RULE_1_4-g" origId="CODSTA-211" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRAC2012-RULE_1_4-j" origId="CODSTA-215" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'rsize_t' type should not be used" id="MISRAC2012-RULE_1_4-k" origId="CODSTA-212" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'errno_t' type should not be used" id="MISRAC2012-RULE_1_4-l" origId="CODSTA-217" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRAC2012-RULE_1_4-m" origId="CODSTA-218" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRAC2012-RULE_1_4-n" origId="CODSTA-219" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRAC2012-RULE_20_1-a" origId="MISRA2004-19_1" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_10" desc="The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10-a" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_11" desc="A macro parameter immediately following a # operator shall not immediately be followed by or preceded by a ## operator" id="MISRAC2012-RULE_20_11-a" origId="PREPROC-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_12" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12-a" origId="PREPROC-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_13" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRAC2012-RULE_20_13-a" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_14" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRAC2012-RULE_20_14-a" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRAC2012-RULE_20_2-a" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The \ character should not occur in a header file name" id="MISRAC2012-RULE_20_2-b" origId="NAMING-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_3" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3-a" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C90" id="MISRAC2012-RULE_20_4-a" origId="CODSTA-133_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C99" id="MISRAC2012-RULE_20_4-b" origId="CODSTA-133_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_5" desc="#undef shall not be used" id="MISRAC2012-RULE_20_5-a" origId="PREPROC-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_6" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRAC2012-RULE_20_6-a" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRAC2012-RULE_20_7" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRAC2012-RULE_20_7-a" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_8" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8-a" origId="PREPROC-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_9" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRAC2012-RULE_20_9-b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRAC2012-RULE_21_1-a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRAC2012-RULE_21_1-b" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="MISRAC2012-RULE_21_1-c" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define nor #undef identifier 'defined'" id="MISRAC2012-RULE_21_1-d" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_10" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="MISRAC2012-RULE_21_10-a" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRAC2012-RULE_21_11-a" origId="CODSTA-108" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The features provided by &lt;fenv.h> should not be used" id="MISRAC2012-RULE_21_12-a" origId="CODSTA-109" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_13" desc="Do not pass incorrect values to ctype.h library functions" id="MISRAC2012-RULE_21_13-a" origId="BD-API-CTYPE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_14" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14-a" origId="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_15" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15-a" origId="CODSTA-183" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_16" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16-a" origId="CODSTA-184" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-RULE_21_17-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_21_17-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_18" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="MISRAC2012-RULE_21_18-a" origId="BD-API-STRSIZE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19-a" origId="CODSTA-185_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRAC2012-RULE_21_19-b" origId="CODSTA-185_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRAC2012-RULE_21_2-a" origId="MISRA2004-20_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRAC2012-RULE_21_2-b" origId="MISRA2004-20_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRAC2012-RULE_21_2-c" origId="MISRA2004-20_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_20" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRAC2012-RULE_21_20-a" origId="BD-PB-INVRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_21" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_21-a" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_3" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-RULE_21_3-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRAC2012-RULE_21_4-a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRAC2012-RULE_21_4-b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="MISRAC2012-RULE_21_5-a" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_6" desc="The Standard Library input/output functions shall not be used" id="MISRAC2012-RULE_21_6-a" origId="CODSTA-110" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_7" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="MISRAC2012-RULE_21_7-a" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-a" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_9" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRAC2012-RULE_21_9-a" origId="CODSTA-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_22_1" desc="Ensure resources are freed" id="MISRAC2012-RULE_22_1-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_2-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not free resources using invalid pointers" id="MISRAC2012-RULE_22_2-b" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_3" desc="The same file shall not be opened for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3-a" origId="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_4" desc="Avoid writing to a stream which has been opened as read only" id="MISRAC2012-RULE_22_4-a" origId="BD-PB-WRROS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5-a" origId="CODSTA-166_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRAC2012-RULE_22_5-b" origId="CODSTA-166_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_6" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_6-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_7" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="MISRAC2012-RULE_22_7-a" origId="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_8" desc="Properly use errno value" id="MISRAC2012-RULE_22_8-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRAC2012-RULE_2_1-a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRAC2012-RULE_2_1-b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRAC2012-RULE_2_1-c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in switch statement" id="MISRAC2012-RULE_2_1-d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in 'for' loop" id="MISRAC2012-RULE_2_1-e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRAC2012-RULE_2_1-f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRAC2012-RULE_2_1-g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRAC2012-RULE_2_2-a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="Avoid unused values" id="MISRAC2012-RULE_2_2-b" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A function should not contain unused type declarations" id="MISRAC2012-RULE_2_3-a" origId="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A source file should not contain unused type declarations" id="MISRAC2012-RULE_2_3-b" origId="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A function should not contain unused local tag declarations" id="MISRAC2012-RULE_2_4-a" origId="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A source file should not contain unused tag declarations" id="MISRAC2012-RULE_2_4-b" origId="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_5" desc="A source file should not contain unused macro definitions" id="MISRAC2012-RULE_2_5-a" origId="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_6" desc="A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6-a" origId="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_7" desc="There should be no unused parameters in functions" id="MISRAC2012-RULE_2_7-a" origId="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence // shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-b" origId="COMMENT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRAC2012-RULE_3_1-c" origId="COMMENT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_2" desc="Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2-a" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_1" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1-a" origId="CODSTA-117" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_2" desc="Trigraphs shall not be used" id="MISRAC2012-RULE_4_2-a" origId="MISRA2004-4_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_1" desc="External identifiers shall be distinct" id="MISRAC2012-RULE_5_1-a" origId="CODSTA-178" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-a" origId="CODSTA-179_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-b" origId="CODSTA-179_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-c" origId="CODSTA-179_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-d" origId="CODSTA-179_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRAC2012-RULE_5_3-a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRAC2012-RULE_5_3-b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRAC2012-RULE_5_4-a" origId="CODSTA-171_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRAC2012-RULE_5_4-b" origId="CODSTA-171_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRAC2012-RULE_5_4-c" origId="CODSTA-172_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRAC2012-RULE_5_4-d" origId="CODSTA-172_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="MISRAC2012-RULE_5_5-a" origId="CODSTA-170_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="MISRAC2012-RULE_5_5-b" origId="CODSTA-170_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="Do not reuse typedef names" id="MISRAC2012-RULE_5_6-a" origId="MISRA2004-5_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="Do not reuse typedef names as a typedef name" id="MISRAC2012-RULE_5_6-b" origId="MISRA2004-5_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall not be reused for other purpose within the program" id="MISRAC2012-RULE_5_7-a" origId="MISRA2004-5_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall not be reused to define a different tag" id="MISRAC2012-RULE_5_7-b" origId="MISRA2004-5_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define objects or functions with external linkage shall be unique" id="MISRAC2012-RULE_5_8-a" origId="CODSTA-180" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="No object or function identifier with static storage duration should be reused" id="MISRAC2012-RULE_5_9-a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="No object or function identifier with static storage duration should be reused" id="MISRAC2012-RULE_5_9-b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRAC2012-RULE_6_1-a" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_2" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRAC2012-RULE_6_2-a" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_1" desc="Octal constants (other than zero) shall not be used" id="MISRAC2012-RULE_7_1-a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_2" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRAC2012-RULE_7_2-a" origId="MISRA2004-10_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_3" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="MISRAC2012-RULE_7_3-a" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_4" desc="A string literal shall not be modified" id="MISRAC2012-RULE_7_4-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-a" origId="MISRA2004-8_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-b" origId="MISRA2004-8_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_10" desc="An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10-a" origId="CODSTA-120" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_11" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="MISRAC2012-RULE_8_11-a" origId="MISRA2004-8_12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_12" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12-a" origId="PB-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-a" origId="MISRA2004-16_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_14" desc="The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14-a" origId="CODSTA-121" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRAC2012-RULE_8_2-a" origId="MISRA2004-16_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall have named parameters" id="MISRAC2012-RULE_8_2-b" origId="CODSTA-158" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_8_2-c" origId="CODSTA-159" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_3-a" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRAC2012-RULE_8_3-b" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="All declarations of an object or function shall have compatible types" id="MISRAC2012-RULE_8_3-c" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" origId="CODSTA-118" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_4-b" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_5" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRAC2012-RULE_8_5-a" origId="CODSTA-154" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have exactly one external definition" id="MISRAC2012-RULE_8_6-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_7" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7-a" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_8" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8-a" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_9" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRAC2012-RULE_8_9-a" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_1" desc="Avoid use before initialization" id="MISRAC2012-RULE_9_1-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2-a" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_3" desc="Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3-a" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_4" desc="An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4-a" origId="PB-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_5" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5-a" origId="CODSTA-186" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="MRM-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="MRM-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid hiding the global new" id="MRM-32" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never return a dereferenced local pointer initialized by new in this function scope" id="MRM-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call delete on pointer members in destructors" id="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Provide error handling for file opening errors right next to the call to fopen" id="MRM-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor shall copy all data members and bases" id="MRM-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="MRM-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An assignment operator shall assign all data bases" id="MRM-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="MRM-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate more than one resource in a single statement" id="MRM-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="All classes should contain the assignment operator or appropriate comment" id="MRM-04" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="All classes should contain the copy constructor or appropriate comment" id="MRM-05" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Don't memcpy or memcmp non-PODs" id="MRM-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to an expression that points to deallocated memory" id="MRM-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to global or member variable that points to deallocated memory" id="MRM-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="MRM-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new and delete" id="MRM-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new" id="MRM-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new" id="MRM-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]" id="MRM-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete" id="MRM-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]" id="MRM-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-18" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Store newed objects in smart pointers in standalone statements" id="MRM-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete if you write operator new" id="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete[] if you write operator new[]" id="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new and delete together" id="MRM-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new[] and delete[] together" id="MRM-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use allocation by declaration rather than by new or malloc" id="MRM-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Freed memory shouldn't be accessed under any circumstances" id="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Destructor should not be called manually" id="MRM-31_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MRM" desc="Check the return value of new" id="MRM-34" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy and destroy consistently" id="MRM-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="MRM-40_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both the copy constructor and copy assignment operator should have the same public/protected/private permission" id="MRM-40_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor" id="MRM-40_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="MRM-40_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="MRM-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use calloc, malloc, realloc and free functions" id="MRM-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" id="MRM-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" id="MRM-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="MRM-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use 'delete' on pointers to a void type" id="MRM-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="MRM-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid using the default operator 'new' for over-aligned types" id="MRM-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="MRM-55_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy assignment operators should not have side effects that could affect copying the object" id="MRM-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Move assignment operators should not have side effects that could affect moving the object" id="MRM-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare both private copy constructor and copy assignment operator at the same time" id="MRM-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use RAII to prevent resource leaks" id="MRM-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers for constant and enumerator values shall be lowercase" id="NAMING-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="All &quot;#define&quot; constants shall be in uppercase" id="NAMING-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase" id="NAMING-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Use lowercase for file names" id="NAMING-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Global prefixes should only be used for global variables" id="NAMING-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin local variable names with a lowercase letters" id="NAMING-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin global variable names with a lowercase letters" id="NAMING-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin member variable names with a lowercase letters" id="NAMING-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all boolean type variables with 'b'" id="NAMING-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="NAMING-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter" id="NAMING-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin constant variables with 'c'" id="NAMING-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class data member names with 'its'" id="NAMING-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all double type variable with 'd'" id="NAMING-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all float type variables with 'f'" id="NAMING-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING" desc="Begin all function names with uppercase letter" id="NAMING-17" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="NAMING" desc="Begin global variable names with 'the'" id="NAMING-18" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Begin all integer type variable with 'i'" id="NAMING-19" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Functions that begin with 'is' should return boolean values" id="NAMING-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all long integer variables with 'li'" id="NAMING-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Prefix a variable type 'pointer' with a 'p' character" id="NAMING-22" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all short integer variables with 'si'" id="NAMING-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all signed character variables with 'c'" id="NAMING-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all terminated characters string variables with 'sz'" id="NAMING-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned character type variables with 'uc'" id="NAMING-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned integer type variables with 'ui'" id="NAMING-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use lowercase letters for structure and union member names" id="NAMING-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Append names of non-scalar typedefs with &quot;_t&quot;" id="NAMING-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C always have the file name extension &quot;.c&quot;" id="NAMING-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use typenames that differ only by the use of uppercase and lowercase letters" id="NAMING-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="NAMING-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use identifiers which begin with one or two underscores (`_' or `__')" id="NAMING-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Global function names should start with lowercase" id="NAMING-34" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Member function names should start with lowercase" id="NAMING-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Names of parameters in declaration and definition should be identical" id="NAMING-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Include files in C++ always have the file name extension '.hh'" id="NAMING-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ always have the file name extension &quot;.cc&quot;" id="NAMING-38" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Inline definition files always have the file name extension &quot;.icc&quot;" id="NAMING-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING" desc="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" id="NAMING-40" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files will always have a file name extension of '.h'" id="NAMING-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" id="NAMING-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="NAMING" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="NAMING-44" sev="3" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="NAMING-45" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="NAMING-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Different identifiers shall be typographically unambiguous" id="NAMING-47" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The \ character should not occur in a header file name" id="NAMING-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="NAMING-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Universal character names shall be used only inside character or string literals" id="NAMING-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="NAMING-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use visually distinct identifiers" id="NAMING-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="NAMING-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array variables and parameters" id="NAMING-HN-01" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool types" id="NAMING-HN-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool pointer, array, or reference types" id="NAMING-HN-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte types" id="NAMING-HN-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte pointer, array, or reference types" id="NAMING-HN-05" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char types" id="NAMING-HN-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array of char types" id="NAMING-HN-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer, array, or reference to array of char types" id="NAMING-HN-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer, array, or reference types" id="NAMING-HN-09" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer or reference types" id="NAMING-HN-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for constant parameters" id="NAMING-HN-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point types" id="NAMING-HN-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point pointer, array, or reference types" id="NAMING-HN-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword types" id="NAMING-HN-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword pointer, array, or reference types" id="NAMING-HN-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dynamically allocated array" id="NAMING-HN-16" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point types" id="NAMING-HN-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point pointer, array, or reference types" id="NAMING-HN-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for class declaration" id="NAMING-HN-19" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for structs declaration" id="NAMING-HN-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ifstream type variables and parameters" id="NAMING-HN-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-22" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-23" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for istream type parameters and variables" id="NAMING-HN-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int types" id="NAMING-HN-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point types" id="NAMING-HN-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point pointer, array, or reference types" id="NAMING-HN-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int pointer, array, or reference types" id="NAMING-HN-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for member variables" id="NAMING-HN-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-30" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-31" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ofstream type parameters and variables" id="NAMING-HN-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ostream type parameters and variables" id="NAMING-HN-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer" id="NAMING-HN-34" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for reference parameters" id="NAMING-HN-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int types" id="NAMING-HN-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int pointer, array, or reference types" id="NAMING-HN-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for static variables" id="NAMING-HN-38" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string types" id="NAMING-HN-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string pointer, array, or reference types" id="NAMING-HN-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for unsigned types" id="NAMING-HN-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for void pointer types" id="NAMING-HN-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word types" id="NAMING-HN-43" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word pointer, array, or reference types" id="NAMING-HN-44" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not directly access global data from a constructor" id="OOP-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from destructors" id="OOP-16_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make destructors virtual in base classes" id="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class" id="OOP-29" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="OOP-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class destructor is called and the class has virtual functions it shall have a virtual destructor" id="OOP-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="OOP-49" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not use multiple inheritance" id="OOP-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="OOP-07_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall not use any public implementations" id="OOP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using global data in member functions" id="OOP-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid &quot;public&quot; data members" id="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid 'protected' data members" id="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid casts down the inheritance hierarchy" id="OOP-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Down casting (casting from base to derived class) shall not be allowed" id="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="OOP-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid public copy constructors and assignment operators in base classes" id="OOP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid slicing. Consider Clone instead of copying in base classes" id="OOP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not derive functions with the same name from more than one base class" id="OOP-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="For multiple inheritance use virtual common base class" id="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid the use of global objects in destructors" id="OOP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using the friend mechanism" id="OOP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Friend declarations shall not be used except declarations of comparison operators" id="OOP-11_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Protected member function shall not return non-const handles to private class-data" id="OOP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited virtual function with a different default parameter value" id="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid explicit cast from derived to a base class" id="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use the virtual keyword if a subclass implements a virtual function" id="OOP-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid declaring virtual functions inline" id="OOP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never convert pointers to objects of a derived class to pointers to objects of a virtual base class" id="OOP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare copy assignment operator for class with reference or const members" id="OOP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class" id="OOP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never redefine an inherited nonvirtual function" id="OOP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited nonvirtual function with template parameter" id="OOP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Public member functions shall not return non-const handles to private/protected class-data" id="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="OOP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="OOP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="OOP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="OOP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Classes should not be derived from virtual bases" id="OOP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member data in non-POD types shall be private" id="OOP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="OOP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member functions declared in derived class should not hide functions declared in base classes" id="OOP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not increase the accessibility of overridden or hidden methods" id="OOP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A user-defined assignment operator shall not be virtual" id="OOP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Structs should only contain public data members and should not be a base or inherit" id="OOP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Write a using declaration to redeclare overloaded functions" id="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Check for assignment to self in operator=" id="OOP-34" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual base shall be explicitly declared in each derived class" id="OOP-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Hierarchies should be based on abstract classes" id="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="OOP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other" id="OOP-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A non-POD type should be defined as class" id="OOP-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Consider use composition instead of private inheritance" id="OOP-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Prefer composition when don't need inheritance" id="OOP-37" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use namespace instead of class or structure containing only static functions" id="OOP-51" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Eliminate unused parameters" id="OPT-03" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Variables will not be introduced until they can be initialized with meaningful values" id="OPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare variables as locally as possible" id="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OPT" desc="Prefer canonical form of ++ and --. Prefer calling the prefix forms" id="OPT-04" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused private member variables" id="OPT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is +, -, *, /, %" id="OPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is &amp;, |, ^, &lt;&lt;, >>" id="OPT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OPT" desc="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" id="OPT-10" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one function only then include that variable in the function itself" id="OPT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one class only then include that variable in the class itself" id="OPT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare member variables in the descending size order" id="OPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider overloading to avoid implicit type conversions" id="OPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Global function containing recursion, loops or virtual function call should not be inlined" id="OPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid inline constructors and destructors" id="OPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Member function containing recursion or loops should not be inlined" id="OPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider using op= instead of stand-alone op" id="OPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Postpone variable definitions as long as possible" id="OPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least one non-empty case clause" id="OPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Useless case statement shall not be permitted" id="OPT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="'strlen' function should not be used to check string against NULL/non-NULL" id="OPT-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every defined function with internal linkage shall be used at least once" id="OPT-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="There shall be no unused parameters (named or unnamed) in non-virtual functions" id="OPT-31" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="All non-empty functions with void return type shall have external side effect(s)" id="OPT-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not assign a variable to itself" id="OPT-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not use a variable inside its own initializer" id="OPT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least two switch-clauses" id="OPT-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There shall be no unused named parameters in virtual functions" id="OPT-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused local variables" id="OPT-02" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unnecessary local variables" id="OPT-06" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial accessor and mutator functions should be inlined" id="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial forwarding functions should be inlined" id="OPT-24" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="OPT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The number of accessor and mutator functions should be minimized" id="OPT-27" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Redundant explicit cast to the same type is not allowed" id="OPT-29" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Functions with void return type shall not be empty" id="OPT-32_b" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A function should not contain unused label declarations" id="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There should be no unused parameters in functions" id="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in two branches of if-else-if chain" id="OPT-40_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in different clauses of switch statement" id="OPT-40_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="OPT-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Remove unnecessary '== true'" id="OPT-09" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider returning object by reference instead of by value" id="OPT-33" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against command injection" id="OWASP2017-A1-b" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid printing tainted data on the output console" id="OWASP2017-A1-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against environment injection" id="OWASP2017-A1-d" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Exclude unsanitized user input from format strings" id="OWASP2017-A1-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against SQL injection" id="OWASP2017-A1-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2017-A1-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2017-A10-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A2" desc="Do not use weak encryption functions" id="OWASP2017-A2-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A3" desc="Properly seed pseudorandom number generators" id="OWASP2017-A3-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A4" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2017-A4-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Protect against file name injection" id="OWASP2017-A5-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2017-A5-b" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Ensure that privilege relinquishment is successful" id="OWASP2017-A5-c" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Properly use errno value" id="OWASP2017-A6-c" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2017-A6-a" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Do not leave 'catch' blocks empty" id="OWASP2017-A6-b" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2019-API10-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="Do not use 'syslog' function for logging purposes" id="OWASP2019-API10-b" origId="SECURITY-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API2" desc="Do not use weak encryption functions" id="OWASP2019-API2-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow due to defining incorrect format limits" id="OWASP2019-API3-d" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow due to reading a not zero terminated string" id="OWASP2019-API3-e" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when reading from a buffer" id="OWASP2019-API3-f" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when writing to a buffer" id="OWASP2019-API3-g" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="OWASP2019-API3-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer read overflow from tainted data" id="OWASP2019-API3-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer write overflow from tainted data" id="OWASP2019-API3-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid race conditions while checking for the existence of a symbolic link" id="OWASP2019-API3-m" origId="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not pass empty container iterators to std algorithms as destinations" id="OWASP2019-API3-a" origId="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays out of bounds" id="OWASP2019-API3-b" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays and pointers out of bounds" id="OWASP2019-API3-c" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Properly seed pseudorandom number generators" id="OWASP2019-API3-k" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2019-API3-l" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="OWASP2019-API3-p" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid functions which use time from MFC library" id="OWASP2019-API3-o" origId="SECURITY-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="OWASP2019-API3-q" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Usage of system properties (environment variables) should be restricted" id="OWASP2019-API3-n" origId="SECURITY-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Ensure resources are freed" id="OWASP2019-API4-b" origId="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="OWASP2019-API4-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Properly use errno value" id="OWASP2019-API7-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2019-API7-b" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Do not leave 'catch' blocks empty" id="OWASP2019-API7-c" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against command injection" id="OWASP2019-API8-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid printing tainted data on the output console" id="OWASP2019-API8-b" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against environment injection" id="OWASP2019-API8-c" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against file name injection" id="OWASP2019-API8-d" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Exclude unsanitized user input from format strings" id="OWASP2019-API8-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against SQL injection" id="OWASP2019-API8-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2019-API8-g" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2019-API8-h" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing dynamically created strings into exec" id="OWASP2019-API8-i" origId="SECURITY-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing user input into methods as parameters" id="OWASP2019-API8-j" origId="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All usage of assembler shall be documented" id="OWASP2019-API9-c" origId="COMMENT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OWASP2019-API9" desc="Use of floating-point arithmetic shall be documented" id="OWASP2019-API9-d" origId="COMMENT-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All uses of the #pragma directive shall be documented and explained" id="OWASP2019-API9-g" origId="MISRA2004-3_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="OWASP2019-API9" desc="Objects or functions with external linkage shall be declared in a header file" id="OWASP2019-API9-e" origId="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Assert liberally to document internal assumptions and invariants" id="OWASP2019-API9-a" origId="CODSTA-11" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="When using enum, the values of each member should be explicitly declared" id="OWASP2019-API9-b" origId="CODSTA-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Document integer division" id="OWASP2019-API9-f" origId="MISRA-041" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Protect against file name injection" id="OWASP2021-A1-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2021-A1-b" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Ensure that privilege relinquishment is successful" id="OWASP2021-A1-c" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A2" desc="Properly seed pseudorandom number generators" id="OWASP2021-A2-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against command injection" id="OWASP2021-A3-b" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid printing tainted data on the output console" id="OWASP2021-A3-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against environment injection" id="OWASP2021-A3-d" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Exclude unsanitized user input from format strings" id="OWASP2021-A3-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against SQL injection" id="OWASP2021-A3-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2021-A3-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A4" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2021-A4-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Properly use errno value" id="OWASP2021-A5-c" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2021-A5-d" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2021-A5-a" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Do not leave 'catch' blocks empty" id="OWASP2021-A5-b" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A7" desc="Do not use weak encryption functions" id="OWASP2021-A7-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2021-A8-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A9" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2021-A9-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PARSER" desc="Parser warning" id="PARSER-WARNING" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PARSER" desc="Parser remark" id="PARSER-REMARK" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="PB-23" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Operators should not return value by reference" id="PB-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="PB-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Unsigned arithmetic shall not be used" id="PB-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Public and protected methods should not be invoked by class constructor" id="PB-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A string literal shall not be modified" id="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast from or to incomplete class at the point of casting" id="PB-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not delete objects with incomplete class at the point of deletion" id="PB-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" id="PB-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Do not dereference pointer type expressions" id="PB-01" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use assignments inside a(b), a[b], and cast" id="PB-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Using mixed types in ternary operator is not allowed" id="PB-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Return value of a function must match declared return type" id="PB-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operator should have operands of compatible types" id="PB-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign function return value to a variable of incompatible type" id="PB-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign signed constants to unsigned integer variables" id="PB-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't treat arrays polymorphically" id="PB-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PB" desc="Declared types of formal and actual parameters to functions must match" id="PB-11" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast a signed char to an unsigned int" id="PB-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Incorrect End-Of-String (EOS) definition" id="PB-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't assign the dividend of two integers to a floating-point type" id="PB-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid unintentionally discarding the remainder of integer division" id="PB-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to char type" id="PB-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to unsigned char type" id="PB-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading class methods on a pointer and a numerical type" id="PB-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not create inline non-member functions that contain local static data" id="PB-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid slicing function arguments / return value" id="PB-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use increment and decrement expressions inside a(b), a[b], and cast" id="PB-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="More than one 'enum' type shall not be used as a switch condition or a label in a case statement" id="PB-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on constants" id="PB-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on a pointer type" id="PB-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in assignments involving enum types" id="PB-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in comparisons involving enum types" id="PB-33_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Third parameter to 'memcpy'/'strncpy'/'memmove' should not depend on second" id="PB-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operators shall not be used in conditions without brackets" id="PB-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The unbounded functions of library &lt;cstring> shall not be used" id="PB-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Narrow and wide string literals shall not be concatenated" id="PB-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="String literals with different encoding prefixes shall not be concatenated" id="PB-38_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="PB-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="PB-39_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="PB-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not pass expression with array type to a function with pointer or array type parameter" id="PB-41_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object shall not be assigned to an overlapping object" id="PB-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="PB-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="PB-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="PB-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="PB-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="PB-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="PB-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading global functions on a pointer and a numerical type" id="PB-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading namespace functions on a pointer and a numerical type" id="PB-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit conversions from signed to unsigned type" id="PB-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="PB-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="PB-58" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Missing comma in a string array initialization" id="PB-59" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Suspicious argument to malloc" id="PB-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic performed on freshly allocated memory" id="PB-61" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function calls with incorrect argument order" id="PB-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Function address should not be compared to zero" id="PB-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The values returned by string comparison functions should be compared only to zero" id="PB-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="PB-65_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The same code (after preprocessing) in both branches of if-else statement" id="PB-67" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An element of an object shall not be initialized more than once" id="PB-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="PB-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not copy instances of structures containing a flexible array member" id="PB-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call va_arg with an argument of the incorrect type" id="PB-72" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PB" desc="C-style strings shall not be used" id="PB-76" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="PB-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="PB-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function declarations that are syntactically ambiguous" id="PB-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="PB-74" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Don't define entities with linkage in a header file" id="PFO-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards" id="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="An include file should not contain more than one class definition" id="PFO-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="File with extension '.c' may not include other files with extension '.c'" id="PFO-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Never include other files in a file with extension '.icc'" id="PFO-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards with pattern based on the header file name" id="PFO-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use mechanism that prevents multiple inclusion of the file i.e. include guards or &quot;#pragma once&quot; preprocessor directive" id="PFO-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="&quot;#pragma once&quot; preprocessor directive should not be used in source files" id="PFO-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Do not define more than on class in a header file" id="PFO-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="PFO" desc="Every implementation file should declare a local constant string that describes the file" id="PFO-04" sev="5" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hard coded value of offset in structures" id="PORT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hex constant '0xffffffff' as an error marker" id="PORT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a long should not be casted to an int pointer" id="PORT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast an int pointer to a long pointer" id="PORT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="PORT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Assigning result of ints operation to long without casting at least one of the ints is not allowed" id="PORT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long int to an int" id="PORT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass long casted to an int in function call" id="PORT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Constant assignment to long should not involve int literals" id="PORT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not initialize a long int with int literals" id="PORT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign the value from 32 bit multiplication to long type" id="PORT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="PORT" desc="The type int shall always be declared as unsigned int or signed int" id="PORT-13" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions from &quot;shorter&quot; type to &quot;longer&quot; type in assignment" id="PORT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast from &quot;shorter&quot; type to &quot;longer&quot; type" id="PORT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PORT" desc="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" id="PORT-16" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use 'i64' or 'L' suffixes directly" id="PORT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Instead of casting a long type operand of an expression to int cast the result of the expression" id="PORT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not declare variables of long type directly" id="PORT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long value to a double" id="PORT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 64 characters" id="PORT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid implicit conversions to a type of narrower size" id="PORT-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions of constant values to a narrower type" id="PORT-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a structure should not be passed to a function that writes data to a file" id="PORT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type long double shall not be used" id="PORT-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type wchar_t shall not be used" id="PORT-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="PORT-34_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="PORT-34_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="PORT-34_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C external identifiers should differ in the first 31 characters" id="PORT-35_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="PORT-35_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="PORT-35_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 31 characters" id="PORT-36_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of macro identifiers should not be longer than 31 characters" id="PORT-36_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not throw an exception across execution boundaries" id="PORT-30" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="PORT-31" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="PORT-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of large arrays of longs" id="PORT-22" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of dynamic allocated large arrays of longs" id="PORT-23" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use large arrays of pointers to bool, char, short, int and float types" id="PORT-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't use macros in include statement" id="PREPROC-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="In a macro function, use parentheses before and after multiplication or division" id="PREPROC-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Do not allow absolute or relative path names in #include statements" id="PREPROC-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PREPROC" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="PREPROC-09" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="PREPROC" desc="Avoid using macro definitions" id="PREPROC-01" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PREPROC" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="PREPROC-08" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_c" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="PREPROC-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #if preprocessor directive should not be used" id="PREPROC-11_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="PREPROC" desc="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" id="PREPROC-12" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Macro should not contain token pasting, variable argument list nor recursive macro calls" id="PREPROC-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="PREPROC" desc="All macros must expand into complete syntactic units" id="PREPROC-14" sev="3" total="14" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Pointer dereference operations may not be hidden in macro definitions" id="PREPROC-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter immediately following a # operator shall not immediately be followed by or preceded by a ## operator" id="PREPROC-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PREPROC" desc="The input/output library stdio.h shall not be included" id="PREPROC-18" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="PREPROC-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Match the filename in a #include directive to the one on the filesystem" id="PREPROC-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#error directive shall not be used" id="PREPROC-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #pragma directive shall not be used" id="PREPROC-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator" id="PREPROC-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#undef shall not be used" id="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="PREPROC-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't redefine primitive types" id="PREPROC-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PREPROC" desc="Don't define part of statement" id="PREPROC-04" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="PREPROC-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Incorrect 'NULL' definition" id="PREPROC-07" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Avoid token concatenation that may produce universal character names" id="PREPROC-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The methods inside the SIGNAL and SLOT macros have to exist" id="QT-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not force thread termination by calling QThread::terminate()" id="QT-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not call new on QMutexLocker" id="QT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not directly set specific Widget attributes that are set by Qt kernel" id="QT-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Every QObject subclass should contain a Q_OBJECT macro" id="QT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="QObject must not be inherited more than one time" id="QT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="It's only possible to connect a signal to a slot or a signal to another signal" id="QT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Mark signal emissions with the keyword &quot;emit&quot; to distinguish a signal emission from a normal method call" id="QT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not set Idle or Critical priority to QThreads. Use High/Low/Med only" id="QT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If using lock on a mutex in a function, release the lock in the same function" id="QT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Declare a copy constructor and operator= for any Qt - inherited objects that have pointers" id="QT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Never mix const and non-const iterators in assignment" id="QT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS" id="QT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace" id="QT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The getters and setters of a Q_PROPERTY must exist and the types must match" id="QT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Properties of enum types must use Q_ENUMS" id="QT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Non-const function should not be called on the Qt object" id="QT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not use setWindowFlags function on a Widget" id="QT-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use gets()" id="SECURITY-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use care to ensure that LoadLibrary() will load the correct library" id="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="SECURITY-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="SECURITY-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using data() function from 'string' class of standard library" id="SECURITY-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using the 'vfork()' function" id="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="SECURITY-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions which may cause buffer overflows" id="SECURITY-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions that do not check bounds" id="SECURITY-13" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="SECURITY-14" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing non-const parameters or variables into exec" id="SECURITY-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing dynamically created strings into exec" id="SECURITY-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions prone to race is not allowed" id="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing user input into methods as parameters" id="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'syslog' function for logging purposes" id="SECURITY-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use mbstowcs() function" id="SECURITY-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Beware of functions which may return the current directory or the windows directory" id="SECURITY-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using InitializeCriticalSection" id="SECURITY-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using thread-unsafe functions" id="SECURITY-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'setuid' in source code" id="SECURITY-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use chmod(), chown(), chgrp()" id="SECURITY-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Standard random number generators should not be used to generate randomness for security reasons" id="SECURITY-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use obsolete C routine ulimit()" id="SECURITY-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using 'getpw' function in program code" id="SECURITY-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'cuserid' function" id="SECURITY-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using obsolete C routine 'usleep'" id="SECURITY-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions which do not properly handle non-NULL terminated strings is not allowed" id="SECURITY-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using environment variables" id="SECURITY-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="SECURITY" desc="Don't trust any value of command line if attacker can set them" id="SECURITY-35" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use unfiltered data from an untrusted user as the format parameter" id="SECURITY-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use weak encryption functions" id="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="SECURITY" desc="Untrusted data is used as a loop boundary" id="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'asctime()' and 'asctime_r()' functions should not be used" id="SECURITY-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The random number generator functions 'rand()' and 'srand()' should not be used" id="SECURITY-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the rand() function for generating pseudorandom numbers" id="SECURITY-02_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use time from MFC library" id="SECURITY-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="SECURITY-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use secure temporary file name functions" id="SECURITY-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="SECURITY-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="SECURITY-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Observe correct revocation order while relinquishing privileges" id="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Ensure that privilege relinquishment is successful" id="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="SECURITY-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not call the 'system()' function from the 'stdlib.h' or 'cstdlib' library with an argument other than '0' (null pointer)" id="SECURITY-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-48_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="SECURITY-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of system properties (environment variables) should be restricted" id="SECURITY-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'umask' before calling 'mkstemp'" id="SECURITY-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'chdir' if you call 'chroot'" id="SECURITY-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use the 'cnd_signal()' function with a unique condition variable" id="SECURITY-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="SECURITY-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects" id="STL-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Call empty instead of checking size() against zero" id="STL-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using iterative calls to insert in an explicit loop" id="STL-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions" id="STL-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters" id="STL-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When using containers of newed pointers, remember to delete the pointers before the container is destroyed" id="STL-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Never create containers of auto_ptrs" id="STL-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove algorithm with list and standard associative containers" id="STL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="STL" desc="Prefer vector and string to dynamically allocated arrays" id="STL-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use reserve to avoid unnecessary reallocations" id="STL-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each vector and string should be checked if it is not empty before it is passed to C function" id="STL-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using vector&lt;bool>" id="STL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Specify comparison types for associative containers of pointers" id="STL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator" id="STL-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use distance and advance to convert a container's const_iterators to iterators" id="STL-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure destination ranges are big enough" id="STL-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Follow remove-like algorithms by erase to remove elements from a container" id="STL-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers" id="STL-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate" id="STL-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If accumulate() is used on a container of floating point values, use floating point value as initial one" id="STL-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Design functor classes for pass-by-value" id="STL-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make predicates const pure functions" id="STL-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function" id="STL-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component" id="STL-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure less&lt;T> means operator&lt;" id="STL-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer algorithm calls to hand-written loops" id="STL-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer member functions to algorithms with the same names" id="STL-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not rely on the conversion of count()'s nonzero values to true and zero to false" id="STL-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not use an iterator range that isn't really a range" id="STL-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="STL" desc="C-style arrays shall not be used" id="STL-37" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use != instead of &lt; to compare iterators" id="STL-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use traits classes in conjunction with overloading" id="STL-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification" id="STL-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not declare the non-member to be an overloading of std::swap" id="STL-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Member version of swap should never throw exceptions" id="STL-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider using vector&lt;char> instead of string" id="STL-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes" id="STL-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider istreambuf_iterators for character-by-character input" id="STL-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range" id="STL-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of trying to write the container-independent code use class encapsulation" id="STL-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Factor parameter-independent code out of templates" id="TEMPL-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Define non-member functions inside templates when type conversions are desired" id="TEMPL-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not overload functions within a template class" id="TEMPL-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template global functions use 'typename' to identify nested dependent type names" id="TEMPL-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template classes use 'typename' to identify nested dependent type names" id="TEMPL-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Don't change default arguments of virtual functions in template classes" id="TEMPL-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="TEMPL-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="TEMPL-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Overloaded function templates shall not be explicitly specialized" id="TEMPL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="TEMPL-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="TEMPL-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not declare non-member generic functions in associated namespaces" id="TEMPL-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The function shall resolve to a function declared previously in the translation unit" id="TEMPL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Declare 'extern' an explicitly instantiated template" id="TEMPL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="TEMPL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="TEMPL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="TEMPL-18" sev="3" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="76;" authUrg="4;" id="1" total="76" />
            <Severity authTot="654;" authUrg="12;" id="2" total="654" />
            <Severity authTot="966;" authUrg="23;" id="3" total="966" />
            <Severity authTot="397;" authUrg="7;" id="4" total="397" />
            <Severity authTot="375;" authUrg="4;" id="5" total="375" />
         </SeverityList>
      </Rules>
      
  <Supps />

      
  <StdViols>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="3" auth="yshi" locRef="1" rule="METRICS-31" lnHash="-1179647073" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="-1179647073" unbViolId="b15bf5bb-a4f2-3f4f-92a4-7bba0c7bf932" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2190ae8d-e793-398a-9395-794d30a07302" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'NullPointer.cpp' should be in lowercase" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="3" auth="yshi" locRef="1" rule="NAMING-03" lnHash="-1179647073" rule.header="Use lowercase for file names" tool="c++test" lineHash="-1179647073" unbViolId="b07c5a86-cd97-3c33-90c2-6268309fea9f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cab432a-49a5-3492-9ad7-b1e74d0bf788" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'NullPointer.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="3" auth="yshi" locRef="1" rule="NAMING-38" lnHash="-1179647073" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="-1179647073" unbViolId="59386a5e-0e80-379d-ab3a-c5ee7c4284b3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fa174c5-0a47-3455-bfb4-38ba7b1a6fe2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'NullPointer.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="5" auth="yshi" locRef="1" rule="PFO-04" lnHash="-1179647073" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="-1179647073" unbViolId="ff75b036-f091-31ca-9d14-6437e531f37c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24393614-e2c1-3602-86f3-9bc76b2004e5" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="3" auth="yshi" locRef="1" rule="COMMENT-02" lnHash="-1179647073" rule.header="Provide copyright information" tool="c++test" lineHash="-1179647073" unbViolId="67b8dcf1-89c2-3ee9-8444-9475d0abeb52" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8c128d2-348a-3589-ad8b-60d738bab2be" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="3" auth="yshi" locRef="1" rule="JSF-133_b" lnHash="-1179647073" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="-1179647073" unbViolId="81bf14e2-c8fd-3153-9e17-40daeca9a274" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5d6c82e-a6c1-3609-82da-98a506484196" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="3" auth="yshi" locRef="1" rule="COMMENT-03" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="26533b46-1c04-35b7-9c6d-8ca2d6bfc1b1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7396a14e-de8f-3ddd-ad47-42dd1ef8e6c9" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="3" auth="yshi" locRef="1" rule="JSF-133_a" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="8935a02e-3c3c-3084-9d7e-44b023c09bcc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10f29cc4-7cec-32e7-85f2-64b0915780e6" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="3" auth="yshi" locRef="1" rule="JSF-032" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="837d9918-fa07-3e23-8027-d792b4ae6e9f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27595c2b-74ca-3c9f-bca3-3b9fd277baef" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="3" auth="yshi" locRef="1" rule="PREPROC-08" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="7777457d-63f4-3034-96cd-4d9cf4fa1611" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f17c94f3-2454-3b90-ac04-6789f408b6c2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="2" auth="yshi" locRef="1" rule="PREPROC-09" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="473d12c3-1488-3f35-828b-0f5bd7e589c3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a945a4c8-7738-3361-9e2a-c6a562172d2e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="1" sev="2" auth="yshi" locRef="1" rule="JSF-033" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="4e46680c-ec49-3c8e-8f2c-4f3946e413b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a8460b8-4781-381b-8b2c-65ee38fc1c35" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="3" sev="2" auth="yshi" locRef="1" rule="MISRA2008-18_0_1" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="c2b236bd-a8ec-3d91-a9cf-30c01179008d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da021463-d35e-3b85-829c-588aaf8dcb01" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="3" sev="3" auth="yshi" locRef="1" rule="HICPP-1_3_3-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="58352292-195c-3e5b-8c20-644a61db41d6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ba53d78-75cc-3db8-bdcb-e8a9c2dd0748" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="3" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A18_0_1-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="e1e4ab41-36aa-3ff6-bec8-c01e79c06006" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0140f560-c8ef-3c34-aebe-e3e00882a126" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="3" sev="3" auth="yshi" locRef="1" rule="CODSTA-CPP-59" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="d455c659-1778-37e3-be9c-73eee0c06e96" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5954ff88-d725-3a7c-91ca-1d7ff0ab9dc1" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="3" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A1_1_1-d" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="7082fb19-d486-3e70-9ead-5339e5f47990" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3365b6b2-d2e1-3bf8-b313-b4398a2144d5" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="3" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="3" sev="4" auth="yshi" locRef="1" rule="HICPP-17_2_1-a" lnHash="-327381023" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="-327381023" unbViolId="be2ac2e5-3885-3f5b-aa9d-0437d803373b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86703641-e8b5-3880-a777-6b9c4819ca42" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="COMMENT-04" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="e12c06d2-7553-3996-89f8-f3e60276feca" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4af684ee-47c6-3503-b18e-6f2e39bd657d" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="4" auth="yshi" locRef="1" rule="JSF-134" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="0c835c91-8e4f-3741-a8c4-1c4381dad221" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa9c3b58-c81f-3cee-88d2-b53ca53bf526" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="COMMENT-14" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="675c58c8-6fdf-3395-85a8-f2f31010caf4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2cc92d3-c783-3cf8-9fa4-1119359ce92c" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="d0ec2eb1-683e-3097-b333-ef8546f49125" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4943a7f-4bd0-38e3-8f33-d3e211890b03" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="60ba61d0-11c9-3c4f-b5cf-f85292a086fa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f7d4077-03a6-36e8-8558-751c39c947d5" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="0f6437da-00f4-3a04-af7e-5eb88ae1c0d6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0a218f6-281a-3aed-9124-b10d28b60b22" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="9c76aaf5-8cb0-3031-82b4-424f1e18581c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe473cc3-af1c-3313-8fbb-c2fe57e50ddd" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="253e90a1-a095-39cc-8d05-e22580db62c0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02cd5a45-11c7-357a-be53-863fdc35a8ce" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="9b52fa50-b58b-3a8c-b6e8-85e1fa1ec333" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fe24496-8de4-31f3-9e88-f5f408b037f5" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="98847911-315f-3bdb-9039-b152590e0279" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e68e5ed5-5bb2-3b4b-b7d2-a4491ad7bf73" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="'main' shall be declared as unsigned int or signed int" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="21fda7f1-943a-373a-acab-4b6ec8b03e38" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8e87229-7e6d-369b-a4bf-36faf9658e93" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="CERT_CPP-ERR50-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="165a2e91-dcae-3b90-889c-f34b37c55d69" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bca90dc-b6be-3990-ac8b-98ac4244948a" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A15_3_3-a" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="03437fe5-da39-3d1b-b0e8-5cfcc02945da" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee43592f-fd4c-32b2-afd2-846397af42f4" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="HICPP-15_3_2-b" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="cc262ef9-f96e-3302-8341-c54cbd4ae458" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe3f1b09-3ab7-3c25-aecb-7039af73f74b" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="4" auth="yshi" locRef="1" rule="MISRA2008-15_3_2" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="d503e19d-c7fb-3ece-b64a-eb06431c350c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3142302-8689-3f63-b33b-d743e1858e65" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A15_5_3-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="bc7727fc-33d6-3fea-831c-ae86b9951637" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ba27997-6f46-3043-bd77-8f5908651119" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="EXCEPT-06" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="f57ee2b4-c045-37f6-be80-472c3530119b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf428e08-16ee-377d-9897-2f7d536189cd" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="MISRA2008-15_5_3_d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="ecf25e33-6fa8-3227-a31c-1de6557f48f4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0126ba25-df91-37aa-88f2-f2d8c5f2feb5" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'main'" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="FORMAT-28" lnHash="-332596053" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-332596053" unbViolId="30a952b3-cfa1-304f-9426-d6b96a1096e3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b51b3f36-a895-3e31-a356-fa5d1b2b8a50" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Function 'main' has Cyclomatic Complexity value: 2" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="5" auth="yshi" locRef="1" rule="METRICS-29" lnHash="-332596053" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-332596053" unbViolId="49e4c45a-2451-3297-87fa-979ac6f46e7c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2dda4d5-28d8-3577-b4eb-a6b429eafec7" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Function 'main' has Essential Complexity value: 1" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="5" auth="yshi" locRef="1" rule="METRICS-33" lnHash="-332596053" rule.header="Report Essential Complexity" tool="c++test" lineHash="-332596053" unbViolId="2abe69bb-1619-3d51-9a33-5001f3fc5391" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e0eff30-10f6-32e0-9504-c690943e8593" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="4" auth="yshi" locRef="1" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="111a2c93-6f41-3d87-83c8-b8510a1a9b94" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6007e436-3d53-3504-a7ca-ecfca8135d24" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="80ede81f-1e6a-3f1e-87ac-a87d0d93e9c8" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c598132d-8a24-3609-bed4-6092b072dc36" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="'argc' shall be declared as unsigned int or signed int" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="2c642781-afde-3209-9dd9-8a6b691811fb" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cb37ee1-abab-3124-a1c1-3513e1b6d73a" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="CERT_C-DCL00-a" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="d923b135-b1f5-3bde-a42e-ff1dc9015b5a" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a54f5f41-a50c-313e-88e3-c0eaf16176cd" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A7_1_1-a" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="a2c4c463-851f-3da3-90f1-e976cf8e551e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="340b9dc4-d0bf-3f2e-9ff5-72f8490d99c8" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="MISRA2008-7_1_1" lnHash="-332596053" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-332596053" unbViolId="2684d753-a774-3be8-8c08-a83af7c1c440" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44259f35-b8f2-3b8e-9424-57f6aa5f4e08" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="CODSTA-CPP-53" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="b3f472bd-38c3-3b9c-ba29-d8085098de8b" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4237586c-7c63-3820-b4de-26dbd302aea1" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="HICPP-7_1_2-a" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="a0c6ddd7-a582-3fea-b8af-869ab1f6d714" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0d32cbe-28d5-3208-961a-5dbfaaa5d0ad" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="NAMING-HN-22" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="fb41f4b0-1d23-3f1f-970f-f6b8c7aaf783" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="689a9aa1-04bc-3254-b526-56cdcb41f5ce" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="NAMING-HN-30" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="84216cee-9bba-3953-9972-8cf26289a31d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fca8d03-6e2c-3319-8833-e1e2844eb06c" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="NAMING-HN-43" lnHash="-332596053" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-332596053" unbViolId="93b33fae-23b9-3cd0-a385-c14b5b474a5b" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b067c4f3-943b-3f06-ad12-7bb7d5ec7588" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="4" auth="yshi" locRef="1" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="0639081a-b802-328d-b1fe-df190dcf115a" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf93a83d-bbb1-35ce-8b05-0935aa894127" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="72974e36-10c4-30ad-80b7-133f4ffcd7be" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d20561e3-44b6-3505-bf14-2e3d3ac7cc4b" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declaration of variable 'argv' contains more than one level of pointer indirection" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="HICPP-8_1_1-a" lnHash="-332596053" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-332596053" unbViolId="d12804e6-b54f-35d0-bbfe-b833c82e55ad" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95812161-f28e-3c75-af28-e6ec07ee90cb" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declaration of variable 'argv' contains more than one level of pointer indirection" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="CODSTA-89" lnHash="-332596053" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-332596053" unbViolId="2a4e0ef6-fba3-3971-9881-affeb841b5b2" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81bffbe7-58e3-3a7e-9548-e94a7c6aca91" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: argv" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="CODSTA-94" lnHash="-332596053" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-332596053" unbViolId="31c6a35e-7631-3c8c-a004-bf4ddd7c3de4" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a91b778a-2b0a-3abb-8e3d-ccb7d44cb0cc" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: argv" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="CODSTA-95" lnHash="-332596053" rule.header="Do not declare pointer type" tool="c++test" lineHash="-332596053" unbViolId="38058d10-f62b-3461-80ae-3f7fca476107" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8de5c33b-5b6f-3559-b63e-ff3b59e30886" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="JSF-097_c" lnHash="-332596053" rule.header="Arrays shall not be used in global functions" tool="c++test" lineHash="-332596053" unbViolId="1cab97be-27cb-30b3-81cd-d594e79ccee6" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a21f31b-896c-3f84-b3de-35e652800b63" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="2" auth="yshi" locRef="1" rule="CODSTA-142" lnHash="-332596053" rule.header="Global functions shall not declare parameters with array type" tool="c++test" lineHash="-332596053" unbViolId="7cabd635-8040-385c-bc68-08b6cb9a36b1" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="190dbe2a-22cc-309e-890e-39ecd432647b" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="CERT_C-API00-a" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="a22c77b2-b37f-34b0-b7c1-2774b3191344" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7958c1d5-af1c-34e4-bf5a-29b7664e1a84" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="5" sev="3" auth="yshi" locRef="1" rule="CODSTA-86" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="bf7efd85-5c52-3b04-8ab7-26ba1f1f92c3" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edf588cc-ad16-3015-abdb-356d8d697ec9" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="6" sev="3" auth="yshi" locRef="1" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="f8a4d825-1f85-3e85-b6b1-f48e4ffeb707" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dd71172-97cb-30d4-a297-53e76b53a9f7" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="6" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="4" auth="yshi" locRef="1" rule="JSF-043" lnHash="264435611" rule.header="Tabs should be avoided" tool="c++test" lineHash="264435611" unbViolId="f60807b4-749b-383a-a70e-27a0f9e3c5a9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fce2b9b-b1e1-3995-aab3-479180f05f26" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="5" auth="yshi" locRef="1" rule="FORMAT-01" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="7a41b976-91a3-3ed4-ab59-be622be1bbf6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8373c482-5c06-3b33-a7cb-0f4959ec937c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="5" auth="yshi" locRef="1" rule="HICPP-2_1_1-a" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="af6f635b-9bef-3df8-9872-f34786a8952c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9d10e52-6595-39e2-a5ad-b2902bd801b5" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A8_5_2-a" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="adcc9547-2f00-37ec-b019-507e02b57256" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa96bfec-208f-31f5-aa8d-a7d16c616561" locEndPos="9" locType="sr" urgent="true" hash="-1257393797" locEndLn="7" goals="1," />
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="CODSTA-MCPP-38" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="1a693ef7-aa29-31ad-a2cd-8fd2ad848559" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="168cff42-cd25-3682-b471-54314a25aec1" locEndPos="9" locType="sr" urgent="true" hash="-1257393797" locEndLn="7" goals="1," />
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="NAMING-45" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="e2754271-50e2-3770-82f1-1a56d8fe6690" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c6c938a-f2c3-3ce2-901f-a9ce25911604" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="JSF-048" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="63958727-30af-3a80-9525-5aedc57a492f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="544619e1-1f50-35c4-b69c-9364094eaa18" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: point" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="CODSTA-94" lnHash="264435611" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="264435611" unbViolId="454bffcb-f865-3203-8454-9ddbcd97eb39" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbf59d16-cbb0-3ea5-a495-d25ee4c61026" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The variable of pointer type is declared: point" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="CODSTA-95" lnHash="264435611" rule.header="Do not declare pointer type" tool="c++test" lineHash="264435611" unbViolId="295d4590-1b28-3e00-9ad3-d4e85f9a0467" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d630ff1-3e28-3c2c-bbd2-fdaf1f85ca44" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="MISRA2008-2_10_1" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="fdee3ef2-9916-3bdb-9a92-376aa7794b6b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72acf646-0fc1-369e-9f07-234bac1c733d" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="HICPP-2_4_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="3b2f525c-9f11-3ecd-97de-8ac607f047ac" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="066eda92-c1db-37ae-bfaf-7bd49891f4d6" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-M2_10_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="83e79f27-3b4b-3db4-b87e-3a564971b178" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38eb8a8f-6ead-324f-883c-44411b5bf713" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="NAMING-47" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="cd026031-cd1f-370c-aa8e-03179f75d3dc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc4ad4c5-12d4-3b13-a2d3-049806e1b775" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="MRM-18" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="b5018296-12f8-3a8f-a976-926a5c2863d8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1879883c-3d3f-3835-83e8-df2d7d40f08e" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="1" auth="yshi" locRef="1" rule="CERT_C-MEM00-a" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="45ed7237-463d-36d9-83bb-e4c6b63a5461" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e7ca9ec-6655-3311-b739-b42bd3922165" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="JSF-132_a" lnHash="264435611" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="264435611" unbViolId="30593bb5-96b0-3354-9a24-928d52920b05" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c697fa5d-425b-32a6-aa1b-f7e2c79ad8e0" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="COMMENT-05" lnHash="264435611" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="264435611" unbViolId="4f70e5e8-c9a2-3472-95be-0a6648fb28a3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16986a1e-f1ed-34a9-b649-a50198d9e3f4" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="MISRA2012-RULE-11_9_a" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="8ed484ab-1ace-3144-9c02-3db4e6a77124" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c47d9d98-4291-3f11-88cb-2b5c8f74c2eb" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-M4_10_2-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="d065033a-ec4a-3647-8156-2a396f4903d4" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31a185dd-e81a-3de5-869c-3f45c6710f77" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="MISRA2008-4_10_2" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="f35a0a75-9d6d-3f52-a2cf-d0efd00d1c02" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0132e00-3a75-3135-953e-06c5919e5c53" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="CODSTA-CPP-63" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="94d189dc-c6e3-3bdb-b3f5-a3ef0da11351" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d84aaa4-806d-328c-8332-290a9b5f0263" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="MISRAC2012-RULE_11_9-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="bd840794-2738-369b-be35-2b21378f4339" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e26a7f26-3670-3933-9c8b-50ea5c1070f1" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="82dd2371-1cf2-36e4-b6d3-dccac57b741d" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9f698b5-4f58-350a-95f4-7f374fe8ea87" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="4" auth="yshi" locRef="1" rule="HICPP-2_5_3-a" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="e8be8842-b8c6-3a07-b3bd-e5944cb4dd8b" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab35cb96-7912-3c13-a487-feddf425bb22" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="4" auth="yshi" locRef="1" rule="CODSTA-MCPP-04" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="274088d4-9a6a-3837-b605-e6ae9de38ca7" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="186f67ea-2c30-32c6-b637-1936f4072510" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="3" auth="yshi" locRef="1" rule="CODSTA-131" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="82d26ff5-8677-3c0f-8dec-1245ccdaf849" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e4c61f0-a93a-3368-a3f5-aeccd361a423" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="fb2f89f1-7cc7-34bb-9028-bffddfff32e3" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dec0e41-bfe3-3a59-b2da-282d26896c4b" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="7" sev="2" auth="yshi" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="138fbef1-fd27-39cf-8f9e-42f37a499a43" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a659f787-4cbb-3af5-9b7c-7e59c9967ca7" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="JSF-061" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="801e97e2-b9cc-3a09-9b58-cf5d92ee7b72" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="293eacdb-411a-3f2e-9261-6d5b4ba7acb6" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="FORMAT-42" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="2057b99e-68a3-3f2e-8a53-89fe82520b37" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efc0a897-061d-37db-aac7-9a2ab2e7f6ad" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="JSF-060_a" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="ca066f32-cf96-3861-a430-a0a71fd4e2b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fb76101-d1be-3c80-95d8-4443ddb676b2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="FORMAT-43" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="fbaa4230-f78e-3bc4-86e3-bbbd6ea5f629" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a07eff8d-b028-3844-8ee8-1e680e9e5327" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="JSF-060_b" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="2d7cb6a4-b9c6-31ec-a1e0-9bca2bdbc235" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e61ad45-6005-3437-a17f-84c66bebc713" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="4" auth="yshi" locRef="1" rule="JSF-043" lnHash="-620226472" rule.header="Tabs should be avoided" tool="c++test" lineHash="-620226472" unbViolId="a2d3fe29-cddb-36d8-8b0e-2e18d8f1127a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1483ac75-455e-38f2-a0aa-dc9b2d57a33f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="5" auth="yshi" locRef="1" rule="FORMAT-01" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="be6460bf-bc3e-315a-94f5-36f299916f00" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c017e82a-1f6d-3031-b6ed-c9ee7790c3cc" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="5" auth="yshi" locRef="1" rule="HICPP-2_1_1-a" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="c0c4f957-51aa-30cf-8654-214f844770b5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0744c08-b8a6-372b-b8f5-27f97492221a" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="FORMAT-02" lnHash="-620226472" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-620226472" unbViolId="bc38cbd4-d167-31ef-bd53-bdae099a1644" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13e51dda-b13c-3f64-9ddf-e27d5e8c2f8d" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="CODSTA-23" lnHash="-620226472" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="-620226472" unbViolId="c11f9300-867b-343a-8065-06b8134a7800" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75f30520-3e4f-39e0-ad30-427a4a591da2" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="No value of command line should be trusted: argc" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="2" auth="yshi" locRef="1" rule="SECURITY-35" lnHash="-620226472" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="-620226472" unbViolId="4f8b1795-71aa-36d8-8172-8988cd9ea09e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ccb1926-d832-331a-91a1-98cb890fa330" locEndPos="6" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="JSF-151" lnHash="-620226472" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="-620226472" unbViolId="94c55185-f0e5-37a5-836d-2817f62ae2ff" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="914f7145-aca8-3412-9111-599e0d705a86" locEndPos="13" locType="sr" urgent="true" hash="-1257393797" locEndLn="8" goals="1," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="CODSTA-26" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="fd3d83ac-2ddd-3bf0-bc95-d4eaa3ae1ca5" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5610d81d-6d61-37cc-9a64-9098e1445b26" locEndPos="13" locType="sr" urgent="true" hash="-1257393797" locEndLn="8" goals="1," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="14af33e9-e50e-36a9-b5fc-e45e1ecb8b42" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2a92c9f-3df2-3e42-8cd2-e69170f6663b" locEndPos="13" locType="sr" urgent="true" hash="-1257393797" locEndLn="8" goals="1," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="8" sev="3" auth="yshi" locRef="1" rule="HICPP-5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="d5b60dfa-9038-36de-b972-2d7b56ef43b5" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c888a9a8-e8f0-3e90-890e-ce4e7f67e800" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="4" auth="yshi" locRef="1" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="3f456440-0fbc-3782-885d-68d5401f85d5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3b481a1-c572-3297-9dbc-d6eebe16d0f3" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="5" auth="yshi" locRef="1" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="6e00aa48-bfbd-3c7e-9971-286ef62ff504" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79b7c56c-f55f-3028-9a4b-9933f0537c38" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="5" auth="yshi" locRef="1" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="9bd6d05e-e761-3de3-934f-e056117ed993" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2216fea-2696-3315-b152-880c253ecd1a" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="4" auth="yshi" locRef="1" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="21e121fb-7696-3859-811b-559997490746" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6bc1fb2-c96a-3864-b59a-fcb65b7e3e50" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="5" auth="yshi" locRef="1" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="4d8c16d5-490a-3e0b-829d-ff5358a99641" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a4cfd0b-15be-3099-9133-75ef93aeddd6" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="5" auth="yshi" locRef="1" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="8adb3ffc-c93e-3b1d-8b2d-6d311c032186" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98223410-a38b-3462-83a6-2543a7e22111" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="1788bc04-e066-3348-a2c2-e6d56f875a6c" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43137199-a8d7-3054-8ade-5ee0cd9466f4" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Check the return value of new" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="MRM-34" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="550f17aa-4724-359a-9652-c9f1b114b01d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f569047-f676-3cf4-94bd-98d301a271dd" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Check the return value of new" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="1" auth="yshi" locRef="1" rule="CERT_CPP-MEM52-a" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="560e2bee-c927-335f-96a8-9fdf4894a4e6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2338b55-7e1e-3368-880e-fcda5f8cd8ce" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRA2012-DIR-4_12" lnHash="212456074" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="7cababbd-a0bd-3448-94e5-e8e803cba8ee" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4937c29-e460-3745-b66c-e484949e92b6" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRA2008-18_4_1" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="5368f192-9ad3-32f4-b6cc-987a61cdff19" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86b87e8f-c585-39c8-a7a3-856b71d61597" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRAC2012-RULE_21_3-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="f2107fb3-e11e-30f6-860e-a2abbde2979e" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29bd47cf-7328-378c-935e-1e64b82614e7" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A18_5_2-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="945fcb34-dd4f-3213-855b-9954f00c32f2" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2558d77d-4284-3ebf-835b-41068ece485c" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="JSF-206" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="faaa412e-6028-3d60-ac5b-86c9c36662e1" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d78cbac8-8f06-32cb-bbc3-978e9276fcd0" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRA2012-RULE-21_3" lnHash="212456074" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="067cbacd-efe0-3681-9ecc-da44cdf1ffd2" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc63cb14-35e0-30cb-942a-ef9df0fb0109" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="MISRA2004-20_4" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="276a4049-03d6-337d-a208-e5b0e29487f7" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9f8e78d-3ea4-3cfe-b4fa-0e1797fc23c1" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRAC2012-DIR_4_12-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="adc68d7f-9260-307f-b3db-d891f767195a" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70b620e9-f1e7-36d5-8195-ae9f92616f70" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="1c68c1c2-5812-33e8-808c-724365b6daef" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cca7f8fa-3c9a-32fd-bb46-43e7a1bb5906" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="b98aa2f2-e590-3f68-9cc4-71028aecbec9" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dae3982-ff67-3da1-9d89-7d24cc63d690" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="1caf1d17-1faf-35a6-9aef-6a796f55d956" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9ebd39c-6e91-3947-aabf-8520d3bbd20a" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="63ac778b-5224-3e69-9447-28e4aa02c2a4" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39aeec42-af08-37a6-b98d-8415fcdddbe4" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="7e3774ac-c848-325a-bda2-4cb396fe0fee" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a79af04-00a2-30ed-9d6d-4cd989338f04" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="49436a0d-ce01-3c93-b20e-0d882e05022a" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0241ace-864b-3ca3-be3c-12a6868d1f46" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="bc7e6eac-ea2f-324c-883e-4bc8d2d18e81" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d665b0c-d463-3d85-aa0b-f1323928124c" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="c64c842e-19bf-35eb-bd78-084384b56a60" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d211090b-4b4b-3e77-9262-799c72d0312d" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="dbb53835-4b3a-34f9-8b20-b80b6cb302c2" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4425fa1-8010-3331-88a8-1487184f750c" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A18_0_2-b" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="5d633aca-b1ea-3bd0-81c0-5cc2c9f61400" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a7474a0-399c-3f42-aee8-6dd8101a1f26" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="9e147b9b-6056-33e7-ac98-009d5f1cdc6c" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fa431ab-f83c-323e-b417-c72062588303" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="9e6f2631-88c6-35f3-b7da-2b2c494f65b3" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cc0d54e-6a75-3907-b50a-712d1470052d" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="0aa92073-c3f8-34ba-9138-2a0da294c875" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a7cd596-72ed-33f7-9da5-22d7f67466d2" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="03fd1f5d-7844-378c-bf71-ab3525ff90f9" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f5ce0f6-6e9d-30a6-a061-c6fd7a642e31" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="475d92b6-52bf-30ec-a755-3d50acae53d5" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eea33bf7-2cc9-3d67-919c-740914f53dde" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="03638ccb-e0d4-3919-b903-a1c474ac9da0" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84e988bb-0fdd-3cf8-be46-cdefde59745e" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="69f301cc-e490-30aa-9ae2-a511e24d5c16" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52027dfd-ec81-3558-bccd-e60ad8345159" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="7c90953d-6b6c-37a6-b1bc-d412541fe3ed" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d298183-0437-3ab6-ac9e-a19dc5f71e45" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="c5784fe6-7546-35bb-94fd-15861a43922b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34202adc-04fc-35d6-9a22-9755bfc855af" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="49007c28-5bdb-34c2-b177-1263240b26ff" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="753bcf98-da2d-3e37-9f52-b510da5c1f70" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="415cd296-d0f6-3007-b4b3-28867f63315b" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d68c050-1b0b-3e0b-86c9-2a03782f31ac" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="e2d98033-6381-34cb-8b91-6de8bb50876e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ea3a714-ef5d-3e14-b80f-08211159b6c1" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A18_0_2-b" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="9878a3a1-cc87-315b-bd27-c546db91f8be" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b175c67-b6bd-32f8-ae54-68edbeb391cb" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="ade5a842-43c8-3761-a2c7-375f8824a11c" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2138af9-1a07-3837-984d-995129960d76" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="a2d8f8f0-ac8f-3d3a-b90f-4785e4fcd9a9" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33853166-3450-3c7e-b1a5-eeadbb74ebdb" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="c0409603-f40a-3405-8d23-e75d83aaaf26" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2dd8db3-850b-3eb3-8396-3fdc17f91552" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="bf3ec52f-e814-311a-adac-43bd8ce776d1" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b902343a-c695-3adf-9653-700cdf500d03" locEndPos="41" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="JSF-151" lnHash="212456074" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="212456074" unbViolId="c9622207-58fb-3d91-a344-b916cde4b697" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef6b6165-f582-301b-84b4-3e3a4af0b0de" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="CODSTA-26" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="59633f22-1989-3c38-87ab-3f723e819cd1" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c6e51a2-f153-3ee9-bc61-faa8cba30906" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="2" auth="yshi" locRef="1" rule="AUTOSAR-A5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="df8a4e07-72dc-39cd-8a6b-153c358a8cc5" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="467765e3-861b-3dd3-8c15-64d66c965ded" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="9" sev="3" auth="yshi" locRef="1" rule="HICPP-5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="34e627e1-9309-386c-8485-8084766b97c0" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8b153af-23df-32a9-a03b-593d6b134bbe" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="10" sev="4" auth="yshi" locRef="1" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="7c0094b3-dbc5-3d5f-ad98-78489dec9682" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c08b8e41-607d-3d70-a787-148d8d8b763c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="10" sev="5" auth="yshi" locRef="1" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="c319b819-b236-3851-8b8b-47b8de8f46f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb4df017-1d3d-3b82-aa96-b42317b6c891" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="10" sev="5" auth="yshi" locRef="1" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="6b57bb4f-363e-3a50-bd4e-c51cd35ac4bb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a1bf79e-0635-3e27-ab5f-1898725ff97c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="11" sev="4" auth="yshi" locRef="1" rule="JSF-043" lnHash="1178067846" rule.header="Tabs should be avoided" tool="c++test" lineHash="1178067846" unbViolId="f38d9861-622b-389e-8da6-3be14385a993" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bccfe781-76e7-3943-b2e3-0ceffd60df30" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="11" sev="5" auth="yshi" locRef="1" rule="FORMAT-01" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="89c0eb46-a226-3a9b-b6a5-ca85e546c5a7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6ebd29f-a320-3a1f-9422-6805f78a0d55" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="11" sev="5" auth="yshi" locRef="1" rule="HICPP-2_1_1-a" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="6fa85443-d496-3f17-a160-9cc207163f7c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50740fef-cb6f-3262-a7f3-72a8fa0a8cd1" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0," />
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="AUTOSAR-A5_3_2-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1390236584" lang="cpp" violId="d928ef99-03f3-3efc-a5e8-733737170632" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="13ddf8e2-68a6-3117-8061-d890099a6262" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="AUTOSAR-M0_3_1-f" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="78528533" lang="cpp" violId="925a7777-8ba6-3df0-a29f-bc6d416e5cf2" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="9a463704-7fcd-30f8-8773-67b099e75358" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="476450621" lang="cpp" violId="28bd9d57-5b90-362b-b255-000d54b8b075" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="f97c4a8e-441c-3e8c-a981-a30e5f510dfb" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="CERT_C-ERR33-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2017494553" lang="cpp" violId="bb564002-b146-3491-98d9-78d172055e12" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="4c9d4732-0b61-3390-87ef-d4eee44ddab2" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="CERT_C-EXP34-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1982312066" lang="cpp" violId="937b6da6-5be8-372c-ab45-a3721e108484" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="3034f6ae-912c-3e08-b5ac-994b53650f11" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="CERT_C-MSC19-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-799733766" lang="cpp" violId="d06eb5ee-5214-3613-a633-c648cfb12be0" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="3" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="a892475f-0a04-35b4-97b0-7f61126163dc" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="CERT_C-POS54-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1180988405" lang="cpp" violId="9465da39-d55b-30dd-aee3-4c35447bb64d" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="65b55393-26ed-3001-8d56-f46b8b438d55" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="CERT_CPP-STR51-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1665615379" lang="cpp" violId="18fb4453-4eef-32e7-960b-d6147cc57ce3" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="910a7653-ed8f-3ff0-8ff6-2a85d4977d32" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="CWE-476-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1747021404" lang="cpp" violId="f496cfe1-f91c-37dc-ae31-59d0782029a3" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="2b2e7c00-b868-3d0a-a4e1-98dfe4c73902" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="HICPP-5_2_1-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-15090486" lang="cpp" violId="7bf212e6-fae3-3bb5-af8e-d1ce730ac098" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="4e65ca24-41fa-3c62-a37f-74002d274a93" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="564686231" lang="cpp" violId="3c745a1b-6c8c-3b29-bacb-4199a13e095f" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="5" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="6c59eb99-8756-3ff1-bd80-dabd6c0a68e1" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="MISRA2012-DIR-4_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2094766674" lang="cpp" violId="2bf1bd0d-fad9-3fb0-b0cb-5f3368ccf89e" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="8cbc08c2-8fe2-3b43-93d7-07cac38d91e2" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/FlowAnalysisCpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/FlowAnalysisCpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1597100009" lang="cpp" violId="9856967f-4db3-3974-bbd3-eeac0bf2a56d" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="9255e464-8066-3862-82b9-29135ecf3a7c" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="12" sev="4" auth="yshi" locRef="1" rule="JSF-043" lnHash="0" rule.header="Tabs should be avoided" tool="c++test" lineHash="0" unbViolId="8bd412c1-4c05-3269-9fac-d291260ec8dd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22d54f61-0d85-3d9f-8411-80829fa61855" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="12" sev="5" auth="yshi" locRef="1" rule="FORMAT-01" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="a4a87462-e639-3103-b13b-b5983006523f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="522d4a2f-1289-3e3a-a98f-55dec6e4472e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="12" sev="5" auth="yshi" locRef="1" rule="HICPP-2_1_1-a" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="4827b4cb-3e44-3cfa-b985-79aa63eee77e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb7141cb-39e4-3806-9dc7-a9cb314c81f2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="13" sev="4" auth="yshi" locRef="1" rule="JSF-043" lnHash="1599597842" rule.header="Tabs should be avoided" tool="c++test" lineHash="1599597842" unbViolId="bea6eedc-b6eb-327c-8e44-011b2fc5ee77" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="573e4bb7-341d-3b79-a9b6-a78854438e44" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="13" sev="5" auth="yshi" locRef="1" rule="FORMAT-01" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="9becfaf7-e9fa-3628-b13b-40c4133d2530" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90c59a18-c9d0-3e55-8008-ca8844d5a224" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="13" sev="5" auth="yshi" locRef="1" rule="HICPP-2_1_1-a" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="f556049a-17cc-3074-a5e7-6a23b02773f4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9730d894-d9c7-3f73-8404-cf787b356b57" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="13" locFile="/FlowAnalysisCpp/NullPointer.cpp" locStartln="13" sev="3" auth="yshi" locRef="1" rule="FORMAT-25_b" lnHash="1599597842" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1599597842" unbViolId="45246282-486f-3052-9180-17e4cfa7f21f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f887b625-48a9-3396-b80a-b2e0a7fcda27" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="yshi" locRef="2" rule="METRICS-31" lnHash="329732047" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="329732047" unbViolId="7ed41d53-8488-3437-bbf0-cd29ab76e1f0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24bdb0d7-2816-35e1-bb11-44d08d7458c5" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'DivisionByZero.cpp' should be in lowercase" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="yshi" locRef="2" rule="NAMING-03" lnHash="329732047" rule.header="Use lowercase for file names" tool="c++test" lineHash="329732047" unbViolId="f8e45acb-79f2-3d2e-898e-27d3c785faf0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b736502-9d74-3f7c-aa0f-cf15acaaccee" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="yshi" locRef="2" rule="NAMING-38" lnHash="329732047" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="329732047" unbViolId="ccdc6101-179d-3d94-814c-3cbbeeb8e973" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9318759b-5d70-390c-a32d-773d0545952e" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="5" auth="yshi" locRef="2" rule="PFO-04" lnHash="329732047" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="329732047" unbViolId="9c755ce3-9aed-332b-9d73-007a4e3a82a4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a56d96c-9eb7-3e70-b3bf-0774531d386e" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="yshi" locRef="2" rule="COMMENT-02" lnHash="329732047" rule.header="Provide copyright information" tool="c++test" lineHash="329732047" unbViolId="5e920ddf-137d-3662-a382-633d145a90b0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="793a8dd2-d470-3378-ac2d-0a01b0a91a5b" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="yshi" locRef="2" rule="JSF-133_b" lnHash="329732047" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="329732047" unbViolId="41efee94-d783-3b9c-8e2c-331758abc2d5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdc32232-cd59-3541-b6f1-358dd96eee5d" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="yshi" locRef="2" rule="COMMENT-03" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="18c196d8-a98d-3fd9-8cbd-88d8aceec57c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="165d3806-f60e-3d24-8e02-8d10d6e989a4" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="yshi" locRef="2" rule="JSF-133_a" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="6dd5a6e9-338b-38bf-815a-2f3c179698a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1547cc3f-dfeb-32b6-a51d-3e758c4835c4" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="yshi" locRef="2" rule="JSF-032" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="96955fb9-9b2d-3da7-a6dd-8ed5e4b39e9c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b222fd8b-c8ba-30e6-b3f8-be6d6d1d1005" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="yshi" locRef="2" rule="PREPROC-08" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="05913a78-d748-32fa-abe7-aa7a73476139" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05a85220-aefc-36f5-8c7f-f59131d40df0" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="2" auth="yshi" locRef="2" rule="PREPROC-09" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="12d3b48c-de88-3169-a2c7-1bce30b1aeab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c408a1e9-a6d1-3406-ba90-acdde2ce43a6" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="1" sev="2" auth="yshi" locRef="2" rule="JSF-033" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="2f5afc27-6e81-3d52-842c-eedbc2f43c97" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2994efcb-bd0f-3132-a99e-c68825a23403" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1572071035" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1572071035" unbViolId="534b9194-f864-3a5d-acb0-6abb371f230a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fec8fdc-21bc-36e2-912d-6c40895180e0" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="MISRA-013" lnHash="-1572071035" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1572071035" unbViolId="923e2dc2-d504-34d4-bb95-9669a377739c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="192211ef-5a8b-393b-af96-75b0bdc35d1d" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="HICPP-7_1_6-b" lnHash="-1572071035" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1572071035" unbViolId="24dfbf87-e6b2-33d7-9ea1-4e18ee531c18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20931dd0-cee0-3ec4-86be-ff38d9f4315e" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="MISRAC2012-DIR_4_6-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="edf027e5-b47e-3a89-8051-e83fec472f45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb991883-6fd9-333f-aaf5-526fde42fe78" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="MISRA2004-6_3_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="210cdf4d-cd47-31a6-8134-d32363dd460c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d38fbb3a-a465-35d3-9d30-649e8ce9107e" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="JSF-209_b" lnHash="-1572071035" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="29208745-ecc2-35b0-8198-e1b0559bb880" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ad97eb2-3c4f-3204-abc9-df067d635f84" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="MISRA2012-DIR-4_6_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="92b5f80a-cd01-3fdc-9049-d26b3711f270" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4834edd7-712a-3e95-aa5c-ad051ee1d096" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="HICPP-3_5_1-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="728ffe0e-f891-386b-8546-db1cb3825dc1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54fbd3b9-b146-33c5-b16f-3dee37229777" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-938638073" lang="cpp" violId="e5fa5ba0-1f4b-3817-aedf-cd635cf63969" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="96f5c27d-4a0a-366e-9bb0-46e4fbed360b" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1776184541" lang="cpp" violId="50332a03-dd7d-3b96-bf79-9a3d93e58530" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="6be5bb68-e7f3-3446-9a8a-b3a70f2068d7" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1613810146" lang="cpp" violId="362610d4-5349-327b-b1b5-d9fb2aa7f881" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="077b3e8a-988e-3f9d-85e9-a1bae2c2a0a0" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1042079686" lang="cpp" violId="3b35e9f0-64c2-35ae-a07f-f14a31d1ad96" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="e5e7c0e5-33fe-3e7c-af69-91318bd7f1c3" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/FlowAnalysisCpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="GLOBAL-UNUSEDFUNC" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="25451a41-02d2-35d3-8923-fec819c336e1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b34c7fe1-1e18-34c7-9811-10e2a21548dc" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="AUTOSAR-M0_1_10-a" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="cd424924-f19a-3083-bf8e-7c286d6dde9a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="48bb926e-0a35-3d0f-9ab2-ffdc70ee77f2" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="MISRA2008-0_1_10_b" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1572071035" unbViolId="d5041ed5-62db-396b-b811-768e68aa4c7c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6a35263f-1c0e-3f62-8650-d66738663b57" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The return type of the 'getShapeRatio' function should be declared as 'auto'" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="CODSTA-MCPP-08_b" lnHash="-1572071035" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1572071035" unbViolId="6b3e9e1d-b56e-3df6-951a-6951da04cdec" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8acee976-384e-306f-aba4-e0ece7cc64a8" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="COMMENT-04" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="74502edc-4873-38e7-ba3d-416a3988370e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c158db34-7290-3696-9cfe-4892e5bef2bd" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="JSF-134" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="40e14c0d-4f81-3c09-b597-5d80b561a31a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7950135c-9570-3161-80d7-1ac7fac1d2f2" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="OWASP2019-API9-e" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="bc4a7596-3953-3da4-8d7e-f88ef6ba2728" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38194d3b-7a7e-3c85-a348-0aa1c2a713d9" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-A3_3_1-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="3ced658b-eb27-382b-8b38-0a80efb6655c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7838c980-45a1-3346-983c-8cc91868786e" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="JSF-137" lnHash="-1572071035" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1572071035" unbViolId="c778ac79-cb36-3fad-a61e-5bd12a917451" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e93db6ce-e39d-3c52-b900-e778ad4a1f3f" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="MISRA-023" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="3c5baa43-7c53-3069-af26-d492bc697008" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb36f3a0-200d-3fb0-90ac-086d6d82dde9" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="MISRA2008-3_3_1" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="27266d8e-4693-3d56-acf1-c7092edd0097" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76b63e06-4251-32d6-8edf-7299a05c2997" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CERT_C-DCL15-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="86fc9455-9340-31c2-8246-e76a83625f64" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="844c228a-79c2-3ee9-be61-417379b4ad8f" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="MISRA2004-8_10" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="b05181bf-7579-3853-9c6d-56bbc728b333" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c47bd38-c611-38c0-b178-2d553ccc5012" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="JSF-051" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="df8f01db-b4b3-3586-9846-d075e8d32851" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9dbd875-8cc7-3beb-8dd1-af8bd19a703d" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="NAMING-44" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="d4e07b2d-85af-351f-8f87-c4cd35ee59c2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="038f1bbd-908d-36cb-b29d-1b2d7e313763" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="JSF-098" lnHash="-1572071035" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1572071035" unbViolId="cf60ffdb-a4c3-351d-b291-0d6525afa46d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f498fb45-1757-3207-b9a1-50993f152520" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CODSTA-CPP-36" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="8b8818e7-22bb-3a5a-81cd-5c7e106c26a5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11f2afd3-3323-3934-a190-c378769a0970" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-M7_3_1-a" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="e6802ed5-dc5d-3fbe-bbc0-e842ec7a7066" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85ff064c-be5f-32a6-81bf-48ca499279b1" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="MISRA2008-7_3_1" lnHash="-1572071035" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1572071035" unbViolId="f19755e1-0a1f-3b19-9f35-608c3d0f702c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32554c21-e4c4-362a-8cc4-8d4998a21e44" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="COMMENT-14" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="3bd42c81-4cf4-3289-adbe-716b9d1ab68a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="154381ae-67a6-32f1-b6a9-52c88a26fab9" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="05c13b69-103c-3b90-8e62-1cd064a47cd5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01ba0c13-0210-3419-9fa9-cf7d1111d134" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="8f642f45-476c-3dec-b76a-eec33e191b35" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f204526-7bff-3208-b118-a5c143bb5507" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="8be59e34-6c73-3058-adc5-6aed09abb7a9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e402f91-e294-3f6f-8714-063a23cd42c1" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="8a194f42-3dc7-3ba9-b3b5-faa1a3124eaa" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e8dfe37-f8f2-3333-bcef-b93e334f70f3" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="4ae6a023-08c9-3289-8f6c-33268d70088a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="accf62b1-f413-312e-9949-632114c6ad6c" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="15c73606-8ccf-327f-b710-6cbd01c79ff5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbfeef76-af21-39fb-939a-52e77a7d913d" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="4d3abc52-0ae2-3e06-9a3c-77d49988da70" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9197862-da2b-3af9-b1af-821dc1172fec" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'getShapeRatio'" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="FORMAT-28" lnHash="-1572071035" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1572071035" unbViolId="104b082b-7398-39be-8529-ab8694077e5b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="579787a6-e32c-3dff-8aaf-8791273cc4f5" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has Cyclomatic Complexity value: 1" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="5" auth="yshi" locRef="2" rule="METRICS-29" lnHash="-1572071035" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1572071035" unbViolId="bdc21a7e-0614-3ed1-98c1-7f75429350aa" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53c4d0ab-f9f3-3b9d-9c4a-ae4a6a8f45aa" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has Essential Complexity value: 1" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="5" auth="yshi" locRef="2" rule="METRICS-33" lnHash="-1572071035" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1572071035" unbViolId="c83108ca-72ab-33b8-ac95-b994e9c935b7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ea810ea-190a-3932-a740-baa6e93f7e5f" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Naming convention not followed: getShapeRatio" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="NAMING-17" lnHash="-1572071035" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1572071035" unbViolId="39868115-7ef7-33b8-8856-4194905d1c8a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb6342ef-e1c4-3ad1-8a1b-8cf5ba634e9d" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: shape1" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="3f009001-83bb-3a10-8e83-7bd5322b795a" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b71c8c7-1fb0-3700-b835-0491760f5595" locEndPos="29" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The parameter of pointer type is declared: shape1" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="5e9371e8-781a-32f9-a096-521087befea8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7a7939a-af19-3453-bfa6-1d5687967e9a" locEndPos="29" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CERT_C-DCL00-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="ba4b3707-d70f-3ae1-837e-d3ad315a9c1f" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dc93d31-8384-39d6-99bc-297eb53e43f7" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="ac7876fe-e331-3c09-a09a-4cc4269fd597" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91fd724a-9af0-3a6c-9c0b-8976670ddf36" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="MISRA2008-7_1_1" lnHash="-1572071035" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1572071035" unbViolId="21d75758-a87f-353e-8825-40fa3dfc4b36" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfc30747-50cf-32a7-86f1-d25b5b16a78e" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CODSTA-CPP-53" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="931903f0-c1bc-3df2-85db-deace18a1e2e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d408fa12-63bf-3b1e-b87b-02319dd7c4fb" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="HICPP-7_1_2-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="3466b6b1-5ca8-3373-a85c-fff6d8776e3d" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73da6abc-f3b1-3a8a-83bf-8b2e0975317f" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="47bf1565-a8c9-3cb4-8b0d-7f487538c3dd" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="907b2148-c7e8-32b6-acb8-1237d6d6dc7e" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="093ffbeb-86d6-31d8-bf4a-ffd7c80358ee" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e966d6fc-3675-346f-946e-bfbb10e4f741" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="62b31b00-b2cc-38a0-8c43-61ee223fd6e0" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5eabd86e-63fb-3877-8159-31e980aad78f" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="4d1e41bc-a0cc-363d-9257-415f4be5b937" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd8cbce2-173b-3e36-83f4-78d68a25e6eb" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="d1d31e8d-433c-3049-a5d2-dd32673ce4c8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="631a3e43-7b09-3267-b093-75e653630c4e" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="64c15ab7-7e4a-39fd-a24e-c421d1247b87" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a0236de-649a-3000-b289-6c6341801b13" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="06bbb3f6-bbfe-30db-ac85-9f8f1c6a0baa" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bef1690d-179a-31e4-83d2-1c62295b7840" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="fefb1b26-49f3-3903-97b0-e14fc1844c23" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16cefd90-a4d2-33de-b88b-791ceb51055a" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="1144032b-6b20-359f-832f-8b70e22aba1d" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49861020-1f49-3767-a028-181c6b202a9f" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape1' identifier should have the 'p' prefix" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="36077e6d-67fb-3d84-93a2-03d2987a71ea" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3323f17b-827b-3873-a5c7-74d6e1d20b0f" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: shape2" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="990a87d1-3424-30d9-b3c1-ecc69b795bd7" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bcd4f0b-6371-3253-8ce0-e20c16233546" locEndPos="44" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The parameter of pointer type is declared: shape2" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="71e62825-938f-3021-8c72-db9a45cce5ae" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="958d8a7f-6d41-30ed-9845-83f94935f224" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CERT_C-DCL00-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="ce6be413-bba1-3adb-828c-d38e82aab3d6" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cc8a1d7-5275-30ff-892b-75f73771c43e" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="c670f285-acc9-3a0c-a82c-b1ca02a38577" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3220a035-6f90-34c0-9f71-9358fe25213d" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="MISRA2008-7_1_1" lnHash="-1572071035" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1572071035" unbViolId="10ee864f-221c-392e-bf9a-f14c67d71328" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c829c652-3865-3c2b-a55a-61eb881607ac" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CODSTA-CPP-53" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="499dc312-2f39-3007-9dc8-140931668724" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="150d5863-64fb-3d72-8645-d20e187a37eb" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="HICPP-7_1_2-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="38affad1-cf5f-3a93-927e-e0ce4612775d" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3eee915-2ae3-3bf1-b020-d522633b6fde" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="8006cdad-749b-344d-8c03-6ba94c236edb" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c5c754f-6afd-3dea-8536-9fb33de60975" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="319b4aa0-ab68-3bd3-8704-c9f39bc061b8" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9dd2221-9d8e-392f-91b5-470b61b41459" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="74068a62-52d8-347b-b56d-f97348695df0" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a908dba4-21fb-379e-8d25-c6f1da19d909" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="19ca9fd2-2438-38be-a19c-c8b258cfd050" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="221d7755-4be1-388c-898c-7ac869c17e30" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="2837f0c9-469d-3f35-9f88-14de4942cd0d" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d94c0d2c-de03-388e-b1d7-92898f89afe6" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="36bcce59-6797-341b-b583-db1d505593c6" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f55bb7e-dee2-387b-acfa-b42b99cbf437" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="d0462922-2b0a-3fc3-a684-6c53dc3e8082" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fbeb323-9b49-3072-ab06-b3a2eb3c5bdf" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="yshi" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="35fbb53b-b922-3ac4-a0cb-47f895826625" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff945101-af31-3b5e-bded-d8f9b2a3b31f" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="yshi" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="47a4a565-e868-3b36-a26d-1d3ae4d5ef4c" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dac0228-1345-39a7-8772-155952e40a2d" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape2' identifier should have the 'p' prefix" ln="3" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="yshi" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="e81164b5-62e6-3fa4-9da2-f1d1cc4eb023" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55809b78-1625-3382-b73a-2824ba0625ff" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="4" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="4" sev="3" auth="yshi" locRef="2" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="1828d9fd-5834-3efe-b63d-4d766929eb47" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81abddbe-a7f7-3993-a3fc-dd9087f73704" locEndPos="1" locType="sr" urgent="true" hash="-1665970746" locEndLn="4" goals="1," />
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="5" sev="4" auth="yshi" locRef="2" rule="JSF-043" lnHash="2070090220" rule.header="Tabs should be avoided" tool="c++test" lineHash="2070090220" unbViolId="7202062c-eb0f-3f09-ae3a-c320f42e95c0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b768c1a2-17c6-3733-8b37-5ba42dd55de2" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="5" sev="5" auth="yshi" locRef="2" rule="FORMAT-01" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="7fe9c8c2-27cc-30f4-8ef8-1023da45ee65" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e51421cf-f84a-347a-a1fa-7fac1392def3" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="5" sev="5" auth="yshi" locRef="2" rule="HICPP-2_1_1-a" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="acb65bc1-f5ac-3426-bd1f-e4eec5976020" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cea5f46-f3af-3a0d-9e66-56e01c2f4a1b" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="5" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="5" sev="3" auth="yshi" locRef="2" rule="FORMAT-25_b" lnHash="2070090220" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="2070090220" unbViolId="e4beaa13-8ce5-3bb4-b67f-0cb90e7e15fa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30c47a73-016b-3de4-947c-4c3c492fb1c8" locEndPos="2" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="5" sev="5" auth="yshi" locRef="2" rule="MISRA2008-0_4_2" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="482ceafe-714f-3f63-9e92-c8e6f5afb8d1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c6c231e-5453-3c00-96bb-662111488c90" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="5" sev="3" auth="yshi" locRef="2" rule="OWASP2019-API9-d" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="475f4e73-a9e9-3004-af01-dc3f3334eca2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b90990a1-6fc3-33f4-a244-8f05fa70e1f7" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="5" sev="3" auth="yshi" locRef="2" rule="COMMENT-10" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="be7aef52-4d40-357d-96fc-38a82f224636" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11e3a01e-de07-392f-983a-01124c1ae035" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/FlowAnalysisCpp/DivisionByZero.cpp" locStartln="5" sev="2" auth="yshi" locRef="2" rule="AUTOSAR-M0_4_2-a" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="8cc32ff4-db02-384d-a5fd-48193a054909" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59055d72-c133-33dd-8147-6ff72eda3ed9" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="PREPROC-18" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be included" tool="c++test" lineHash="1233725276" unbViolId="1bdc0070-639e-3129-b270-0d2a7400a426" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e7e6965-6cbb-31f4-a62a-9e95a47a73e5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="yshi" locRef="3" rule="JSF-022" lnHash="1233725276" rule.header="The input/output library &lt;stdio.h> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="ce5f6d0e-138a-3b49-9ce9-755436830b21" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f072be7-69a2-3cfd-a858-2c4467578b53" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="METRICS-31" lnHash="1233725276" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="1233725276" unbViolId="1ff35a2e-9b8b-3108-b058-106903880ba3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b315c0f7-682a-3456-8848-ddc6a44c8e7f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'MemoryLeak.cpp' should be in lowercase" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="NAMING-03" lnHash="1233725276" rule.header="Use lowercase for file names" tool="c++test" lineHash="1233725276" unbViolId="4730686f-87c0-377c-be04-6a9a7500a4fd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="673a28fe-ed75-3191-a79c-191908d4a541" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="NAMING-38" lnHash="1233725276" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="1233725276" unbViolId="c7204904-e823-3041-bee0-e97e07c82e7d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ff276fe-8266-3a6f-8f25-4328e600fe47" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="5" auth="yshi" locRef="3" rule="PFO-04" lnHash="1233725276" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="1233725276" unbViolId="789be7bc-9cba-3c41-a2cb-f5b2b5c3aaa1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92b1af59-0de1-376b-9851-1c1e9994fa3c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="yshi" locRef="3" rule="MISRA2008-18_0_1" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="ad0bb957-91b6-3aa6-8cf1-683014e23993" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45daddd7-d52e-389f-8ed3-dd52eebf4a23" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="HICPP-1_3_3-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="cd757888-94c5-3723-8617-23a35a45b598" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9743dfb3-5b03-3e07-ba54-8b9dce7509b7" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A18_0_1-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="b54d97ef-0ae8-3b29-84f6-e8295930baf1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fa1c9bb-3786-3468-b95d-318e779d9eff" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="CODSTA-CPP-59" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="254a72e2-a3ea-348a-a69d-01f513473832" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6295d029-9258-3162-8841-5d079990bbe2" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A1_1_1-d" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="04ed5bfd-c075-3836-b823-eeb6730f0ef3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="194decb6-b639-3995-9847-9bf80725f3f7" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="COMMENT-02" lnHash="1233725276" rule.header="Provide copyright information" tool="c++test" lineHash="1233725276" unbViolId="ff3e6c0b-7c60-33b4-aa9e-629ca0bc924d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2413bfe4-390c-3e74-a71d-25eb74b0a2f9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="JSF-133_b" lnHash="1233725276" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="1233725276" unbViolId="9e171f22-b0d3-3eb5-bcbb-60e07d32f255" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf9b576a-8583-368f-9995-59192a552ec5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="COMMENT-03" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="f95610d1-6543-3f7b-a38f-0247dc367226" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4444678-5938-3ca6-b54b-a56e00d15aae" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="JSF-133_a" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="78aee80b-24dd-3547-97f6-7bcfddc223bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e10e4a3-2f8a-383a-b78d-a31b3583808b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="4" auth="yshi" locRef="3" rule="HICPP-17_2_1-a" lnHash="1233725276" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="1233725276" unbViolId="0e7d29e3-5240-3ddf-8426-4b5b3b1f8c3d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf9be598-5b57-31d9-8a37-0efc257fa82e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-M27_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="0d91c0dc-1c64-3d05-b694-dc0bb970bf1f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74af46a0-eedc-319f-bb81-b644d0e6207d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="yshi" locRef="3" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="e888af04-eff9-3a66-8755-ed1bba17706d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36ccd29f-d748-37a8-b217-80ca0f5b5bda" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="yshi" locRef="3" rule="MISRA2004-20_9" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="b934be2c-17fd-3772-9d71-d7dd2f385e5f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a63d3ab8-7d6e-3743-a6df-35de3b09176e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="4" auth="yshi" locRef="3" rule="JSF-098" lnHash="-738024550" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-738024550" unbViolId="5083bed6-b1d8-354e-aede-7dcf0ddd5b35" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b04bcd1-fa56-3713-8dfb-250e6e301c1a" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="CODSTA-CPP-36" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="b71cac0a-6fb7-3dcb-a5e7-5c38017c81c7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="616a70f7-923f-394e-aacb-62364b4d42ee" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="513137d5-fd90-3a1f-8821-9bdfe31ad106" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6174405-2d51-3517-8045-f001dc3b4a56" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="yshi" locRef="3" rule="MISRA2008-7_3_1" lnHash="-738024550" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-738024550" unbViolId="3781f133-21fb-3855-99d4-eb7f1b160008" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e607ff0-6115-305b-a85c-2f220b202454" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="COMMENT-14" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="633d32d2-a9fc-3aae-b8cd-3afe05fbd32b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="815211e4-aea2-3abc-a64e-e095859a59bd" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="d3aef6bc-8c17-33fa-8b46-2a255b0d8d23" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2efdd6d-be45-3387-8dad-989bc3d91d3c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' does not define any constructors" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="yshi" locRef="3" rule="CODSTA-CPP-19" lnHash="-738024550" rule.header="Declare at least one constructor to prevent the compiler from doing so" tool="c++test" lineHash="-738024550" unbViolId="70a113a8-b51b-3c17-8938-75117b6b7787" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72c4d786-d6f1-3daf-8748-a73c1424d50f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="4" auth="yshi" locRef="3" rule="AUTOSAR-A12_4_2-a" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="4bcdcfff-3288-359e-b5f7-6556256d6a89" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13492b46-a2e6-3c01-8671-dd6bbbfb68ba" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="CODSTA-MCPP-23" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="daeb6e20-064f-35e2-aa58-c8a1fead04a3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="157720a3-e056-3c71-b87f-fef4c7b8f175" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare default constructor in 'IOException'" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="3d29f140-e40e-3b98-a5bb-97805036cace" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0daaa992-0a4e-3074-9763-3ed55144b304" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare destructor in 'IOException'" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="11bc95db-5d6d-3d81-a658-105ab320cbce" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66e388dc-7f6d-3ae2-a287-9acfad5b571c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare copy assignment operator in 'IOException'" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="ddfce4bb-df0d-3a96-9795-49ddab5178cb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76a905f5-482e-335f-8b3f-9f19728a3010" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare move assignment operator in 'IOException'" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="b8a171e3-21df-3147-b92c-55dab5e2aa24" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f59d44e1-0934-39ab-9ae9-e6abde599969" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare copy constructor in 'IOException'" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="0c233f29-dbf3-3697-a029-d1428e463436" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85afca84-96e1-36dd-be39-6bfa7f77339a" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare move constructor in 'IOException'" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="9fe7fafc-bbc9-3b5b-b58b-6cdde8476980" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc6d7c05-073d-3749-8003-025bc3622212" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' missing assignment operator or special comment" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="MRM-04" lnHash="-738024550" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="b5eb2bb5-f317-3e90-9d33-382cde3e1531" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3322641-2ac1-32b8-863c-ccd96ada8f2c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' missing copy constructor or special comment" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="MRM-05" lnHash="-738024550" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="ab972a5f-a3aa-3446-9631-2376d738dd74" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="049bffff-18de-3978-a3d7-8b1bac0b585a" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="All letters beside the first one in name 'IOException' should be lowercase" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="NAMING-40" lnHash="-738024550" rule.header="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" tool="c++test" lineHash="-738024550" unbViolId="820069a5-2473-3366-b09c-659aa44ce21b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23fae450-4add-3512-acb5-09285d9d450c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The 'IOException' identifier should have the 'C' prefix" ln="3" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-19" lnHash="-738024550" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="-738024550" unbViolId="4c378da2-fdff-3eec-b8a3-9b876358747b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa0f7d05-f224-3b12-a58c-6fbfeec9b1fa" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="67ac16d1-2101-3776-8459-a5cf31000bd8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f134b83-39de-3b67-8ee1-e84912937b05" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="36a20592-9a5d-3cab-861f-e67c7d6ac14c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a8c4f98-bf96-3273-adfc-5a3b37aab790" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="856310bf-2794-3982-9fa5-7309820b41a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="123bb7b8-70a3-37b3-9540-7d614e0429ba" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="57947ad6-e7c9-3b47-9ddb-f6bcbde3d360" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0f742f2-545a-36e9-a023-b73608a92a25" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1086168919" unbViolId="d2a89e39-974f-3369-a01a-580a0d87814f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3589f98d-c946-3d20-aee9-19c07f7f1cb4" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="1c9cb310-0244-3754-bf0c-ff744dbf4b9d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0d91e97-5bd4-3d9c-b591-e87af762b05f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="1e7e954a-7eeb-314b-bc10-f2b20a44b7e2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59c17087-3780-3cbf-81af-0c76422d1737" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="f4cdb5e7-af84-3861-ba92-7166b6383ec5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f919c47-2629-3a5b-b03c-4a665a9e20df" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="57128849-74a0-3bac-a2c3-4fc04aea2757" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1520fe21-34ac-35eb-9e5e-197798546462" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="77096879-f379-31c2-a7b5-5f33418d1c9e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a7313cb-74ec-3670-8738-e6704426fb03" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The return type of the 'readIntegerArray' function should be declared as 'auto'" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="CODSTA-MCPP-08_b" lnHash="-1086168919" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1086168919" unbViolId="19541e5a-7ff4-34c6-889e-26556bd5e77c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4348cd09-eece-3626-810e-82bc8079ad22" locEndPos="6" locType="sr" urgent="true" hash="1013754779" locEndLn="5" goals="1," />
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="COMMENT-04" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="9aeb4ea7-5f4a-305d-aaa9-6ed545a1767c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faed1ccb-cf6f-3d2e-8792-b5144a3f8e04" locEndPos="6" locType="sr" urgent="true" hash="1013754779" locEndLn="5" goals="1," />
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="JSF-134" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="ef864028-c36f-3863-8a2e-b80b6994a249" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cd4f499-0e94-3f72-93d3-f62174aa539b" locEndPos="6" locType="sr" urgent="true" hash="1013754779" locEndLn="5" goals="1," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="OWASP2019-API9-e" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="a9376099-2937-3482-9234-461bbd637154" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f6de55d-4fa9-3b7b-a685-d62e35f3c023" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A3_3_1-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="1f2bf558-fd93-3cb6-913a-2d65e5c8ad83" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d08b42c-3fbc-34b3-8d6f-769e6629aca7" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="JSF-137" lnHash="-1086168919" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1086168919" unbViolId="e5de33b3-4e6e-3491-b4dd-50b3dce68899" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2c813c8-afb0-33b2-9c1f-cd68816de8cd" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRA-023" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="50a850a0-01e9-32db-a9b4-a8449cb26e79" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69f5e90e-90b2-3e47-95de-ae0382523a82" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="MISRA2008-3_3_1" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="c091c2e3-6818-3fc9-add0-baa8deade947" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="befb344c-7293-3704-8df9-246780caa6e1" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CERT_C-DCL15-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="ffc13de6-0b02-3471-842b-bf7c91ae4e50" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2c6a1b9-e5f4-3a28-9cd4-ba56ec6ffeda" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRA2004-8_10" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="b0d0dcc3-6f6f-3a90-a3a4-a0c3b8a58b43" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e951345c-bb11-3bfe-8eba-324c428c0eac" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="JSF-051" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="f8b28df4-977a-35d8-a8fc-a4bb127be278" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6e8e364-49da-3fca-8b55-0594af7ee81a" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="NAMING-44" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="03d018a3-8d04-3443-bec1-01a330e9f34e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18b35fa6-3e16-3cf0-a948-84593da63efe" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="JSF-098" lnHash="-1086168919" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1086168919" unbViolId="d1c5b1e3-04cc-3603-becd-ee1a7e346daf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="352c9321-3103-3cb1-9930-e663f01a73e9" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-CPP-36" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="4d1104ec-fe0f-3d98-82cf-2c63a5795a72" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87711bbb-d7ca-3488-81f6-2480dbea788e" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="2c43ba78-076b-3b95-a768-01c8288413d1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1856f906-228f-3492-813e-48faf07ec1c1" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="MISRA2008-7_3_1" lnHash="-1086168919" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1086168919" unbViolId="f10e34c1-978e-3e3d-866b-d5cbc872c6a0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91932163-11a0-3b3a-8143-66eb3a4c02f8" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="d38f9546-9f37-336d-9184-525074148b99" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab325b62-b874-357d-9cb0-2512213e3f76" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="aefa2b4a-d0f6-3436-b7ed-8c1fb3bda38b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a48fb5a9-ab5a-3212-a0bf-12377473f17c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="COMMENT-14" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="a5ec1aff-66b5-3d55-9484-46307f4d0460" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f2a086a-7d17-3a41-93f7-8a3b4881c25a" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="27546864-dce1-3f84-9ba1-c6895edcbceb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2e867c8-b831-31e2-a383-749a408b29b5" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="422b2c13-4d6f-3707-86e7-b412eae25353" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9fe5781-68ae-332c-9678-7dfbefe6a184" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="6ac715c7-01ae-3e95-ab83-cf79825fccc7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="268e4908-236f-37e6-b260-f917e081040d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="c1c2f9f4-a9cd-387d-985b-c9debaf63624" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90b674e0-c7fe-39cb-b4b0-ed2fd57acccb" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="460706a1-1cdc-3866-b210-8e5720484a19" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64a42d23-1b10-34df-a0a1-c277f9d9246f" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="8189d7ab-dc25-3792-af32-e4f321d917fb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15559167-02a8-3821-bfbb-3eff37d015ec" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="27ee0a2b-66b1-3033-8b36-f4e3fb6e7365" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7ce07c9-63d8-39b6-8d89-a8bf01a67fd8" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'readIntegerArray'" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="FORMAT-28" lnHash="-1086168919" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1086168919" unbViolId="9908e864-d20f-3dbf-bbd8-a5f1d57267e0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cea5314-cfdd-3441-8b71-d57a8a297b9c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has Cyclomatic Complexity value: 3" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="5" auth="yshi" locRef="3" rule="METRICS-29" lnHash="-1086168919" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1086168919" unbViolId="5b325732-8801-37c2-9134-a86b4d3b0d6e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c99d099a-0fa1-356c-985f-5b4f4009850f" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has Essential Complexity value: 1" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="5" auth="yshi" locRef="3" rule="METRICS-33" lnHash="-1086168919" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1086168919" unbViolId="dce76459-6978-39ac-ae28-95f9343e9620" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dafd1ed0-d1d6-39c1-b654-82fe3c925e2b" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Naming convention not followed: readIntegerArray" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="NAMING-17" lnHash="-1086168919" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1086168919" unbViolId="cdd2204d-07c1-3f69-b7ac-6e09f7fdcb3b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ba77276-a3eb-3ecb-9774-8035c5150a72" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="GLOBAL-UNUSEDFUNC" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="1756db59-23df-35ba-99c0-a76074023438" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="63257e7d-20ed-3dd8-a7e3-1eb0a9fb5ab6" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="AUTOSAR-M0_1_10-a" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="92fa4fa8-87a4-3829-b0e1-82cc671045b0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="9b647347-d520-3b8b-9eae-49b5cad7adcb" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="MISRA2008-0_1_10_b" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1086168919" unbViolId="7acf08d0-6a6c-329a-90dd-cd0c77f8a6a0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="bf5a6f8f-7469-3eb7-b3de-bb798814661d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="NAMING-45" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="b68eed7d-2e54-3e1b-8ecd-a4dd73bd2120" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a485eb37-b5b6-301a-b5dc-693148ef8c54" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="JSF-048" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="d6289375-8da5-3378-bd43-7f9b8d824830" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b06c2f1-d5a0-3831-af45-67af4c1b9acc" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: file" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="82a54a5b-c0f8-3ddc-812c-b72cc410bdfe" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df772542-201a-32a7-80c0-2e8c579dd6a3" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: file" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="4404a840-2df1-330f-a1c2-93be19e53f16" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02e206ed-3d19-3c9b-a7bb-f1a029422b17" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="MISRA2008-2_10_1" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="334e2245-bc4b-376e-9c5c-5e248ba3ad3c" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="343453f7-3c25-3e0e-9180-01c3654e8dbb" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="HICPP-2_4_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="23dd882e-1c6e-3630-8197-a19a3c245a56" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="225634e2-cb47-3808-ad23-0bcbd0da1d8c" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-M2_10_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="bebf7c46-dbbd-33f2-9a29-e79fdae9eac2" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae6b9710-9c75-3211-a31e-695a9963b21e" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="NAMING-47" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="8c411341-c38a-3f30-a4fa-59e770c0f204" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fb6bed4-1160-39a8-a882-a7e513ef8a4d" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CERT_C-DCL00-a" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="03f204da-298c-3e62-aec5-102ed2e3d99d" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9697f71e-e8f6-329a-89d4-5eb3ca427f69" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="43c8423c-ab00-3266-a7e1-84fb98592459" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b97da3c-ec29-319e-a918-729bb54a9ef2" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="MISRA2008-7_1_1" lnHash="-1086168919" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1086168919" unbViolId="1102ea12-9481-3c9f-adba-64fce6906da0" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31bae617-2670-3da8-b3d3-3d7e7eb7c9b6" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-CPP-53" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="d976f996-da47-3a2e-86a2-e452cb7c21cf" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50ac7d44-f60b-3dcb-9b9e-2f56148aadbd" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="HICPP-7_1_2-a" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="201a435e-b065-3137-8cba-d2ce18bbc354" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a896a61-9bc2-346c-8050-325202e5ac9c" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="b82b7e9c-f01d-3a4c-8970-ac1e54d9a16a" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dadd5f43-27b4-3403-abd5-a676f4759b24" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="806eedc2-82ec-30ce-9598-dd1d7eebe902" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b237c898-c90a-3b64-a94a-79e3b081511c" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'file' identifier should have the 'p' prefix" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-34" lnHash="-1086168919" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1086168919" unbViolId="0b59f460-e1aa-3d06-bd5a-c8c715d792b9" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23d1978b-e7bc-3adb-bfa5-b1077a480c43" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="b0219593-da04-3462-a09a-9189a4ff5d16" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df871372-d9d3-3429-9898-a676e6971a83" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="9227cbab-ebc0-33c5-90f9-077463a25bbc" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a448873-125d-3022-95d9-3888ebad3491" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="a0b9472f-a4d9-3c90-a469-aa2e84512045" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1daf073c-0cc7-3aef-a53d-5081349356f1" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="ad122749-be24-327a-86f3-4059fbdb5767" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="978989a7-29eb-3e59-bae2-9ef7705e9a79" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1086168919" unbViolId="66d257e4-ebe3-37ee-bbfa-e8fb934bf3e1" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7f3f4df-8040-3e77-8e22-68e9fe009735" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="9c581cef-b248-3e3e-ac37-3ecb45152793" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8323ecf-5121-378f-9c81-86efb790fe0f" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="e550acb3-0bcb-368c-a7f7-32f25aaa5fbe" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86c1b934-ab39-362c-8b42-76430a30d1d9" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="39931e26-f89f-3b63-8342-e6af58f42bc5" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0caba53-cbbb-3b8a-8699-62e4827519da" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="0e1c2ae0-e36c-365f-b968-c97fc8a6bef8" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccdc089a-6de1-39f5-9422-748b11de946c" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="8a1e3d07-98e8-38c4-ae2d-8fa402cda26a" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8792494e-17dd-354c-aa7e-0e0fbbd14854" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: pSize" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="df1156c8-8af3-38f4-bb7f-301c4942d2a3" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc794d98-8edd-379b-84d6-cfe90b1fc7f8" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: pSize" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="3a68336b-7df5-3b94-86b0-f1d9187aeb35" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b01a48d3-d62b-3ccf-98c8-d597132e1964" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="e6dc020c-77c6-32ab-bd0b-1dd85f51af04" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d4aba2a-4afa-3106-8384-b5ab4ab74fee" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="72231a27-add9-3ce7-9f54-ddb5e8ed441a" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="607fe08c-cbe6-336d-a71a-89020d74b777" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-M7_1_2-b" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="9b4de486-5bb4-3068-9b1a-7448c4cdcafc" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e6a2f7f-2e8f-3630-9b0d-ae48ed2eff4e" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRAC2012-RULE_8_13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="521a72fb-c23b-30e2-973a-fe6c523a79ad" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67298b76-aa58-3068-866e-a525f4d0be32" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="CERT_C-DCL13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="35133239-b0ee-3cf3-a3ef-d903c182a109" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c90f4bef-25ec-3242-bdd7-e853d1c7560d" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="MISRA2004-16_7" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="a59472c3-4d29-3d51-ad61-a02d7df18a81" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fb1d39a-3610-398e-92b1-5e0a90da3b17" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="MISRA2012-RULE-8_13_a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="5dceeed7-5b02-3425-9281-6e9f65f206af" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0461d30-a904-3f8e-a63a-8777fa6b3ba3" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="yshi" locRef="3" rule="JSF-118" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="0267ce37-d19e-350c-863a-3d2f886d9b62" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0104b6e3-afb2-3e40-a2f5-57ef910a4464" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="yshi" locRef="3" rule="MISRA2008-7_1_2_a" lnHash="-1086168919" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1086168919" unbViolId="6a295bb4-fe4a-30d3-9a6a-f4f2aa4faf81" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c8146a3-b733-3265-bdef-a343209eb649" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-23" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="4a3ce322-e0d7-312b-9c44-3a90c3d3dccc" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e30e95d4-d04b-3abe-99b5-13557f1890ac" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-31" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="9b8bb978-c307-3982-84f3-01fac30c8986" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3d0c1e0-5b7a-361f-b8b3-805d0786a3f9" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-44" lnHash="-1086168919" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="58181a1c-6963-3a26-879f-a9cd182cd851" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99556ee6-8c9a-3ffb-8784-9faca2d6c428" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="6" sev="3" auth="yshi" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="1442b212-60cd-3ee4-b0cb-8c20f161c0c8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f773d030-01f8-3d08-9304-1c337678aec6" locEndPos="1" locType="sr" urgent="true" hash="1013754779" locEndLn="6" goals="1," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="-1844934654" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1844934654" unbViolId="6833a4a3-a4ea-3161-b3fb-8cbe48db7719" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4a5bc6e-547f-37ed-8661-b80169c21a9d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="d059158f-56e8-3bbc-8c7f-2342a65bd69b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36b01d6c-9b16-3e07-8ee8-267c74dd53b4" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="9abcc503-cc28-3b11-ac08-cb46d4d9aa45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81b108d6-504f-3429-ae23-9d0538de1ba9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="9282eb3c-8c9c-30e6-b472-77ff5dbe9646" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f117b2fd-5ec0-33d4-9eea-b611f9d7efaf" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="1bf84e25-2ff2-3d3e-a06b-3be61eb65509" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4af52aee-7ea5-3a66-9b69-119d4f43c701" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="CERT_C-ERR02-a" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="e50f0d4e-8cf3-3df4-a11f-ee7ab9cb3e9f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39cb2f30-2d29-379e-8f86-46c4ce5403ef" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="CODSTA-110" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="62b8493c-3814-3a4e-aa9e-11472dd7779c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2202668f-a536-3eae-8128-19289a7a73d7" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="CERT_C-ERR07-b" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="8329a26c-fc85-344b-a289-ac8284438d13" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b80e680f-3c7c-309a-8f51-095c081064b9" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A0_1_2-a" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="0414158c-3c6f-372a-9c7a-b913ab845ed3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4945e260-2793-3c1b-9434-290cfc7b6f78" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="CODSTA-CPP-58" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="81ee3114-f649-3214-bc42-ad858b9b9773" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23c62de6-3891-3265-b421-b4f71c50b2fc" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="MISRA2008-0_1_7" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="3434e496-6146-37b0-ab52-5a7a9d213214" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a36defd-e2b3-3cdd-9592-a46f06b89c12" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="4" auth="yshi" locRef="3" rule="JSF-115_a" lnHash="-1844934654" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="b664f824-aaf2-3ed7-85ef-2a05c3a7cb1e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78535181-f14b-37c7-a215-0b6396672186" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="CODSTA-122_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="a32f628d-bbec-3256-913d-eb54e6f5e666" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a60712f2-1c25-3c86-bfe0-fe4fbd01b1b9" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="yshi" locRef="3" rule="CERT_C-ERR33-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="2f751526-bba4-3cb1-be2c-1ec42b64f0ca" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfcfee38-61a0-309b-a367-3e1c4d04adf0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="yshi" locRef="3" rule="CERT_C-POS54-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="06049f64-6db0-3580-96d7-492bb5cb39e5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0d277b7-6bfa-371b-824f-b9f0ab0139dd" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="0a6fcd9f-cdc5-3f62-bc68-149351ca2e58" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88430edf-5d0c-312c-b982-9c2572ff8acc" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="CERT_C-EXP12-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="bddfaa26-1ea0-30af-a336-429d425dd402" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bfea5c7-584a-3d55-b639-6ff4c57a429f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="87c0bca6-e4dd-37d1-add9-d5ff56b9189a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca707f6e-37c1-3d92-9c25-ff4b4e47b107" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="MISRA2004-16_10" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="ae0fd732-f025-3d5a-8b8d-f3c38489b9d8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ff24492-53fa-3ed9-ae2b-1818c8cb5833" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="d56da05d-e61a-3d65-bc8a-b9a2e490528c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a96c2861-3db8-3085-afc3-f7596de4ea07" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1844934654" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="0dc4b260-28c5-32f1-bcbf-c0ab849828d9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c68446fa-c4bc-3c6f-b995-227eb29d38a0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="JSF-115" lnHash="-1844934654" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1844934654" unbViolId="a778ac72-6339-3919-94a7-f209e0b7a5d8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eff49c0c-4ae6-3214-8428-513f204ab973" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="APSC_DV-002390-c" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="1b6e8f25-1b66-3170-9831-44789d5dd4ea" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a74e46bb-3fcc-3639-90f5-a9a51304ea7b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="SECURITY-14" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="fa33c069-7973-35d9-8881-7bde25be8667" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfbd2d53-6b2f-32b5-a742-fa0c2e77dc06" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Prefer iostream.h to stdio.h" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="yshi" locRef="3" rule="CODSTA-CPP-01" lnHash="-1844934654" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="-1844934654" unbViolId="72a60861-18da-3157-a869-e01ecf40303c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5808c94-b73c-3a11-8f26-2d44cb91a5f7" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="yshi" locRef="3" rule="CERT_C-STR07-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="fbe64ffb-6f78-393e-9f75-cae997e5bd01" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d967a270-224c-3bee-b194-3b7c5e148aa0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="ca4c54d5-145d-3369-a212-5809e591836a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1546a8f8-82b9-3c05-9d6e-d49cf8dd7e25" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="CERT_C-INT05-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="ec119b66-e789-38ef-9f01-b0f8baf9a574" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c44e381f-e50f-3672-b21b-2280c6bc953c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="SECURITY-13" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="80243d04-fe93-3c27-b626-132d80941c24" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1241222-dc54-3ebf-bb08-98afd75092ed" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <DupViol msg="Duplicated string: '&quot;%d&quot;'" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="CDD-DUPS" lnHash="-1844934654" rule.header="Avoid string literal duplication" tool="c++test" lineHash="-1844934654" unbViolId="ac0b9632-8465-390a-a63e-6d563bbd90e1" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="b615baf0-c17a-3714-81d5-f00cfc107e04" locType="sr" locEndPos="18" urgent="true" hash="1013754779" locEndLn="7" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="14" srcRngEndPos="18" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="7" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="[Line 7] Duplicated string in file 'MemoryLeak.cpp'" rngLn="7" />
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="19" srcRngEndPos="23" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="[Line 10] Duplicated string in file 'MemoryLeak.cpp'" rngLn="10" />
      </ElDescList>
    </DupViol>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="yshi" locRef="3" rule="CWE-798-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="12345812-85b7-330e-bc59-9085b5d5c435" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc026a7c-c2bc-3700-a173-61bf7dfc42ba" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="yshi" locRef="3" rule="CODSTA-203" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="b8f224ce-68e6-34ce-85b8-a79c8ba243af" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8afc38e-149e-3c61-970e-152512ed52c7" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="yshi" locRef="3" rule="APSC_DV-003110-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="7c491287-45cd-3f8f-86f7-01f7c98b073f" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="def5ac59-f042-3b51-9e17-f078a17cbe90" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="yshi" locRef="3" rule="CERT_C-MSC41-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="62ac570b-adca-3fb7-8b8c-92d26fa3cf29" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bcfab23-fb63-3bf1-8f04-f40ab286d7d9" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="36e80e74-e195-3641-bf95-9fffedda9a00" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92c5be68-32aa-3e06-909b-cc7dff1ae3a0" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="yshi" locRef="3" rule="PB-76" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="dd4890cb-a383-36fc-b253-56b49ad69496" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53cca171-885a-3e8e-9537-689c4703ed4a" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="1773312110" rule.header="Tabs should be avoided" tool="c++test" lineHash="1773312110" unbViolId="2fb0234a-ad5c-3e44-89ad-8559827b366f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03d2c440-c234-3cbf-8b93-5e47996ac29a" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="74886adf-c8fb-3a72-9429-eb62d2dd2041" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d26ccb7-60aa-3ba2-a9a9-1c0fdc686b31" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="3bffcc23-05b4-3308-807e-0977a2ac877d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac98a0ea-07d6-3846-8cd3-5c61a962b6a8" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDALLOC" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-862528737" lang="cpp" violId="727b493f-448c-3427-b3b6-3247de11936e" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="2c8c38bc-5282-3dc5-a44e-b13908f4a98a" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="CWE-770-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1466367756" lang="cpp" violId="9f451344-2957-37e3-838c-d93d09a7f5c0" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="6d82e630-4204-30b5-8b09-0350adda8c94" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="OWASP2019-API4-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1519224323" lang="cpp" violId="d7a7423c-5e82-3b86-87cc-f5e6c2122530" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="434179d8-d912-34bc-9938-717123f5b7b6" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="yshi" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="ff40d3d2-2eaa-39ed-927e-35a97136243d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c050a2b3-0f6f-3153-852c-930864c83984" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="69376e43-7fa1-340a-ab3c-44f0b0e8a656" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12a3259b-744b-32f1-8ae6-16eff6de2657" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="0836d631-b5a3-367b-b91d-c943db49bc61" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e8c1903-e4c9-3ed0-b410-20122d3a6b13" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="01acd332-f8ae-3a80-9d3d-87e813d2f111" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08f83aa8-7207-30ac-a573-718859507f98" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1773312110" unbViolId="185c0379-6130-38e9-9ab3-e5c98ade0aa5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b2fe751-f895-301a-8a9f-303096666e64" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="yshi" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="fb6016b2-778c-3d77-b445-14b8c2f8c3ec" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d00ed6ed-66ce-308a-9561-4d57c8d25769" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="1d38e2d0-ae96-337d-b969-9c66701ca349" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0a7c932-eda7-3971-b236-c5a2cff0f3a3" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="ab2cd077-e181-3cd3-ab11-df1f8a48bb67" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45ec846d-5a5e-3db6-96b7-7c602b2eec44" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="yshi" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="ad42f167-5424-3cf1-8875-85949082bef8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fbe1950-ff12-3e9a-a109-289d1ed3be2f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="18d1c81b-ceb5-3ac3-ac35-8fff89d653fc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9686a06-8642-35d6-ae6b-d35c695b0b25" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="87973a30-29f6-3db2-9c16-b50e1636892b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8f17a77-de59-3e85-b1a6-54e84091ad72" locEndPos="7" locType="sr" urgent="true" hash="1013754779" locEndLn="8" goals="1," />
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="CODSTA-MCPP-38" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="83131f40-81e0-3567-9cc8-85afa90b2356" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7058360d-2e55-39ca-8c5b-fb398fab39d3" locEndPos="7" locType="sr" urgent="true" hash="1013754779" locEndLn="8" goals="1," />
    <StdViol msg="The 'data' variable should be declared with the 'auto' type specifier" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="CODSTA-MCPP-08_a" lnHash="1773312110" rule.header="Prefer 'auto' to explicit type names in variable declarations" tool="c++test" lineHash="1773312110" unbViolId="95123266-9b89-35e4-8f44-20255ae6dc91" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18f4ef4c-d6ca-3996-8b3e-64d797e2faeb" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: data" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="CODSTA-94" lnHash="1773312110" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1773312110" unbViolId="6c97adda-3352-3015-91b9-3526ddbe2d41" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60e79792-dcb0-3bea-9462-21140dd3530a" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The variable of pointer type is declared: data" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="CODSTA-95" lnHash="1773312110" rule.header="Do not declare pointer type" tool="c++test" lineHash="1773312110" unbViolId="8ac3b5a6-af6d-34cb-b72c-62fd14dfbbe5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b0bbb86-4a3a-3b95-9303-fa8d396c4dea" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="CERT_C-DCL00-a" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="67b07413-570f-3564-88aa-1318f4242344" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e49f56c-d281-38f1-bf17-a46965faee27" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="1496b44b-8f26-3110-ae4c-448714812ee0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecd0f827-3218-3d50-84d8-24cbe3c26697" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="MISRA2008-7_1_1" lnHash="1773312110" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1773312110" unbViolId="1fc2aa38-929c-3d25-b38f-32f8203dfcd7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="378bdc39-dc77-3059-8f33-b053b9c362f8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="CODSTA-CPP-53" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="371e732b-519b-3501-ad16-0067de341da5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="959edaf9-9218-32f9-bcfa-9c7a22032903" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="HICPP-7_1_2-a" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="8df2bf39-dc29-346c-853f-235bc813e9da" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb111f73-f346-3dd1-8561-1e1378eb5928" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="JSF-132_a" lnHash="1773312110" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1773312110" unbViolId="4402ea01-d3b4-34c2-8189-11c92824a29d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aedbf7bc-b396-3827-b405-1e9eb6b83834" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="COMMENT-05" lnHash="1773312110" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1773312110" unbViolId="e99ebccf-701d-3105-8c38-af5e7b5804b4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f564b3d-d6a7-39f6-b51c-7d883704bf15" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Check the return value of new" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="MRM-34" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="97404315-7ecd-3ebd-885d-c2fd3ea256bd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="279ef105-c9cb-3446-8f44-eebe01564602" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Check the return value of new" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="1" auth="yshi" locRef="3" rule="CERT_CPP-MEM52-a" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="30c937a1-c5b1-3496-811f-c1f7bf466679" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67239926-8fd9-3bfc-b9e1-e31815c9fef3" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Naming convention not followed: data" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="NAMING-22" lnHash="1773312110" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="1773312110" unbViolId="e87a42db-b519-3db2-8332-4356848781d9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11042cef-2a3b-3ced-9748-6211fc6dce5d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'prg' prefix" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-16" lnHash="1773312110" rule.header="Hungarian notation for dynamically allocated array" tool="c++test" lineHash="1773312110" unbViolId="f20cd59d-64e5-3870-947d-afc06b5660d8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5ba3bbe-49ab-3077-824b-fb64d0399954" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-23" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="3522fac8-b721-3bd9-b8c6-764f44bea52a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cf79a0a-d6f5-3004-a84d-54c880487a60" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-31" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="8e2d103a-095a-3e8a-acb1-68c51a1fc3e2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef4e3a31-b5e3-3ba3-b6d8-24e9bfb7e58c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'p' prefix" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-34" lnHash="1773312110" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1773312110" unbViolId="f2749fdd-f38c-3325-af71-765505db849d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84a3e4d7-e7cf-3633-9254-abe76183c6f3" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="NAMING-HN-44" lnHash="1773312110" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="60f86313-eb68-329b-af09-6c69b4e15f7f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe86e575-9810-342f-bd24-0a4fd34ea2a6" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="MISRA2012-DIR-4_12" lnHash="1773312110" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="4ad7bebf-059a-3e28-9c77-98d68306bc1c" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce3bae0f-a730-3556-a718-e990b33f23a4" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="MISRA2008-18_4_1" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="bce30729-d810-3d6d-9c97-6803437b359f" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be07b4c3-f572-377f-a415-6878f6073e34" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="7189f86d-1a1e-3c51-ae2d-a2006dc5c214" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dc4f124-e0e5-3aa5-abb8-f130329b81ea" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A18_5_2-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="8fdc2a25-7588-3c89-9798-6943dc260b26" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e71af3a-4dca-367c-9ef1-e6303224b32b" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="JSF-206" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="f79c04b9-45fd-34d7-9531-05a26c199d43" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c88fd87a-3cd3-3457-ace1-56120ea36f5d" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="MISRA2012-RULE-21_3" lnHash="1773312110" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="1773312110" unbViolId="4abe3ab5-3d8e-3891-b65e-f325dd8079d1" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0a07d41-7d95-31b9-9117-98e008e30728" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="MISRA2004-20_4" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="4457dc71-4fca-3cbc-b2d2-5820a9477f79" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42b1c0a2-ecd9-32b1-97cb-94cd9f1d7277" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="eacc3796-c715-3900-bad4-703e528e4eaa" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77be60a6-d260-354f-9a81-3ed58aac700d" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use vector or string instead of dynamically allocated array" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="STL-10" lnHash="1773312110" rule.header="Prefer vector and string to dynamically allocated arrays" tool="c++test" lineHash="1773312110" unbViolId="0cb4c66c-514b-32d4-be0f-a1ea8bf3a2cc" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="812b1ab7-7e43-3db0-ad73-e089d3ab33e5" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="yshi" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="8427e9d8-3cf3-3d4f-b92a-0b22bd04aa87" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7e0e712-cce0-37d8-9c32-d0fbfd1b9ca8" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="dc77f683-4d75-3642-a53f-830455aa6fd8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4a2b55f-cffd-3a79-a752-90614dc21529" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="76b7754e-f340-3480-9f19-078826fa7c08" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e9d0246-c16d-3a92-aaa6-0aec10a51ead" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="6d70c218-b8b9-352b-ba08-d412ba7ab2cc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be566122-35e4-3c4a-82fb-0522a357db37" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1773312110" unbViolId="cd9b4b4b-f9a0-3ee3-aaf6-5b98023b66b9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1d2c923-6cf3-3491-ad1b-049f5899dcc7" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="yshi" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="1d260038-60e7-39b2-ad95-e119194b454e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9e7d2e2-18dc-3237-ab33-a9bb2ac0840e" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="c93a8afe-38f7-31ed-a05b-9217ecd309d4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fce14da-4834-3c78-8a99-952394afc390" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="yshi" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="a37f7818-d0ee-379d-9bcf-771bcbbf5ca4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2c32e24-415d-330d-aa93-849004e03de9" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="yshi" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="6988b6da-352a-3c8d-ab44-1bf35fb86e08" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83578bb8-6531-3ada-9936-38b37aeb2e0d" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="yshi" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="bf3153cd-ce45-3fef-bdb3-832077c234bb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8de42ca9-79a9-33d3-a818-5975eeeb1673" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="JSF-061" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="9b12056b-722b-324b-bc98-419ecbfc39af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c3adb93-cb8a-30ea-9301-ba8dd1a4ef1f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="FORMAT-42" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="4e70d7f9-7872-32fa-a381-e260fd933e79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9754fb29-23c2-370f-9381-6cfa08d30aff" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="JSF-060_a" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="fcb5b3ee-4a7b-3a37-ad31-8b72a4c424e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70e1a718-3fbd-33f5-a319-93226dfe07a4" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="FORMAT-43" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="1d36164b-4a00-3f19-a54a-5a51a419ee16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e73d2c0-b337-3ffc-9f37-ffba8844a7fa" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="JSF-060_b" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="489cd4ca-4985-3a6d-a683-c353f89b0b16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43793cd3-ee40-3aed-9c54-0c432e30689d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="616861252" rule.header="Tabs should be avoided" tool="c++test" lineHash="616861252" unbViolId="4a6df15d-a776-3068-be95-e84d0bc96c16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a18e400e-19f7-3052-96c3-1508a4d2178b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="24ac9f1a-5b34-3781-81e4-ec9f802c6765" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="889ce05b-e206-361c-a2f0-d141fa32fff1" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="adc2f81c-7f7e-3923-82ba-157af89a843e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5e53a90-be57-3d42-a6f5-87b7be32ee9c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="FORMAT-02" lnHash="616861252" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="616861252" unbViolId="ef5765cc-7526-32d3-9a36-2d5627d1d4ed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f02bc5ec-b68e-36d9-b837-dc7a2a031572" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used in a loop condition" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Tainted data use in a loop condition" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDLOOP" FirstElSrcRngStartPos="0" lnHash="616861252" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used in the controlling expression of a loop" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2054996746" lang="cpp" violId="e9d9a04a-2c36-3185-b02c-b7aa71222217" locEndPos="0" locEndLn="10" goals="0," locStartln="9" sev="1" locRef="3" tool="c++test" lineHash="616861252" unbViolId="ea23e78b-3101-3b7e-89b8-0ab69c63a484" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Props>
            <Prop key="Tracked variables" val="pSize[]" />
          </Props>
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
            <Ann msg="Tainted data: pSize[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType="." rngLn="8" />
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType=".P" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="pSize[]" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: pSize[]" kind="var" />
            <Ann msg="Tainted data use in a loop condition" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="CODSTA-83" lnHash="616861252" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="616861252" unbViolId="b90d0dae-bde1-3377-b9a6-b619fe46b1ff" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7988b5e8-c171-32d0-a25f-b1e24f583b5d" locEndPos="2" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="yshi" locRef="3" rule="MISRA2008-3_9_2" lnHash="616861252" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="6d38132e-4fcc-331c-ad1b-9cda8dac674e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a993e3ec-4557-3cc4-8be1-4461cd846982" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="MISRA-013" lnHash="616861252" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="616861252" unbViolId="f11a8751-698d-37fc-bc56-95ec0ee533e8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2e81580-22ec-3198-9e62-3d5246fbaa46" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="CODSTA-223" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="d95b96b0-3cb4-397d-b7f6-db399df86f15" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d34dcf98-f25c-3fdc-bafe-5e433377b8ce" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="c8b764ae-87aa-32b1-b243-26bae4c01d75" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3eec0bfb-1b7b-34ff-a870-a488902011e3" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="HICPP-7_1_6-b" lnHash="616861252" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="616861252" unbViolId="d6b1585d-2efa-3d3b-8923-3710b65fc6ac" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa1587ed-553b-3e62-92cc-ae0b209a9037" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="yshi" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="ffbb1051-761f-36a9-83dc-1cd20808b1e2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cad9607f-5d85-3cd4-bd62-e3544cc8c838" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="MISRA2004-6_3_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="13a97a30-c372-3f1a-b607-aa2746e4ccea" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5946d54-7563-3d7b-8d16-28ed701b8faf" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="yshi" locRef="3" rule="JSF-209_b" lnHash="616861252" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="623bc87c-3e7e-343c-b57c-7a8a2978220e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44db7b4d-c604-3e0c-8993-cbfd5c6e2d5d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="yshi" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="bb2404a7-4210-3d81-b66f-ff42020d90c4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27b74bfb-8bcb-3f3e-8ec2-e9716e2e42f8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="HICPP-3_5_1-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="2561032c-9a54-355e-9bce-f6ce7a698650" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7e59fdc-a53c-37f7-a4c7-99ab6c186592" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="09969936-a656-36e6-9cbd-e3518d6b8bcb" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95b919d9-3db7-31de-a8a6-514b8f544c98" locEndPos="11" locType="sr" urgent="true" hash="1013754779" locEndLn="9" goals="1," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="CODSTA-MCPP-38" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="2130fb4e-e5fe-3241-a276-45835d482727" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee40be27-1d77-38fc-88ae-763f473f29b6" locEndPos="11" locType="sr" urgent="true" hash="1013754779" locEndLn="9" goals="1," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="PORT-13" lnHash="616861252" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="616861252" unbViolId="8322b587-0741-3f4d-9ecb-d1e910cdaf8f" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="241be766-2d05-3b40-8efa-30f8c95a2044" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="JSF-132_a" lnHash="616861252" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="616861252" unbViolId="390e21ad-7083-38a9-b2ca-eca5f5217205" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4803ef8-9c12-3a2d-81f6-9bcfd64759a6" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="COMMENT-05" lnHash="616861252" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="616861252" unbViolId="cee8e932-8875-3e13-b4f3-c61e2de7e952" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f366df1-4b5a-30a0-9cb7-70f9944c2795" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="1" auth="yshi" locRef="3" rule="APSC_DV-002560-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="fd3fd363-0095-3a42-b60f-bf7fdd787741" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="099b195d-a840-3d99-ba3b-4fd0a4f8323f" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="1" auth="yshi" locRef="3" rule="APSC_DV-002550-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="d87977de-b210-3d4d-a1ca-ad60ca1a33bd" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69a9be15-51f7-33d9-86fd-625d917936fe" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="yshi" locRef="3" rule="APSC_DV-001290-b" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="8042fbea-4a08-3b56-ae8b-101d0eebc386" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46e1b706-9f7c-3f7d-8e14-5ced448854c9" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="yshi" locRef="3" rule="SECURITY-38" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="22200fe6-55bd-30cf-b32a-5963e310f2b9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1d6b5cc-ef47-3271-b861-0c7253b04abd" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="yshi" locRef="3" rule="CWE-20-j" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="121d07af-9299-312e-b37d-f6f8aea3672a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a0091a4-d699-315c-8ec0-f5198ed28f09" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="yshi" locRef="3" rule="APSC_DV-002530-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="ab56cb6d-fbfd-32bb-bb7d-96119a36f894" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="163df000-1134-3e41-8436-01bd43784d3c" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="yshi" locRef="3" rule="APSC_DV-002520-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="7c945ff9-0bfd-327f-b504-053fd70986eb" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5ac6a12-ed1b-31d4-a834-054bf38ea644" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="9" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="yshi" locRef="3" rule="OPT-04" lnHash="616861252" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="616861252" unbViolId="fb3cb169-cae0-38ed-acd7-bfc27d5b3a4f" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a38753e3-634e-339b-8562-5624e8b8fc74" locEndPos="30" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="JSF-061" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="0a9c1fb9-bd4f-3650-956e-3acdc72ddb76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86cdd352-474f-361f-978f-1a1ff498f6ae" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="FORMAT-42" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="faad69ce-fee2-30ae-8913-0dc6e5ae0c91" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4af0a1b-30d3-399d-a865-70a4a8b1ed6c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="JSF-060_a" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="38d4fc4a-95f9-3a5a-9eb5-af765ffb668d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2734c314-e252-3afc-9770-62cacde2962b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="FORMAT-43" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="25fe9915-534f-31f3-b037-ad4118b87770" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="029bf54d-07fd-3e59-9619-c4763147a0c2" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="JSF-060_b" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="2b093b61-3989-35ba-8d55-31ddbf02eb6e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dedc0368-1290-38d4-9e2e-530e36e1b139" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="6263d4c8-6840-343c-8060-ed74c9fa4186" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38d55750-9023-3144-9e64-2ddae82386c9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="0957938b-5173-30c2-949f-b20f65b045f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="337526a0-01e2-3647-b2e6-58d27b54516f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="98f92ec3-4e13-3a93-9847-59a9e3cb7a2c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05fa6ea6-e565-3b99-b67c-971acaec253d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="FORMAT-02" lnHash="700522989" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="700522989" unbViolId="ce5afd52-3378-33e6-8c6f-33641cc40e58" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aaafbb7a-e09c-3d71-b611-545f44ef8bf1" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="d8aaf71d-8efd-33e5-8624-efa321d5bf58" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="124821c3-8eb9-3c6b-80ba-bdc27790907a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="620c348e-eaf0-3f3c-b32a-7e2ec6974216" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffc1c3bd-6fc4-39dc-8e59-fdd48293042b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="9d18f46f-e20b-3d7e-a6e4-854b8af3c0a3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8d99c51-955b-3f45-b33d-55ebea37fdf6" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="CODSTA-23" lnHash="700522989" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="700522989" unbViolId="41a68c04-6061-3903-a892-78b167595a18" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9dd7a52-90ac-3fac-8f99-b2510ff379c5" locEndPos="3" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="87376dc2-79e2-3af5-aa03-f57eeaf4a892" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1615741-250c-34f5-b303-2fca7139a6cf" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="0d67bcfc-2847-3153-9c7c-3fd90e082a30" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f01e669-0194-3ba4-a5a5-9b60a669c6f9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="CERT_C-ERR02-a" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="d8823024-7e0a-35f0-9215-46b55289036f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76f5a87c-dc95-3a5f-9259-4e812b63d88e" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="CODSTA-110" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="e425078e-1ce0-364d-9910-cb6b0762f7e1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fd7c70b-f924-361f-b37e-de3e2e21f9c8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="CERT_C-ERR07-b" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="957ca456-dedb-367f-beb0-e5a6d5df7f50" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fce1c3e-6817-3854-8fc5-5253084e9e7a" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="APSC_DV-002390-c" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="9d73365a-2d98-3b9f-9227-799ccbf94ec3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ec21722-50eb-30ce-b0a1-01b243e606b1" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="SECURITY-14" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="a6c5020e-e670-3283-abb0-01fad944a646" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6df62d23-ad8b-32bb-8628-b2600a2fd320" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Prefer iostream.h to stdio.h" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="yshi" locRef="3" rule="CODSTA-CPP-01" lnHash="700522989" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="700522989" unbViolId="458b5fb8-8910-36e4-a88e-79f192818aa2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebdf9616-0901-3db6-af53-d52d23fbc13a" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="1" auth="yshi" locRef="3" rule="CERT_C-STR07-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="0aaec5c6-5396-361c-beae-fb46431aafa6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbc3bdf2-5646-360b-8ded-1aa63f58abd9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="808ae76b-5462-3d47-8a52-48e27bae1037" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f64db380-65b8-32a0-8d2a-802b46812a74" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="CERT_C-INT05-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="d02b5234-4357-3a9a-9551-02198997320c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d7d4748-d77b-332e-8e79-5c0c3594cbdc" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="SECURITY-13" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="5bdaba17-9e0f-35a1-88d2-5ec2b0845c6f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84bd181c-9c91-364e-862a-20c052f2fe8c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="yshi" locRef="3" rule="CWE-798-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="331e7fee-6201-3b97-bca6-3f545d201e68" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14c75f7c-9b0a-34ad-a5f8-cf7c85994d28" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="yshi" locRef="3" rule="CODSTA-203" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="8a972d0a-480f-3889-ac45-854ee90eee2c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07d4395f-ade7-3a3b-950c-1aa237d30d7e" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="1" auth="yshi" locRef="3" rule="APSC_DV-003110-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="c474c52e-432f-30c8-8154-4b3d9275951f" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="710ff66a-1c90-38d6-a635-9b0baa0026bc" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="1" auth="yshi" locRef="3" rule="CERT_C-MSC41-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="3d6c9fd3-a4d7-3318-9827-60ec960ddd08" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ed9b734-7bcb-3f82-baa6-b13eec2af0a5" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="55587cbc-95f8-3723-819b-532abb4745a5" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f69cbbf9-8418-3de8-b043-e25df7d70fa4" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="PB-76" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="3a519706-7331-3f69-9477-af6405e34401" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf078e75-ae49-39c6-aca3-be7e8b4482f1" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="yshi" locRef="3" rule="MISRA2004-17_4" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="7980df46-63aa-3708-9b0d-4cdcfddd41e7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf3f7e1d-a0fa-3165-868c-85a0b25e5a33" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="MISRA2008-5_0_15" lnHash="700522989" rule.header="Array indexing shall be the only form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="175d95fe-c6ae-37e0-9d48-653e2cc3e644" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0c16dfa-21e1-36c9-b6f1-689427fb7a20" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="yshi" locRef="3" rule="AUTOSAR-M5_0_15-a" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="47ccd270-0f1c-3da4-9429-23aa14e6f51c" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6150a0c-3d6f-3cd2-89ca-ee5dd19fbdf5" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="1e4e95e7-c4b0-3834-8c4f-4611cc349fe5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94862d8a-da5b-311f-a250-5beec29503ae" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="769cf8ce-c14f-302f-b722-faa32b851435" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d47558d-276d-3e64-bc36-b05efbf44400" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="333bb84c-ebbe-36c9-8410-da7bc18a4f8b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93be6cd5-beff-3c71-b5a9-fe3e1a89667f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="1d380958-487a-3e90-943c-2b2e19079e54" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c987241-1f99-36b1-af2d-a0cf054e22a4" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="39c9ccb6-8c53-3654-a0db-8b644726c1aa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b49730d0-dc0e-350a-b436-0fc3028478d3" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="16f7c016-b6e4-3d41-a9fa-8a8e1acf0284" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0663d147-383e-3175-b383-3d178a06417d" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="2269d3f8-2ddd-3e63-9df1-3fd5f8c2e8d5" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22de38fe-deca-3c1a-ba3a-7a063d976ae9" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="af40c25b-ed66-3884-937a-b0d11895ab2b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4be7dfb-52c8-3cbd-bb91-261e560842bd" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="04288395-07b3-37a5-b196-fb0000f90c98" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5833166-eb6d-31d3-9f19-bcfd8316327d" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="2" auth="yshi" locRef="3" rule="JSF-208" lnHash="-541829676" rule.header="C++ exceptions shall not be used" tool="c++test" lineHash="-541829676" unbViolId="cf925689-4141-35b3-adfc-62d2cb1e6356" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="738a7e3a-3ee6-3d2f-b7e7-09871ff45bad" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="11" sev="2" auth="yshi" locRef="3" rule="EXCEPT-05" lnHash="-541829676" rule.header="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" tool="c++test" lineHash="-541829676" unbViolId="28dde8d1-be22-3b95-ac8d-cec48f3b5f33" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75dee3d5-595b-3109-9c3b-722e9ed7635f" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="12" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="5841721a-e1ef-38f1-af8b-aa2cd01db85c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc3d1c08-15ea-3b02-a301-b418b66bd74d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="cd8db32a-8b4b-3404-975a-3dd7481fd8de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd12ed4f-6c41-3441-be96-d435c76baf87" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="1da3a57b-c3b2-3aab-911f-d017295352d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06efc08f-116e-3034-ad05-16fbf27af642" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="12" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="4c44fd4d-7474-35d7-ad45-5d6729b35066" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ae52548-f94b-37bb-ac88-ecc935ba206c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="ca31772b-d6d2-33e8-8a48-a05e1901e2aa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3c97c54-b8bb-35b9-a3e9-39fe29d98142" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="1c4787d7-adee-3f12-a4b8-8191d437c1ec" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34013b5c-36e3-34f5-a864-179bb031cba9" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="13" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="13bc43d7-872f-33d5-8496-58bcd96464bb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41e24b94-e804-3fc5-b9b1-add18899fc5c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="13" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="45b1e7b7-96c8-33e4-a805-537edc0493a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77231e57-489d-3c13-86d3-0f1dff900c1c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="13" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="bcddb745-67fd-3a80-903b-a15459ad9720" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5d006bf-d624-33f4-8166-88661714a378" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="14" sev="4" auth="yshi" locRef="3" rule="JSF-043" lnHash="1006431594" rule.header="Tabs should be avoided" tool="c++test" lineHash="1006431594" unbViolId="d2005732-db7e-3f6f-8b31-79afac93a82a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d297efaa-3f41-3bb3-9ca3-5059d3c71fb2" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="14" sev="5" auth="yshi" locRef="3" rule="FORMAT-01" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="0012a206-4d7d-3bb3-9644-a80e6773cec7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2852e07-e17c-3d78-9821-6471c93f286c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="14" sev="5" auth="yshi" locRef="3" rule="HICPP-2_1_1-a" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="585173ec-73fd-3e8b-9e90-71ea5619147c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ad23da7-bc4c-3b05-afdc-6d43b01c8daa" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="14" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" locStartln="14" sev="3" auth="yshi" locRef="3" rule="FORMAT-25_b" lnHash="1006431594" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1006431594" unbViolId="0a6c6024-7489-3251-ae50-e0cfa3d1e128" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5e59e56-204e-356f-a069-48b56fd0cbeb" locEndPos="2" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="APSC_DV-002000-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1842545282" lang="cpp" violId="2997f426-0120-3047-97f0-12420bec3b27" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="abe15341-4f58-3104-8ee7-df77d064aa57" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_0_2-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1331699030" lang="cpp" violId="d77af09a-92ac-384e-9021-23d1509c8888" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="35c53782-0e28-39f4-93b7-401e8ccea8d3" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_1_4-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1332641371" lang="cpp" violId="715f0209-9676-3433-a1d5-7e8e61f9c4a4" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="38ddcba9-74e9-3ff1-9c18-8d389d5f7be2" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1151239445" lang="cpp" violId="e4f91e8b-4d7f-34f3-b6aa-1f21ac2a7412" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="32734871-69a6-3758-b4ee-8bcb493b0f2d" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CERT_C-CON30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="103891581" lang="cpp" violId="bf57b214-5ffb-34c1-89d0-e0994f31eee2" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="dec8296d-a135-3c04-8b07-136d0bd67f5e" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CERT_C-FIO22-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112344312" lang="cpp" violId="699d49c7-ec65-36c8-920e-aff31b84e7c1" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="fec68823-ca99-390e-aa61-e63e2dc6f643" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CERT_C-FIO42-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112174134" lang="cpp" violId="842dd432-238a-3e1f-84a6-888ae4044aca" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="c9bdba28-005e-33ff-abfc-95285738390d" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CERT_C-MEM00-e" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116382779" lang="cpp" violId="8814d859-f14a-36cc-b260-28707c617bdd" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="98a85b42-7738-38dc-ad6a-218e56ba7989" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CERT_C-MEM12-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116285462" lang="cpp" violId="2d2c35af-62b9-3a62-9300-a9547853fe61" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="5f927fc2-25d1-3bbc-8a22-8c6e089f226b" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CERT_C-MEM31-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="114391825" lang="cpp" violId="69b76411-9952-3892-9e37-37e440de7dad" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="52a353a2-f6ed-303d-bf2d-d5a675635304" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CERT_C-WIN30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1055995355" lang="cpp" violId="5a0c0208-6fbf-3199-9375-1b46c898cb56" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="670d1050-eae4-331e-af50-9b31cdbb07eb" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CERT_CPP-ERR57-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1542295099" lang="cpp" violId="b588d074-928e-3b77-b2a6-952bf80f8ca7" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="330161f9-8ae6-394a-aabb-5041384125dd" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CERT_CPP-FIO51-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1119006820" lang="cpp" violId="0e3707fa-0aaf-3ebe-a835-49b14279f60c" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="c8210fd0-b321-38b3-b636-345c931df68f" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="CWE-772-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2027493177" lang="cpp" violId="108ffb5c-41b4-32c1-8a72-40f117c497ae" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="e4bf2334-958c-3e17-8a82-b480854b1e91" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="MISRA2012-DIR-4_13_a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1431710396" lang="cpp" violId="67b5fbf9-0acf-3f00-a54a-c6bedae5ff6d" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="a9f08ec8-774b-3a18-9d92-d68d53f0ca0a" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="MISRA2012-RULE-22_1" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1251621320" lang="cpp" violId="16e1c509-b9b8-3165-8e29-f89dbf3a63cf" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="36de652a-14a5-3fba-87ef-302d2071a894" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="MISRAC2012-DIR_4_13-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2127420791" lang="cpp" violId="c3ecb399-69ee-3ed0-aea6-3dc6831d1ff9" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="2a2e051f-7f9b-3d73-968c-dacc348fcc11" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="MISRAC2012-RULE_22_1-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1043097931" lang="cpp" violId="e6338820-43dd-3d5b-bddd-f9988cba854b" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="31110279-8789-3cfe-8b3b-cadfb044029b" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/FlowAnalysisCpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="9" rule="OWASP2019-API4-b" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1966237325" lang="cpp" violId="0f77ffa4-91d3-3127-a894-5f9735dcecb6" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="7378365a-3ebb-340f-8f12-2420e06926b7" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="3" auth="yshi" locRef="4" rule="JSF-032" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="d5121227-ce57-3a90-a48a-713ce3950f22" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c534cbb6-2d86-371d-992c-bf8ce62fe57a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="3" auth="yshi" locRef="4" rule="PREPROC-08" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="55630d28-3755-3fec-a8c3-878cefadc011" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2846c15e-f03d-3e33-9f09-5d8d5262b454" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="2" auth="yshi" locRef="4" rule="PREPROC-09" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="49f94742-2339-376e-8e93-da5626bb4dac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5d21fbc-4630-3254-bbd7-72ecb460f88e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="2" auth="yshi" locRef="4" rule="JSF-033" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="2125abdd-be90-36fc-a178-9e6511cf5c45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7ed3718-4e28-384c-9932-4f1981f97384" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="3" auth="yshi" locRef="4" rule="METRICS-31" lnHash="329732047" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="329732047" unbViolId="64caaa89-2fab-34b8-afe6-69d57a16ede7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9acc754a-6b5f-3a30-8563-d049461ddb76" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'DeadLock.cpp' should be in lowercase" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="3" auth="yshi" locRef="4" rule="NAMING-03" lnHash="329732047" rule.header="Use lowercase for file names" tool="c++test" lineHash="329732047" unbViolId="718ab1e6-bfd0-394d-a7b3-944ce2b3c641" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6446f9c7-275b-349a-ab89-4513c345475b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DeadLock.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="3" auth="yshi" locRef="4" rule="NAMING-38" lnHash="329732047" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="329732047" unbViolId="37dbe1a6-60eb-3958-a9fc-8f8bcb21ee33" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ab02d22-d91d-3690-b82c-484dbcde1a19" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DeadLock.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="5" auth="yshi" locRef="4" rule="PFO-04" lnHash="329732047" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="329732047" unbViolId="8f5ba7da-8882-3da8-bea4-fef5912ef838" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c05cb466-4f51-35fc-960e-03801d9ff100" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DeadLock.cpp'" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="3" auth="yshi" locRef="4" rule="COMMENT-02" lnHash="329732047" rule.header="Provide copyright information" tool="c++test" lineHash="329732047" unbViolId="a7991b18-6230-3c6f-9ce0-90bc176b8aa7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c20e425-8d8e-373e-97c7-f74f71ca5608" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DeadLock.cpp'" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="3" auth="yshi" locRef="4" rule="JSF-133_b" lnHash="329732047" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="329732047" unbViolId="44284964-ac7d-3167-b521-f9db9a9c797b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9051d99e-1f47-3e4b-a56d-fcc6ebeb15f5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DeadLock.cpp'" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="3" auth="yshi" locRef="4" rule="COMMENT-03" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="626980cc-4927-3551-9fb1-a26d1653e7af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b51f7292-1bd3-3ec9-b8d4-5b7887553c0e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DeadLock.cpp'" ln="1" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="1" sev="3" auth="yshi" locRef="4" rule="JSF-133_a" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="9c1f1271-930e-309a-9886-3ca0baa36669" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02d03a4b-92c3-3026-9e30-f974922d9376" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="3" sev="3" auth="yshi" locRef="4" rule="PREPROC-10_c" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="eab3e64b-35da-3d96-8e5e-57a67b48cacf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e52e456-66f0-340d-b2e8-8ceb467d2a03" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="3" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_e" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="95d12ab2-c821-3fbe-bad7-c11b61404bc5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09caf9df-6e23-39d9-9414-50e7b5a36b44" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="3" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-f" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="1f07c53a-8aa3-3404-a20e-5f8db16f3770" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33d1f212-2224-35f6-9bc9-1de8bd635e6b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="3" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="3" sev="3" auth="yshi" locRef="4" rule="PREPROC-11_b" lnHash="-1674050737" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-1674050737" unbViolId="49ca035f-1f71-3d9e-b29a-b352cd8e9d05" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9eea1fb-a4c7-3f0f-8fd8-48ca4b7a5789" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="3" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="3" sev="2" auth="yshi" locRef="4" rule="JSF-026_b" lnHash="-1674050737" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-1674050737" unbViolId="92564ad1-fe91-35f6-a5ee-9bea876db595" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64cec44b-09d1-3135-949f-c2c6a40c392a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="7" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="-1431583748" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1431583748" unbViolId="13499809-f266-3476-b0f2-43d1bafcf429" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49852524-0953-3cdd-9e8c-aa143da30303" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="7" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="11023d79-3c2f-350a-bfc2-ca990b4b180d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3be1cee2-4c75-368e-b110-1a6ad3cc03d1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="7" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="102dd11c-893e-3d55-a31b-3feb840b52a1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb097e07-7f00-30ed-a6a4-7fec52582771" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="7" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="7c56d780-b6e5-3660-90b8-1e521e128918" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0738cef2-b5c2-3a67-85c8-267325b2730b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="7" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="60110897-3e4d-3798-8eef-d91fe0afed39" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="750ae945-2ae2-341d-a274-4d104f214905" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="7" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="7" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1431583748" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1431583748" unbViolId="27bee1ee-030a-3590-aa86-43a1351e19fb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa093d8b-f1da-3932-859a-9bca4219c026" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="7" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="7" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="-1431583748" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1431583748" unbViolId="0d3f5760-4cbf-3487-b559-6b2b859c48ba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a426bb6d-a619-3a82-a536-92cf9f0941d8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD' is enclosed in braces" ln="7" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="7" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="-1431583748" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1431583748" unbViolId="dd25d605-eb07-3267-a8de-2845d4554a63" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96f98f81-6aa0-307e-8fd7-d6efab968d22" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="8" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="-823604806" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-823604806" unbViolId="adcc3a9a-62e4-33d2-8496-030d97275045" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7aa2aef1-0ea0-39de-8e44-e61156a37e44" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="8" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="e31975c5-fd91-352a-8c28-c2d41749ba6b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e6abc44-4a5f-38cf-9b8f-1fff2328e9ae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="8" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="f7f1327f-c8f8-3ecd-98cd-83d64135348d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd00afdc-5f49-3cf0-9b9a-806526d1fe3e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="8" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="73713326-73a1-3cc5-a09e-39099f24c86f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b228670-be3a-366c-8503-069d32444c05" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="8" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="abfbe381-2151-3e0d-83c5-bab6982212d6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12351d73-e72b-3113-97ae-b9e25c8d86bc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="8" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="8" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="-823604806" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-823604806" unbViolId="72e08129-99da-34fd-9a65-7c2f1b3cf867" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="810334f1-7d29-3fe4-903f-c2dd85d86cf5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="8" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="8" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="-823604806" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-823604806" unbViolId="04355943-9230-3fb6-bcac-8cdaabde01b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="211f8c43-a0dc-38e7-a9ce-cc0095cbeac7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces" ln="8" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="8" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="-823604806" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-823604806" unbViolId="fc3103aa-ed02-39a6-9f92-3acda2ae2380" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e01ba30a-bde7-3080-a9bf-54240b46dfc1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_4" lnHash="371252460" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="371252460" unbViolId="593eb00c-8493-36a0-aacb-96453f8e1257" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0b91ea6-ae40-3c4f-9470-2cf3bae9f8d0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="45b97c84-0f57-3e84-b790-d451922d39e7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5371d71b-4570-37bf-b999-7aabd70aa6f7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_7" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="0e868212-ade2-3b42-80d4-fb3bbb85c7a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15bf1d9a-3ba8-3e91-a048-de301c2f4d6c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="JSF-029" lnHash="371252460" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="371252460" unbViolId="adbf3351-278c-356d-9856-46c66144b24b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e32894b-efad-3fc1-a1c1-482c91de84be" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="371252460" unbViolId="1ae97dfa-dc83-33c2-af3a-0b73f3ee3cd2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="530e3752-602f-35e8-aa79-0953feede221" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="CERT_C-PRE00-a" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="897007b4-331c-3267-8c1d-0a9873136963" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12fbf302-0134-3ece-880c-3683d0b73530" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="MISRA-096" lnHash="371252460" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="371252460" unbViolId="5a6f9c80-4285-341a-92f4-141f0aa9f96b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a010f92d-b306-31d4-9917-83161744d1ae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE02-a" lnHash="371252460" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="371252460" unbViolId="f2fc7f5f-165c-3994-bba3-6b1f9ddbf8aa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f03f87a0-bd51-394b-96d5-2366d7104bed" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="371252460" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="371252460" unbViolId="718d02e1-3b69-3752-aeaa-25ef43af1c4b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29766d7e-7c93-321e-9b2d-152bd18a43bf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="705a63ca-2445-3589-a781-bebb3e47ce71" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7c31bd6-bd49-389e-a51b-c422b7e0ec5a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="cb941df4-a466-341a-8e3c-6ad5f363a924" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9fa7c1d-0a50-30a9-b3fa-8cc6de35090f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="7589fc05-85fd-37e9-b7dd-a1241798ff06" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b753c31-36eb-341f-886d-270f14c36674" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="040b9a05-4e6d-32f3-956f-527d0e38555b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f628c2d9-a515-34d8-8d04-c0a481553110" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="371252460" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="371252460" unbViolId="5d0bb739-e705-3541-bced-beac2603302c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="769e0a74-eb33-332f-8803-85b47eafc809" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="371252460" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="371252460" unbViolId="581abdce-4816-344e-88ba-6c23ce6bb8b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91464b2c-d208-37e2-a62f-ef96dc0abc79" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_CREATE' is enclosed in braces" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="371252460" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="371252460" unbViolId="97816b04-e43c-32c6-baef-7a08307115c2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aea8c1a8-f29d-3417-91aa-b3c60fcb9f83" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_10" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="921f1a9c-6eb2-385e-a1cf-346925a5a4ed" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9b4a48f-c799-38b7-8fd2-660d2b086c67" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_6" lnHash="371252460" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="d2583082-6977-36b1-bc50-4ca5d2b8c962" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9470474a-0ae7-3c77-87ea-388b87c3c729" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="371252460" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="371252460" unbViolId="8e04182e-ef13-3006-a6fb-6a33a6e3ef01" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b63dc1c7-0073-39cd-9cc7-5f014cfbff06" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="c0d31126-0685-3c72-8910-a2d1dcd98226" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73a13e91-22c0-363d-9ccc-e1968d6662f4" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE01-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="1fa78728-e682-3e22-befb-9588366cb0e7" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdb919e9-8080-3fc1-bcc1-4e35aa9260f0" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="0cec522e-2a59-3763-8ef4-504793e1def2" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7283dc3-39f6-35cf-a84d-b9a6c8597e23" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_10" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="42da53fa-8a41-3ede-9f6a-4f5417c16ed8" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e5308f9-e9f9-3b70-a94f-a40cdf8164b8" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_6" lnHash="371252460" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="950da95d-127a-3f20-8d3c-021996dc4407" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2e6e511-3a7b-3f4e-99d2-69cd578cec99" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="371252460" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="371252460" unbViolId="be40f7fb-4455-3045-894b-2ddfded9506c" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d18beeca-7362-3113-b9e0-b6e28e8f7440" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="7e082945-081f-3b70-9634-2b4b34711a44" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27a233db-faf3-3fb3-b79c-a4c5c4dc4e7d" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE01-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="bf906d79-9211-3130-86b6-c9e1f8dcd9b1" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08e01276-e9f5-3c36-86e5-8635b7f8487a" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="9" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="fce2e1d0-4e74-3e62-8e81-9b1ef44e4b27" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39163817-2360-3fcc-abf7-d77fece2a84d" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="11" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="1036666232" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1036666232" unbViolId="03cefc1e-e75e-3043-ae60-00b0fe7d35ce" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b343b344-17f1-34db-9018-3349b692d766" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="11" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="bdd903a8-f3ee-365a-aabb-b9d7f5c83276" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b96d6e1a-58c4-3cc1-b3ba-b3af1c4a22d3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="11" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="21fa098a-62a9-30d7-92a2-007ae21aa0d2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37a2cd39-cd5a-3b97-ae4d-bf713ece3b9f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="11" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="472242fa-7509-327f-96df-ddea73e393b3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ebe3d5d-2499-3c17-9889-e148f0bd81c0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="11" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="15d41e99-5856-3ff3-954f-82d98a44e7d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61948ba0-ead0-3295-99b9-5649af8ccbad" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="11" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="11" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="1036666232" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1036666232" unbViolId="3393f37e-a106-37a1-8b16-02ed15d6dc3d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b2e0e0a-b75f-35c7-bd87-395b8f9d68f4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="11" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="11" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="1036666232" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1036666232" unbViolId="0130b861-33b9-30a0-b1e1-193c2872867c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ba89ba3-c478-391a-ae01-cf2bc180a470" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK' is enclosed in braces" ln="11" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="11" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="1036666232" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1036666232" unbViolId="761bdfcf-9cb3-343c-b738-c68ce16bf499" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dc69d2d-3a97-36ee-b9fc-03dc3854291f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_4" lnHash="-632529940" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-632529940" unbViolId="2c432b90-bc66-36a3-b8e3-cbcd86a9aa78" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd69c1f0-3ef3-309d-b664-d60472b822d8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="2b74ee2c-a17a-3418-b9b2-7b1f98b65dc1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8e3acbd-daaf-3722-b16b-f84f617becb2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_7" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="a95da94f-381a-3537-b5a7-48902ab2302b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9156610d-6a3f-3dcf-b024-c22593492e74" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="2" auth="yshi" locRef="4" rule="JSF-029" lnHash="-632529940" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-632529940" unbViolId="b699840a-68b8-310a-b3e0-ef629a87b0c0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f879eb3e-dbc6-3ec6-a1d6-87c451da4872" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-632529940" unbViolId="0a8fdac3-f40b-3805-a19f-d7e74637b11c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3560c3dd-fa2f-3560-a5e4-7fab86f82426" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="3" auth="yshi" locRef="4" rule="CERT_C-PRE00-a" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="e138766a-9902-3a09-afc0-4ecf0ca301d8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07fbc04b-4add-35df-a5e7-d1446d0e706d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="3" auth="yshi" locRef="4" rule="MISRA-096" lnHash="-632529940" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="cf9547fe-b6e6-3733-854f-b26a7bbcaa16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65963072-5301-31f2-8de6-5a203a9aa5dd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE02-a" lnHash="-632529940" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="48093496-5fc4-333a-a5f0-38e87b86f151" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ed78228-5c6e-3f34-a0f0-8448fe0d1de2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="-632529940" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-632529940" unbViolId="3e988d72-c82c-3ba3-ac4e-2ed81d80fccc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0878efb-1e79-3002-878c-30ad3b03ff82" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="c5f14820-cb3e-3c16-9628-02ee0d9e821c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03d307fc-09cc-3a8d-902e-b20af131d9e3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="424b8385-1e5b-3bd3-8c64-95135005fecd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8201ef28-e8c9-350a-aac4-d198bc7caa6f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="1a22bc35-85ca-3bea-a003-2adec680d4a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef646ba4-334f-35fc-9979-cebb1a159840" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="939200e0-5c2d-31c5-94af-9e1bca77050e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6cf280ed-0249-30d1-b165-392271075d48" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="-632529940" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-632529940" unbViolId="793467af-db72-3c2c-811a-ac39e3763e4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2df3ab7a-192b-3268-b891-816660b328f6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="-632529940" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-632529940" unbViolId="460c7cbe-5126-3845-8848-efd85007ca69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24247984-7817-3978-ab2a-5131b090eca9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="-632529940" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-632529940" unbViolId="7dac03a6-a574-3b9a-9e04-79fade5dcb84" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c655915-0eda-3c87-b432-2db4d0c9c67c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_10" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="461bc4ab-646f-3c75-8d6f-3ccdb9ccd2ab" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52fd664a-cbaf-3682-90f0-e2bedba4774b" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_6" lnHash="-632529940" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="b617ca74-ac47-3bd0-9bce-f1e957f71f2e" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a836337-55a4-3146-b48a-9600a234142a" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-632529940" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-632529940" unbViolId="1fd183c0-6ac8-3537-b8ea-e24c204f6c2d" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5bd2962-b174-37d2-ab05-de060aa37131" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="e3996ab3-5453-3e00-b23e-49ace2a31ce4" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="928fea89-dee5-32b8-a45d-605aedf2fb35" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE01-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="0d098c5c-8ac8-3476-86cd-8a4895bd2fdf" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e25b65f-c5ec-3135-8e27-d761a6a87215" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="12" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="5f9131e0-aa3c-37e5-b09c-d342695c1a09" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca10c667-3e95-33c2-af0c-662cd995a2ed" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_4" lnHash="1552981372" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="1552981372" unbViolId="30b5d2b6-2573-3bcb-b41c-a6fdb12d9a2f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8533b19b-96f3-345a-8d3a-2eac4c88df44" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="303ce5a1-77b8-3ad5-a27b-1f0f9cbfa78b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f51bd03-4eda-3c5a-9da9-e7b508fa061c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_7" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="23f15226-a345-3064-92da-52dccea2683c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40166c9e-70b2-3084-9d7e-e7a3bb480607" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="2" auth="yshi" locRef="4" rule="JSF-029" lnHash="1552981372" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="1552981372" unbViolId="21bf2985-8025-3ffb-8a2b-7894d7b0c7cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6236e1b9-8c9b-3e1f-aae7-fbd32a4ca55d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="1552981372" unbViolId="8ef24e0c-e671-3e91-8d04-4b3823e6cf7c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0638f4df-0211-3050-8578-eab245403d69" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="3" auth="yshi" locRef="4" rule="CERT_C-PRE00-a" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="6f798aa2-3f53-369a-ba22-f6c0ba46a3f4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="698efb5c-daa7-3784-b877-ffbf89fab9fe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="3" auth="yshi" locRef="4" rule="MISRA-096" lnHash="1552981372" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="e6f0825c-2402-385d-b564-c3da53065897" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e8bd695-3c9b-3e53-af24-087160980e06" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE02-a" lnHash="1552981372" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="dab9e307-ea27-3070-9edf-a3915f2c00c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee630ccd-5aa9-3279-81d7-37003211a984" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="1552981372" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1552981372" unbViolId="8680fd93-5337-3dfe-a038-41a6db05450a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="158d366d-aec7-3d1c-9f11-d38fa1dd21ae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="f6a60bf7-9e32-37b7-9452-5819d11ab824" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18fe3151-4a31-3a23-b118-39fc7def5557" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="b4a7ea4b-1de1-37af-8f2f-a6605e30c583" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1868874-f5b1-3014-a011-6e62b6f3a8c9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="55e45ed9-5786-3be6-85f2-5bee9dd83cb6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf80edcf-6e7f-3155-ada9-1d7f02f18961" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="69a4a3b3-240d-3ba2-99cd-d3eb61ca05a1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ccb10c4-c47b-3f9e-ad06-078b3f2b5cd4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="1552981372" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1552981372" unbViolId="8de3a056-a952-3523-a212-8d6a2b450515" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ec4d45f-ef0e-3f21-a39e-11a6ed53c93f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="1552981372" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1552981372" unbViolId="65e64d7a-a93b-3f6d-975e-baf2da5e8fd0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b396d28-e06b-301f-84f5-d56ebc677541" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_RELEASE' is enclosed in braces" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="1552981372" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1552981372" unbViolId="e0990310-eb7a-3b2d-9946-3c8c7e7fb219" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e00eb4aa-94a9-3a3d-bf1c-d26cc8c3dbdb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_10" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="23bf65b3-00e5-3675-98be-4fe31ecf1751" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ed22c3e-7929-3309-87c7-294543f04f44" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_6" lnHash="1552981372" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="dd6b6187-86d4-3eba-9268-2701274b7501" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d51ccef2-5014-360a-b53b-6afa7a386a9d" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="1552981372" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="1552981372" unbViolId="d3cbda8c-5ef8-3250-b84f-e3da2199058a" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf714f3f-4f74-323f-bb3a-0ec8a84b872c" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="8f499981-292c-3a6b-a8ee-a8074684314b" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5963984c-1586-316a-b3db-7285f4a4a7be" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE01-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="13d45874-75f1-35cf-8464-3dea457d533a" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9889bd6e-f746-3eda-95d4-5ba766cc7146" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="13" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="9cd89a71-fd10-3e12-bfcc-aa73a507c8e8" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8b06ae4-5190-3dd9-baea-eac4cbb54ce7" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_4" lnHash="-477159842" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-477159842" unbViolId="8487d7d1-441c-3c13-bc95-3ec7ade344c3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed017271-b019-3fa6-917f-25a9e019c198" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="e3197f85-d5ba-369f-902c-23aec0878aa4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9637cfe2-fee3-3195-b58f-69e3f2f5fee4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_7" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="b8bd535b-1508-357a-9a3f-70c5bb69f61b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="821c6abb-2ac3-330b-98a7-1de73a52fc86" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="2" auth="yshi" locRef="4" rule="JSF-029" lnHash="-477159842" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-477159842" unbViolId="cb8a9d4c-ff73-3c79-af90-ad3b5632377e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="550b2cc7-ff5a-3d9a-ae6d-dd41cc3cbac1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-477159842" unbViolId="a009bb13-36e8-3b46-99da-70832a9661af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fea46c7d-6f1d-3f4b-8bf2-f09ec08cfabb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="3" auth="yshi" locRef="4" rule="CERT_C-PRE00-a" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="3b6524cc-a7ed-353d-ad82-815fd0af9dbb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f10b2d31-8deb-3a68-a7ef-1584ecb6bfed" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="3" auth="yshi" locRef="4" rule="MISRA-096" lnHash="-477159842" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="293fe2d2-1ba0-329a-978b-431451469b64" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdac998a-929b-33b8-9efb-9d26ee1305b3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE02-a" lnHash="-477159842" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="61eb0000-b6b4-30ef-8670-4be2b5084070" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb5bfeb5-d9bc-306c-8b35-190b1dbaa61b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="-477159842" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-477159842" unbViolId="2c294ee7-c313-3b7b-8352-a47e01c09960" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="855f6543-87fc-3e9a-9487-8e2e3fa91fb3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="d0a8bf39-2a47-3983-866e-86a41f3b3623" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4a06d28-f946-3366-9326-aa9288b10007" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="a494486f-7021-3509-b63a-bc779829a0e4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a558de3-df33-3e9f-9172-7b8ae44a2801" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="0e85cc8f-0a1b-34c9-b320-ed11ef161162" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98180b5d-9446-3d0b-ab3b-c166ad06fc1a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="a05ea3e2-c4a8-3d4a-b58b-385e0fcf726e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="031f2cbe-9db4-3cbc-bd78-0a0d89cd9fd2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="-477159842" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-477159842" unbViolId="6af45529-6964-3bd2-9578-f47c0488ed61" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9d7b402-eb4b-3bac-b5c9-c85ac8443533" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="-477159842" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-477159842" unbViolId="452bed36-0206-3f02-9fcb-42b0cfa8aa55" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3e66ab5-b1eb-3b33-a2f6-5e52664136de" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Not all body of macro 'SLEEP' is enclosed in braces" ln="15" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="15" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="-477159842" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-477159842" unbViolId="fbd310ac-b523-3e39-a1f2-43f3848291d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eed88ae5-8a5c-389f-a034-1d23f399002e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="17" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="7bf125e2-c6ee-38f4-9bac-e9b37dd16fce" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85309b6c-615e-325a-8354-d260c387ada4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="17" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="72de1629-3146-36ad-a076-796dd4735e3a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="201cff6c-d2bb-32f3-b766-61fa07833f3a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="17" sev="2" auth="yshi" locRef="4" rule="JSF-026" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="30a17200-b91d-3915-96f5-4ad8ada4e4ce" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04c8d3fe-c615-3b3d-846b-969e32a23fc2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="17" sev="3" auth="yshi" locRef="4" rule="PREPROC-11" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="f1a97b4f-2e7c-3122-a17d-355d7824f2bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d2abad2-f0fb-3b3e-9902-d81a032b014f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="19" sev="3" auth="yshi" locRef="4" rule="PREPROC-10_c" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="91184556-16c7-3ff1-a107-a2424b57e49d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="742b6ac5-0693-36c5-a925-6995bd988d14" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="19" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_e" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="60951cef-d147-3cb6-9744-56c0e33ed3a1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23249820-9786-38c6-81a5-9fb90e79851b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="19" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-f" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="b3408c62-fa9f-33ad-9bfe-91d639da387a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21293d1f-ca49-3b8b-a86c-0aaddd42a1c2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="19" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="19" sev="3" auth="yshi" locRef="4" rule="PREPROC-11_b" lnHash="-343784077" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-343784077" unbViolId="d678ce92-0eb3-3342-84c3-d84b2222c1c0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6aedbe8-324a-3cd1-92ce-0177cfa5dc8c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="19" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="19" sev="2" auth="yshi" locRef="4" rule="JSF-026_b" lnHash="-343784077" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-343784077" unbViolId="adcd9072-b057-3bbf-9316-78b767079d1a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd16c2d4-9e14-36af-9714-695968af249f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Line has over 79 characters" ln="19" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="19" sev="3" auth="yshi" locRef="4" rule="FORMAT-04" lnHash="-343784077" rule.header="Physical lines should be less than eighty characters" tool="c++test" lineHash="-343784077" unbViolId="200fad2c-1a7f-37bf-85d1-9606025066cb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9790fd7d-e0d1-3945-bc7a-53fa8d080a1d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Line contains more than 120 characters: 302" ln="19" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="19" sev="3" auth="yshi" locRef="4" rule="JSF-041" lnHash="-343784077" rule.header="Source lines will be kept to a length of 120 characters or less" tool="c++test" lineHash="-343784077" unbViolId="f91a7427-22ab-3331-92d1-3d867d4521c9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a61d0037-60ed-3388-8beb-21fdef7c7234" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Line contains more than 120 characters: 302" ln="19" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="19" sev="3" auth="yshi" locRef="4" rule="METRICS-26" lnHash="-343784077" rule.header="Source lines will be kept to a length of 120 characters or less" tool="c++test" lineHash="-343784077" unbViolId="430d3d38-c518-38ac-8a2c-655361bc4be6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d25a12f-ba05-3480-9777-7e8668740c71" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Do not use platform-specific multi-threading facilities: &lt;pthread.h>" ln="21" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="21" sev="3" auth="yshi" locRef="4" rule="HICPP-18_1_1-a" lnHash="-1671860853" rule.header="Do not use platform-specific multi-threading facilities" tool="c++test" lineHash="-1671860853" unbViolId="6d9a4749-667c-3cdd-b904-3fec4e6f0df0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ad129ee-67a5-32c5-8d17-99e1c1daf4c3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="21" goals="0," />
    <StdViol msg="#else pre-processor directive should not be used" ln="24" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="24" sev="3" auth="yshi" locRef="4" rule="PREPROC-26" lnHash="35439580" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="35439580" unbViolId="6cd2ff74-d24e-3ebd-8859-a5c739a19c26" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b41f060-9328-3841-8e13-5091106099aa" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="#else pre-processor directive should not be used" ln="24" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="24" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-a" lnHash="35439580" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="35439580" unbViolId="eb61dedf-76b0-308d-8e46-8c73d688ee80" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d98baae-8f0a-31e7-8654-584d76c9990f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="24" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="12cf116d-eb07-3373-8b25-e68ec3679b6c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bacfdbc9-41f6-3421-8293-f73d42eca1d8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="24" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="a85b8664-a0d9-301d-b615-01a598329fbc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79183442-e420-3671-a6b4-650823544d53" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="24" sev="2" auth="yshi" locRef="4" rule="JSF-026" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="87a89a49-4811-3379-bda5-e7150fcb91af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0dab24f-7a36-34fd-8878-f66902d1211a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="24" sev="3" auth="yshi" locRef="4" rule="PREPROC-11" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="55f875e7-5b29-395a-bc6c-499a15e58b47" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10441c67-235a-32b4-9d4e-c6d01fe823d3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="-770959773" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="85a6fcdb-4e98-3514-8998-a922bf9f875e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfb817b9-11a9-30b4-b5a3-a975372486ed" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-770959773" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="db821be9-ccb9-3f90-9a11-cff8606237f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="271abba3-e17a-39de-844a-1e056bf61250" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_6-b" lnHash="-770959773" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-770959773" unbViolId="44438f23-df15-3d01-9978-5191114850e4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e49e3e01-164e-34c3-866a-0e7bb7234e18" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="92ce246f-0385-3b0e-a351-bc40a002b608" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc7aa43c-7711-31af-a263-4687bee1187c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="3" auth="yshi" locRef="4" rule="MISRA2004-6_3_b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="36be57f4-91da-37e3-8f51-1374dce3b654" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df4451a9-2bdb-3912-af60-78369d373995" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="2" auth="yshi" locRef="4" rule="JSF-209_b" lnHash="-770959773" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="2769f4b6-2a1b-3ee6-b0fb-df92489e22a7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0f7f56a-0f56-3169-9d38-fa4b1e8a2e96" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="4cff98dd-fe1a-3912-879f-66ed8a653084" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2cc2a80-d8ea-3632-81cb-4051b3a57853" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="3" auth="yshi" locRef="4" rule="HICPP-3_5_1-b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="9b4101fb-8b84-3ebc-b56f-be618d47e324" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e50fd8d3-1a1d-30ba-ae83-1166de7885bb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="-770959773" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="c04b2458-059f-3e15-9818-119a31aee93e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c648e7e-3520-3556-8bcd-fa3a8a4a41a3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="30" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="-770959773" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-770959773" unbViolId="827853b0-7474-354b-a99c-9039c061f82f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d23bd35-ad84-3d72-938d-a28165273884" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1338521823" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="1aae6520-1b5f-3828-81d2-e41b5759ac7c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4da93f80-2022-3cf4-8f01-bfd4e7925828" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="-1338521823" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1338521823" unbViolId="95b922d4-3ad5-3fe8-9e0d-fd8986cdae4c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dcb8312-2d32-336f-a6a6-930ba6dd18b1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="-1338521823" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="8e534086-8225-3346-ae34-a7e4e6424b63" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c40ba78-00af-3b55-9464-33906029d84a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1338521823" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="d7bf0e65-df34-3441-84b8-5b3a287be302" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00d2c824-2089-3759-b538-51eac25f352c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_6-b" lnHash="-1338521823" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1338521823" unbViolId="b501f2a7-405b-316d-bc5c-eddca24cfa36" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31955600-251a-3ba4-9b97-3bce3a9abea1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="615bbcd8-3d62-3ac9-a754-426a6c5d98e1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="698c2945-aa11-3265-bef1-37a2a9cd6033" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="3" auth="yshi" locRef="4" rule="MISRA2004-6_3_b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="95d5f12f-b856-3170-82be-6049328e3fcb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5607d65f-5f31-3ab0-a91d-6c078eb1f99b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="2" auth="yshi" locRef="4" rule="JSF-209_b" lnHash="-1338521823" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="675971e5-868d-3639-94a9-dd3092603c7c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88a222d0-58aa-334f-824f-bbb1a73a718f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="0dc716cc-419f-38fd-a896-ecc97aa5df79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="868ab98f-fa23-3f26-84bb-43a4b9ac90f5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="35" sev="3" auth="yshi" locRef="4" rule="HICPP-3_5_1-b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="dc3450f5-3b2f-3c5e-a55f-ee437c536e27" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="108fc5b0-d215-3438-be45-1ba5761e89dc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="-529470406" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="f0c4155c-a9b7-3332-a909-9b8d2a2fafb6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25e7a855-25d8-33a6-8989-a2e41ee9b8cc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-529470406" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="fe05b049-4e81-34e1-b7a5-e3450a8d9e45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95331811-826f-311d-9eca-843345f11e15" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_6-b" lnHash="-529470406" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-529470406" unbViolId="5927813b-5aa7-3fe9-ac75-e886a568df6b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc1b7b3e-640d-3d9f-87af-a169ce294401" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="6b6c5236-22cc-37dd-8ac7-8e087b1f4f27" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98ff3d56-d8e1-3da9-95eb-9caf3247732f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="3" auth="yshi" locRef="4" rule="MISRA2004-6_3_b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="a1c6bd55-e62d-3529-aa67-b7ff00543051" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="898bc3fc-7674-3358-b7be-a95cb3c291d1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="2" auth="yshi" locRef="4" rule="JSF-209_b" lnHash="-529470406" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="2ee47b15-bd5a-3cc8-bc59-ae82c3491297" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eedd1d92-eb06-31b7-aeaa-a3cf7a8c8c66" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="34d4e09d-6a91-363d-8b94-997f5ec6b894" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77ec9201-8b4c-3dd3-bd16-d6aee403fca9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="3" auth="yshi" locRef="4" rule="HICPP-3_5_1-b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="f76cc857-3104-37d8-b665-9700cf86615c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7edc9190-dfb7-3ca6-944e-ef4f575f0aab" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="-529470406" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="2067db57-7e81-3c6b-adf4-dd317cae07e5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbd3d481-cb2c-3676-8e80-4f0d41412f27" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="37" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="-529470406" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-529470406" unbViolId="34c397c8-c4a1-347f-ba69-f2a12a8c0008" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="967c450b-c8ab-37da-b30c-a32e27b97142" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="-962720826" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="4573aae4-e5b4-3d66-9954-ffea41eb2d76" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44c7d3d1-4ede-3ce5-95fd-901afa25563e" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="-962720826" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-962720826" unbViolId="b51fc1bf-918d-3154-8585-60177f1268c2" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cd586d1-e494-3293-84d5-fc0ed207e510" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="-962720826" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="96d198e5-5454-3128-aea5-fdb024c4351c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5d352b2-6519-34fb-ad78-8e62eba32a9c" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-962720826" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="e01fc98d-4aa5-3007-831f-3e3b69598c52" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="215c291c-86b7-3d7e-86af-2a55444dc0cb" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_6-b" lnHash="-962720826" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-962720826" unbViolId="b5a45d08-de5f-3515-9f15-f34ca87ea48b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfcbebec-6631-3344-8512-0ad71787abe6" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="60066d6b-cec6-3f8a-9879-6d94a715e1b1" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af10072b-d69f-3c45-aca5-1a3cc6d8061c" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="3" auth="yshi" locRef="4" rule="MISRA2004-6_3_b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="92dfa0a5-beb1-3785-923e-b36fd3cb86de" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a56b2364-fa7c-343e-b881-012e75b1e4d7" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="2" auth="yshi" locRef="4" rule="JSF-209_b" lnHash="-962720826" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="77d7107b-d0ca-3780-b60d-0ac9ab9c337c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="982d2229-d0ef-31d7-a06b-f08b7cd4a350" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="e486db24-17ca-3962-90e9-ab8dec319c9b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc8e8f47-283f-3335-a199-61961a28d3fc" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="39" sev="3" auth="yshi" locRef="4" rule="HICPP-3_5_1-b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="9709ebb4-f9a5-3c3f-8ba5-9fd22a714dc0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95d6c97d-0ee0-34dd-b46a-ac96187b48b6" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="41" sev="3" auth="yshi" locRef="4" rule="PREPROC-10_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="5e1df5e8-f276-3d1f-8cc1-4503c972e9d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="866ac910-68e0-3e34-b323-aa34491c8273" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="41" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="9d476a59-eb9b-337d-bd6a-50de25c9c919" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b3c960d-c34a-38ff-b0a9-ed1df893def5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="41" sev="3" auth="yshi" locRef="4" rule="JSF-028_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="0feb92cb-a2a5-312e-b926-424b1edf76bc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bbdc2d3-edd9-3fe4-92c0-7438fc6d8e5e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="41" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-e" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="30a4cc2b-bded-3ca2-a860-ed38f0c0d987" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8875f17-99ad-3998-9cf8-55dbe932f4eb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="41" sev="3" auth="yshi" locRef="4" rule="PREPROC-26" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="152ec18b-042e-3171-8af5-6c9df59b8d32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="540198f6-1788-3c1f-b67f-e469060b27a8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="41" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-a" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="32013f3f-31de-30ea-980a-6e5770ce8c4c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="525da77b-ea62-318b-bf24-89ec3302eecd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="43" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="-1234653797" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1234653797" unbViolId="279fa1d6-bbc8-3ffd-9dbe-3735f96effe9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61458939-02e8-3974-a5db-a29eb27c79ca" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="43" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="4a9514c3-2808-3c0c-a7fc-d852c89e8a7c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="264629c6-f0b3-3495-bdad-cd4808b50ff1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="43" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="09d589f1-eb7e-337f-84b1-ec5149d08380" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c004f7f-d3d0-3785-b52d-b779a766d2b5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="43" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="fa76e7be-b661-3166-8ac0-d9b55ab375a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21c703b2-d26b-3ef5-a356-d697b2e46b4b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="43" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="4b528c63-c15a-3545-80ca-bfd14b0263f4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="766af251-1536-3679-befb-721cd3aee33e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="43" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="43" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1234653797" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1234653797" unbViolId="6d017237-11ea-328c-ac6c-238ccc6a7908" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43badca1-0cb1-39dd-be9c-370b511e9058" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="43" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="43" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="-1234653797" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1234653797" unbViolId="412e1a04-1ff9-3499-9d8c-dc2ecc48a187" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a022acf6-65f4-32ff-af79-08a11b00f151" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD' is enclosed in braces" ln="43" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="43" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="-1234653797" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1234653797" unbViolId="445c930d-fe81-3822-9d62-9c4c8a530997" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5553428-de42-30b7-bd2f-acd82d02b82f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="44" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="1590150764" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1590150764" unbViolId="968facb4-3e26-3270-b565-65f3544d6c31" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf029a8a-87e5-36cf-ada9-8bc41b159183" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="44" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="302c2763-89d3-3312-8b07-bab86b8519f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02c583f2-4389-30fe-ae26-a41e27405568" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="44" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="c620fee8-3e91-3945-9d4e-9d7a01cf931d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdf447b1-0e19-3bee-8033-996cf39f0c26" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="44" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="873f82ac-46f3-3bb2-9b2e-887647aa3800" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1f032b4-4aef-3793-bd9a-88d8870f860b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="44" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="7172ca4f-3f82-3ca4-967b-6b52f7f49f57" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bc77899-05e8-357b-9c95-6f3520b97da4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="'THREAD_RETURN_TYPE' part of statement" ln="44" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="44" sev="4" auth="yshi" locRef="4" rule="PREPROC-04" lnHash="1590150764" rule.header="Don't define part of statement" tool="c++test" lineHash="1590150764" unbViolId="6bc95ed1-1c71-3aac-8301-41b50d803260" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d1bab22-a6b2-3903-9534-9707eea30697" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="44" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="44" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="1590150764" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1590150764" unbViolId="eb4a36eb-3eb0-323c-b044-3b7385af1378" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65744d29-ab35-31bb-ad63-ad0a80703fe8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="44" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="44" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="1590150764" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1590150764" unbViolId="85c8f041-773f-32d1-a11e-25b70b05f942" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2cc23b7-5b97-321d-8b6e-22d2b0d8ff85" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces" ln="44" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="44" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="1590150764" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1590150764" unbViolId="b43fedfb-faf4-30ad-90dc-8d283c60d9ee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24708083-d5bd-3f45-ae81-1697f397b94d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_4" lnHash="-1763822430" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-1763822430" unbViolId="782d96f0-b634-36d0-ba9d-a5fee172f9ab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="250fb2d8-2040-37fc-860c-407b0ea57e7c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="e15552dd-3b63-3c8b-b8a3-b66c20d710c4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adae32eb-8a7a-3b5f-a8fc-edd8bffeca40" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_7" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="153aa59d-13a6-3f3a-a624-4aef76d4a15d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9592ee11-8922-33b5-b9c4-2a99fdcf03af" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="JSF-029" lnHash="-1763822430" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-1763822430" unbViolId="d9622ac4-72a6-3412-b702-9f9073534f73" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="592665f3-1247-39d3-b670-41e6de3e06c6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-1763822430" unbViolId="98943167-5556-3ad6-91f6-cde1b8ce9790" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96db59e7-9582-3cb2-be91-88db2f699597" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="CERT_C-PRE00-a" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="0c1544dc-aaf1-3ddc-bbe2-a219ff8f6128" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b608590-329e-3546-b6c7-9a398208ddbe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="MISRA-096" lnHash="-1763822430" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="ab16f2da-78dd-3618-b430-99cb024d639c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afaa1549-b6df-31d4-a902-cb769fd65b30" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE02-a" lnHash="-1763822430" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="5dbf21a3-a441-3244-9948-4b9624c9e7ed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76793a09-f941-34da-b89f-1ccc8a70fc12" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="-1763822430" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1763822430" unbViolId="2befb122-30a8-3dbd-830c-3ae405debfff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91d27b03-ae3e-3529-94d1-a93c4ed6a75c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="6c255020-c8db-343c-b184-00795607ab63" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b24a8a7-f643-3347-a5a0-9e21e4f13eb7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="2fa29873-5326-3af6-9ebc-532fee4ef196" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c4ac40c-dc76-3a6e-9c8e-e904fb8c9850" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="a73a794b-f4ee-390d-b344-f6e697fa1776" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8a832df-7729-3dab-89e5-dabf48c845fc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="3a1e6853-b9f6-32c6-be3f-85e25b190284" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b78f76f-b3e8-3f52-af5b-fb14ca518a6a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1763822430" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1763822430" unbViolId="d3df1dac-d2cf-3047-b5db-a0491f1bf386" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b06d378-9da5-3c93-a68d-eac8f223c343" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="-1763822430" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1763822430" unbViolId="2500a975-56f9-3922-86f2-0e760e021543" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d7fa3af-98e0-364b-901c-5864387fcba0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_CREATE' is enclosed in braces" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="-1763822430" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1763822430" unbViolId="7cb059ff-9727-36f9-88e1-199bc7338675" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ed70126-6dbc-355e-a657-62c1e0c0e635" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_10" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="dac8f112-b85c-32e5-aeaa-667ae4c22cd6" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cb0cdd7-facb-3628-9849-e051643e5946" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_6" lnHash="-1763822430" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="02773bad-76dd-3bf6-b501-d4bb050287b9" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b460b06e-685e-30e4-8200-86081f8e2bb6" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-1763822430" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1763822430" unbViolId="ef4d11cf-88e9-322e-b86e-2cebcfdacaed" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e396d0c9-e692-31ab-b4ed-369804eb9f54" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="038a9697-03ae-3f5f-a77d-e07e161e87d6" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de02cb2f-0fd5-30b0-b829-2f1d9639c6b5" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE01-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="2712429b-ace3-316b-ab9a-f3a5bd74d8b8" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fc56f6c-7b1a-3ecf-b163-7a2e0e1e105f" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="d4daec5f-0c8e-362a-b7da-b016cea2cf14" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91e7d56f-1d1d-375e-9fd4-6d605f27dfe4" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_10" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="65a0616d-c112-3c07-9c76-60c47a753b88" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3e5fb80-3a95-355c-9800-d22547a79605" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_6" lnHash="-1763822430" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="025967cf-56ee-3d05-8fb3-aea1e5bbf46f" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c9ff5c9-8daa-3ecd-ae00-dcfd36290dab" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-1763822430" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1763822430" unbViolId="a450f127-c514-3c19-a619-b0f1895f1894" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bab039a1-db5d-3d2e-87f9-da6c51e410c4" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="e84b259d-6dfc-3982-8b23-52f978b2d30a" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f6ca0bf-3c3f-324e-bd9c-ee740346ad3d" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE01-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="831b21bf-a5cc-3321-bdee-27fb4606e096" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db1fc21a-75f3-3a4d-9395-123a5b298b18" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="45" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="e6999c52-75f7-35a1-a806-6ec7bbc5fb70" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54d495c8-a87a-3009-9692-d51d79ea6f80" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="47" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="810266428" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="810266428" unbViolId="b491787b-51ba-3e42-87be-4bfad1fc264e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="570ec01e-6973-39e6-a95b-b5b9e120b3e4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="47" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="2a0a599a-aefe-3666-a331-32c00bf58aac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f87ca53f-29bc-3751-b104-67fcd49e9481" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="47" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="be6df8db-5dc4-387d-9a2a-6a9a685f8462" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50a934a6-85bf-35be-8c4d-240de1dfe68e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="47" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="acd0dffa-f87b-3b3e-b7c0-4adbb4462af8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba59a0f3-0a77-39f4-9292-c21ebce0b39e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="47" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="96d11465-ac7c-3009-84a6-97af53da9113" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d80de83-2acd-3e7a-a3b7-85b9dd81bd73" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="47" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="47" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="810266428" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="810266428" unbViolId="fb6917f0-fee3-3e88-b951-4c91a21be325" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8802791f-431e-3ee0-b353-abbfacf2ba86" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="47" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="47" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="810266428" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="810266428" unbViolId="43c49694-7740-3c2e-821d-1d33b63c2e36" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57278463-58a9-31b7-9ea4-90e3d50f004f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK' is enclosed in braces" ln="47" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="47" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="810266428" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="810266428" unbViolId="5fab7bfb-7d68-3d94-bfdd-2e315adfd925" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e78134cd-724c-3df3-b244-4686f674ba52" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_4" lnHash="865954250" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="865954250" unbViolId="fafca7dd-8f6b-3fc8-8e16-efb1777cc475" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cdbf230-788d-3a21-896f-2e594b1c51ef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="ac876ae6-216b-36ae-89ad-94befadd7e77" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc13a8ef-1884-3248-bdbc-80fac11695cb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_7" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="2f8335b0-d513-3d98-9db0-c099fa5f5dea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8446bea-ce34-3d84-a3c4-4bc01a5da874" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="2" auth="yshi" locRef="4" rule="JSF-029" lnHash="865954250" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="865954250" unbViolId="7b22cbde-ac03-35d3-8471-f991e27808e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c71d1f6-21aa-3381-bdf2-f6d677c565d5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="865954250" unbViolId="3b458751-c758-3ec3-b3c9-5710cd965eb6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef4c823a-cfb5-382e-a5a7-4278ec242e9e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="3" auth="yshi" locRef="4" rule="CERT_C-PRE00-a" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="32ba40ee-2629-304e-8662-06c844b48af2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05d6e149-af9f-3108-9716-4ceb18eafebe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="3" auth="yshi" locRef="4" rule="MISRA-096" lnHash="865954250" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="865954250" unbViolId="e714bb5f-1d80-32fa-a7de-fa68805ab1e9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdf07a58-e047-3c0e-a21f-56596d1d9045" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE02-a" lnHash="865954250" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="865954250" unbViolId="f2b22075-6c08-3132-9caf-7e8fc63117cc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59b3c22c-8818-3ba6-8d09-33f94ce795b5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="865954250" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="865954250" unbViolId="e4ec86f6-d1f4-3de5-98a0-647712561f22" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffca1f49-8253-35d1-908d-7fb4d3e4fde4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="9d21f129-f2b6-3c76-b275-c72ecd1120ec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47a737c9-330b-3b91-9535-7eae9cb0f6ec" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="c1237ad0-862b-3317-8958-57fc611ac130" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1590eaed-0e4c-3c8b-90c6-bc8f71869400" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="6d255a72-f697-3d52-bea9-9ccc5b6129fb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96f7554b-86c4-3045-b264-c33925b2419b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="b5c46fb3-f2d2-391d-9156-fbf52ca4d51c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91a2266e-2d03-3089-b8c7-e3c008aa7a0c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="865954250" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="865954250" unbViolId="708dd890-f5c9-3ca5-800e-c04cc1cbe6dd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe296000-ea15-3922-9fa9-6dfbdbe01e83" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="865954250" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="865954250" unbViolId="31e93862-a203-3cef-9b85-51edd7df9851" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1069d8cb-5c89-310f-9d72-8e567fe4f92e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="865954250" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="865954250" unbViolId="31e0dce6-5f33-3905-8d82-5a4eac71e67b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b76b582d-d89b-376f-ba38-ce4e13c8309b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_10" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="b9ef1472-18bc-3a30-ab69-d3ee3691e138" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c64c4063-004b-3f41-a94a-82970c22ce1e" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_6" lnHash="865954250" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="682f9e2f-a3ee-3c97-9a31-9a5854af670c" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f22fa2c1-116f-3f06-a84a-1dd240ba018e" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="865954250" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="865954250" unbViolId="90c4efe6-3803-333b-8357-fc4547b476e4" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="131bd1c3-4d0e-3819-a7b1-dafe63ad8729" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="f5b3120d-cb6f-3f0b-b1d0-2ae14cb01b04" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8077eff-b365-3f94-9ac7-a3b3b23ed558" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE01-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="b97a52d1-fbf9-3c6c-8642-8599a32391f4" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="925a804a-a709-3408-8009-80773f02a653" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="48" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="84faba4b-01f8-396b-aa42-ee092823a98b" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="348718d8-9f4e-3c43-bf7d-73e64e38fdf2" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_4" lnHash="-1510788286" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-1510788286" unbViolId="c04ad8df-8990-336a-a822-8a1acee8d101" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2de4a91b-fd0d-3639-90a1-9a8180e3cf4b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="bade0e31-a54e-31be-967d-d1473ae0191f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aee697e2-1989-3fa4-8290-45aa1dac8e2b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_7" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="882e6a15-f995-3eae-a1d3-aab3547d77b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3dfa18b9-9762-3464-9d43-15c5595ad279" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="2" auth="yshi" locRef="4" rule="JSF-029" lnHash="-1510788286" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-1510788286" unbViolId="6492436c-cf00-33fb-ba07-7e078b78d3bd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4828d46b-4b2c-338e-93f4-a1ba4a2c54ba" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-1510788286" unbViolId="f3e3e2aa-af63-3173-9a3f-e8dcbac1c391" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f990d35d-a8e5-357c-b57c-b87be66b4d68" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="3" auth="yshi" locRef="4" rule="CERT_C-PRE00-a" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="c91e32f1-c852-3a39-ad22-3b4fe955047c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38c866d2-b141-3edf-91d3-76d598534c64" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="3" auth="yshi" locRef="4" rule="MISRA-096" lnHash="-1510788286" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="eccbf2ea-60e4-3212-b864-91c0778fb6c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f802d0c6-10e0-3371-8be2-0b170d4be57a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE02-a" lnHash="-1510788286" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="21d97d9b-b46c-3f95-91a4-af651ef8a636" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6232f8a-711c-3e2d-a49d-9c78afc1273b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="-1510788286" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1510788286" unbViolId="939a0239-3885-37d5-ac0a-cd0662059ad8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63283f79-cdd1-3db7-a654-df28a124fe49" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="703e3687-2af9-3f1a-9896-83227fdf4178" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90f14927-bf04-353d-86cf-891eee71d0b5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="5d5be5db-edf4-3b63-9566-d48637c685fd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62bbbd14-5499-33e6-b3c2-4506cb45a177" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="4b114107-886f-3d1e-8f7c-755c2abd1de1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efb23d5a-8a7f-32f6-9eb2-ac9f461e81e5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="e4d50a3d-3c8a-3d21-bf6a-ec128cff9e5b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92413f6a-a29c-3ca2-96aa-6e5fbf5e974d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1510788286" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1510788286" unbViolId="9a6f3a0d-e073-3262-9eb5-9d8c66cbb5ff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88ee53ce-6f0b-3b91-b42a-5cbbb250ab4f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="-1510788286" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1510788286" unbViolId="ca89c89f-dd6f-32a5-b74d-a86e9c4dc2cc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94fe2123-9f88-3eb5-b16e-c02ba10fe390" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_RELEASE' is enclosed in braces" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="-1510788286" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1510788286" unbViolId="dd1d9d68-5f68-359d-a775-7d9d9a7c6531" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8fe2620-1970-34af-b679-27ee751d4481" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_10" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="38e685aa-7a63-31f0-944c-2020ce1fcba0" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5b41868-079c-3df1-be1b-1015b6fc9316" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_6" lnHash="-1510788286" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="0c2c09ab-3b43-3d30-b094-cb8269044ca9" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9010ef2e-3049-3734-b343-5c7d91eab05e" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-1510788286" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1510788286" unbViolId="8f42b902-80b7-350f-a538-c3871f0e0f54" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a135609-eb0f-3983-89b8-3abacbbcb385" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="dfb934a1-ce99-3626-a6e8-2fe7af5d8d94" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b57f92f2-0a2e-3aa2-bc59-37155f1955e6" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE01-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="0aa7efca-c52e-3845-ac78-0b1598f6718a" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7cf6701-d0f3-33ba-abb3-badfeee9ee5b" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="49" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="7bd6bf7e-c69d-3f58-a43e-62b479ea3f2b" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7242d589-1597-3d26-aee4-9e33b494da4a" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_0_4" lnHash="-541803970" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-541803970" unbViolId="c460121f-38c9-3ee9-a4ee-b377d7837209" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1da622a4-516d-3f7c-b854-9ffe556cdb6b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="c11c06ab-5d70-3bf3-9d96-44f490a2fa8c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="917e96e4-20ce-3d54-82b8-b523dbe50fa7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="3" auth="yshi" locRef="4" rule="MISRA2004-19_7" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="0cf365a3-13a7-3658-92bd-a0694888b22b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bfbc6f2-d269-3017-b9a2-2700b681dd96" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="2" auth="yshi" locRef="4" rule="JSF-029" lnHash="-541803970" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-541803970" unbViolId="d0b7f9a5-b2a3-3cb0-9ff8-c0b0191d7e19" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3dd35636-e42a-3a0a-a791-a2b506b259de" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-541803970" unbViolId="32eb68bc-1038-3e7c-80b2-1f61e356bf7b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f6f86bb-495c-34de-98f6-51a264bc070c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="3" auth="yshi" locRef="4" rule="CERT_C-PRE00-a" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="a6b7e521-ed64-3500-9403-621a15a197cf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="600577d1-7828-37f7-b6c1-b6d10c24663a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="3" auth="yshi" locRef="4" rule="MISRA-096" lnHash="-541803970" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="1a17056a-c764-398b-9b01-9dd1e7b1caf7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33281ee1-facb-3122-be7b-8be0a5ce513b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="1" auth="yshi" locRef="4" rule="CERT_C-PRE02-a" lnHash="-541803970" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="e8e14de9-04e1-3128-a909-50f3df8b0248" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="076e555f-9e85-3eff-9217-e9171f5810dc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="-541803970" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-541803970" unbViolId="3017a518-a44f-3d48-bf34-b53c8d094959" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2932f8d1-17ba-332f-adb3-1341f7f4106c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="b6ee808b-6f79-359d-97a4-b832a5c193f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bd7fd9f-0862-3293-9620-d6fcd2f12458" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="d7c36942-af5b-3f5f-bee5-d2be833e8849" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86e1df5a-d1de-39d9-b161-f868eb353f16" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="66de8d9f-d306-357e-85cb-cea5c72b7131" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f700a876-3126-3f35-b806-33ebf45a79a0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="1b5899ed-fe7a-36dc-b88c-92b715a4b3c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c44ea80e-2a80-3fe5-99cc-416618abf8f8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="-541803970" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-541803970" unbViolId="a3dc40fc-599f-311f-8851-9fd4d5de5243" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07c51b76-44ff-37e9-a33e-79f91f575123" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="-541803970" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-541803970" unbViolId="72e338c9-e77d-34ca-94cb-e43ecd92c47d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f929350-1ca7-3be8-9a88-679eadbd4cbd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Not all body of macro 'SLEEP' is enclosed in braces" ln="51" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="51" sev="3" auth="yshi" locRef="4" rule="PREPROC-14" lnHash="-541803970" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-541803970" unbViolId="0c540c15-9796-3843-ae63-2366d0203a79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35cbc349-4dbd-3d86-a48c-0fef1649d6bb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="53" sev="3" auth="yshi" locRef="4" rule="PREPROC-10_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="ea8e8db8-14e0-3425-9c83-2d1b17cac2ca" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8ae394f-1b02-3ee5-93d5-7ff70961423a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="53" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="4125bfe3-fd3d-3d01-a097-3b14598671c3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfc71b38-4232-3c8f-b462-f2ac8b1c1e75" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="53" sev="3" auth="yshi" locRef="4" rule="JSF-028_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="e66d7f6f-f091-307b-9102-6421e967d724" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa7bac83-1448-3744-826b-4896a30e77cb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="53" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-e" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="11fa2788-0655-3863-a77f-de4c9d06faf0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="925d1e6c-c58d-3c74-9b93-932f4ad6770d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="2" auth="yshi" locRef="4" rule="JSF-030" lnHash="941979080" rule.header="The #define pre-processor directive shall not be used to define constant values" tool="c++test" lineHash="941979080" unbViolId="288bdae2-9835-3c34-a457-7ebc1f832cae" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de74eeae-ac3d-3239-bdde-89654d913079" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="3" auth="yshi" locRef="4" rule="CODSTA-03" lnHash="941979080" rule.header="Do not define constants via #define" tool="c++test" lineHash="941979080" unbViolId="d1c65da1-7d0c-3c2e-b555-b576165716b6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7bb53f1-e258-3417-99a2-eae28458b920" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="941979080" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="941979080" unbViolId="c0bdd25f-82f2-3fbe-bb7e-e58a6a74d34b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a52ceaed-d4f8-36c4-bb53-8fa827b408d2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="b9d2da18-079c-3324-a639-417f2210c8d2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca1806f0-e723-3d50-8b25-2c54ab38a9cf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="02a610c8-9378-3ae4-9ece-ed1a95741ed8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a513eae4-a47e-36ee-a313-0f77119c26c7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="da743d58-63ff-3db6-a501-d14bd9aea349" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c80529c-8660-3670-bf4b-7b977a2b75cd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="aee6c646-cd50-328a-8c1c-d2f24bf90ced" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5cbeccd-c8fd-35bb-8c5d-3187cdd2ed18" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'MAX_OBJECTS'" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="941979080" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="941979080" unbViolId="881a1d48-68e7-34e6-afa0-2ee9c7b65d8f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4602e8b9-9bf5-392f-90a8-bc31ac8ab874" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'MAX_OBJECTS'" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="941979080" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="941979080" unbViolId="aba633be-9d70-3a79-8260-b67de386f86f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce0c8af9-7d02-3fde-9fa3-1a8cbe32a5a3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Replace the 'MAX_OBJECTS' macro with a constant variable" ln="55" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="55" sev="3" auth="yshi" locRef="4" rule="CODSTA-37" lnHash="941979080" rule.header="Prefer const objects or enums to #defines for simple constants" tool="c++test" lineHash="941979080" unbViolId="816e0028-12df-3c4a-bd28-4cc97865a455" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2946e562-7505-3022-897d-50ccd0173485" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Replace the 'STEP' macro with a constant variable" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="3" auth="yshi" locRef="4" rule="CODSTA-37" lnHash="-326464112" rule.header="Prefer const objects or enums to #defines for simple constants" tool="c++test" lineHash="-326464112" unbViolId="ccda8c6d-b2be-3ba4-80da-e121e52f54ae" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98bbfc07-b77b-386c-9185-474ea86e2957" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Define constant 'STEP' using 'const' or 'enum' instead of '#define'" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="2" auth="yshi" locRef="4" rule="JSF-030" lnHash="-326464112" rule.header="The #define pre-processor directive shall not be used to define constant values" tool="c++test" lineHash="-326464112" unbViolId="70dd01eb-bef6-3d84-ae3f-7a03ad35432b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="230a72b1-8bce-3dc8-a076-a84d3b2b547e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Define constant 'STEP' using 'const' or 'enum' instead of '#define'" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="3" auth="yshi" locRef="4" rule="CODSTA-03" lnHash="-326464112" rule.header="Do not define constants via #define" tool="c++test" lineHash="-326464112" unbViolId="720f6b6b-d745-3a41-bec4-2b4bbad8a03a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62a75647-bb31-3ed8-9ac5-d37fec4d2c2f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="3" auth="yshi" locRef="4" rule="JSF-031" lnHash="-326464112" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-326464112" unbViolId="bec23dd6-5fbd-30e7-ba1b-de8dd21e1baa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02b32145-b405-306b-a0a7-218b1b8794bb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="b3988616-7f7a-30e5-b169-90d29f009a55" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da253796-b6b1-33fd-9e9b-b243bd5b49db" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="3" auth="yshi" locRef="4" rule="HICPP-16_1_1-a" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="5d346954-e47b-339a-ac2f-4220dc865bc5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e10540b3-2b0f-3008-8683-e5db1974cdbb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="3" auth="yshi" locRef="4" rule="PREPROC-01" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="014f7757-50b3-3f5a-a6fd-74d64f699b3b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bd944e9-3e04-38b9-8fc7-4fc33499ae6e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="4ec5ac8a-3068-3870-8294-8338aaa6951b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e9f69b7-77e4-3905-8afc-f0c72a1410e6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'STEP'" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="2" auth="yshi" locRef="4" rule="MISRA2008-16_2_2" lnHash="-326464112" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-326464112" unbViolId="6f318653-eb9d-3568-8183-3d1e42dafb87" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18e83514-5f14-3068-8946-279e67f250c4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'STEP'" ln="56" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="56" sev="3" auth="yshi" locRef="4" rule="PREPROC-12" lnHash="-326464112" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-326464112" unbViolId="0c588ffc-9dad-3e94-a5ef-d9e31d3d89bb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68e7b38b-883c-3e10-a4fd-5f9bbddb82c9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="COMMENT-14_b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="5c6f89e0-bf27-390f-95fb-65ae470fed3e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d966fae5-9a0a-3016-b33d-b81d7cde2a73" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="4797b144-e9eb-3cb0-a97f-ff905c0b5359" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10a478f8-e8f1-37c0-ad6a-efd22a278c2e" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="COMMENT-14_b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="783ab91b-707c-39b8-a012-073b845fcb20" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a5135cf-f888-37bc-b11e-ddc9c24fad92" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="7ca5e163-5316-31b5-969f-8c8e35a43d08" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cff2bc12-cae1-3344-90db-76cecdea5f41" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'assertion'" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="FORMAT-28" lnHash="1429237719" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="1429237719" unbViolId="48c063d4-7e4f-39b5-885a-7c469864119f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e648e02-051e-325a-83d4-1f23edb4ffc7" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has Cyclomatic Complexity value: 2" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="5" auth="yshi" locRef="4" rule="METRICS-29" lnHash="1429237719" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1429237719" unbViolId="a45c457c-04d6-3315-9176-31ee1ac05ae7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6396326-52d1-3a8b-8ce0-2212ffb9634b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has Essential Complexity value: 1" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="5" auth="yshi" locRef="4" rule="METRICS-33" lnHash="1429237719" rule.header="Report Essential Complexity" tool="c++test" lineHash="1429237719" unbViolId="57edb246-604c-34aa-bbf6-a0278beb52d3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1b28a43-2e89-3138-a815-4bd7ce9f3861" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Naming convention not followed: assertion" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="NAMING-17" lnHash="1429237719" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="1429237719" unbViolId="8dff8ac6-7eb8-305d-9b00-a37ca9ab87da" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6242fc31-1347-36c5-b72c-9b178eddca05" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The definition of the 'assertion' function is not preceded by a comment" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="COMMENT-04" lnHash="1429237719" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1429237719" unbViolId="c6d5b566-e3e9-39b6-b978-698abcfdd31b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66de825b-bf55-3786-aca3-9f15e00cb6c6" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The definition of the 'assertion' function is not preceded by a comment" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="JSF-134" lnHash="1429237719" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1429237719" unbViolId="c8d34e8b-a208-3e09-8f7c-ab65ac3dcbb1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05415f35-80e1-3ccc-b39d-a928b2445b95" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="c796247d-3c7f-38d8-99df-1049ea32b016" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8886cf3-504d-3c8c-9eb4-b3f0d8d5ed68" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="caa58abd-ba57-3b7d-ad24-b60eea02182a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4e724e2-e4b3-35e5-b052-3d75d63d5cc0" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="1429237719" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="1429237719" unbViolId="8c6ed4db-4716-3882-87b0-9e41193f50d8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77768a22-d76b-30b5-8ff2-be40388c3f78" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="b8cf5dfb-d465-3dcd-ae78-bf3c5c05e120" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76f38310-6b7e-3b85-b8f7-cd201ea3cdef" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="dca25fb7-9518-30a9-82f6-7429b79ab569" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="420ad212-bdad-345b-86aa-2c8452f8cab0" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="1f49c64b-6af6-316a-aac7-e4ef1930b683" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0c8cafb-2309-3f6a-b3b4-830736c84432" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="8708c8d2-1beb-3fb1-9a0c-097e1654a595" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1971c24-d294-3fa1-a801-ccb68c788388" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="1429237719" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="1429237719" unbViolId="8d719fe3-9b7e-358c-a420-5124a273983c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3731c451-ca65-382c-abe9-4a9a892e375d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="1429237719" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="1429237719" unbViolId="86c78c99-b8d9-3b95-afdb-dde443d5a709" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00205785-6f33-358b-a8c3-1f8464c7a4d2" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="1429237719" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="1429237719" unbViolId="d44814d3-ff12-39e6-9647-237f220f301b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e78a0b8b-7cb2-399f-adb0-631a2761ce13" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="1429237719" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="1429237719" unbViolId="e0b6b199-d41e-3534-954f-ff93e14145fe" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6cd90aea-daa8-371b-ba68-701887e34d11" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'assertion' function should be preceded by a comment that contains the '@brief' tag" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="COMMENT-14" lnHash="1429237719" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1429237719" unbViolId="98b26add-e3b6-3ac5-9ae0-14b9e3f76e8a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d5fe2fd-6f86-3be3-9f23-abbe17ca3551" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'assertion' function should be preceded by a comment that contains the '@brief' tag" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="1429237719" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1429237719" unbViolId="034ae594-1c7c-3984-9e52-bf1f54feb438" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cf5c786-d5ce-3847-877a-c9dbcd904d74" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="1429237719" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="10b546fc-1157-346e-b95f-d6561947e5c3" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="129ee620-8f5d-35b9-b065-7f6aa690a24f" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="1429237719" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1429237719" unbViolId="7263eede-d8e1-38d1-9ad0-df8249800383" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9864f249-19b6-3806-9f17-b1903ef5bc96" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="d74e1238-7ac5-385d-8f5e-1883fb5636df" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c832d48e-84c9-3ea9-849f-8d4de9a557d5" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="4b990a19-5d6d-371d-a969-5879e951b57e" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3da9dbca-5a0d-318b-87a6-fe7556c5c232" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_6-b" lnHash="1429237719" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1429237719" unbViolId="88c361ce-66d5-392a-8d32-fa7a631960c5" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f326041c-081c-3cde-9f4a-741ca5aa2e3e" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="e2bc252a-7529-3639-ba23-18be38731d7f" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13e1359b-355f-3b2e-9632-b2a69ec8797f" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="MISRA2004-6_3_b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="c5560335-e32c-357d-8fb8-bb2b76a55d63" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5988be3d-b782-3e52-8d42-0a4f470483fc" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="JSF-209_b" lnHash="1429237719" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="2e0cb1ef-0b83-3748-b6d0-93d367e9eb9d" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c760565-ea14-3778-a6df-2328874be074" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="b030c485-7ee1-3b8b-bd73-a1c1d66edd76" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="479f0703-0233-3c7f-b93f-98d5b3fda2ef" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="HICPP-3_5_1-b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="9b92fc2b-ed76-3f35-a9b2-72b2cc65748e" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1362c6d2-8b05-3a38-ba61-1df8e941f1fe" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="'condition' shall be declared as unsigned int or signed int" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="PORT-13" lnHash="1429237719" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1429237719" unbViolId="ef6e4204-578f-3914-9803-4cbe711a40ef" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99c35ee2-022c-3b28-ab97-72427f4fb30f" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL00-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="90f7c434-7876-39e4-bff7-edf2572b2c99" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f8223bc-55eb-3f33-bdd3-5746090657c9" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="1bc65c21-8727-30ac-b115-1220dc8176e7" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b32be2f-3c71-35a3-a449-b57905679897" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_1_1" lnHash="1429237719" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1429237719" unbViolId="675857b7-20db-3eb8-b291-f26be6a60427" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34845c60-59e2-3a91-925a-144b25aef5b2" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-53" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="de2e217b-7d0f-3a13-90bf-584b80e53426" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61717d14-5498-32bd-b933-f64a4524779d" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_2-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="df1774d2-8bfd-33f4-8526-e42ee4243ec8" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b83ed441-d843-381d-af6a-c367cf1d6d63" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-22" lnHash="1429237719" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1429237719" unbViolId="dfabfdf9-7b77-34e3-bf91-76f92a723971" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d78462c-2104-3e19-bb2c-06cad68c8ae7" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-30" lnHash="1429237719" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1429237719" unbViolId="282b672a-96d1-3377-9146-1414e7407aed" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b5b0e87-0344-3bab-a9a3-7661c1e4f7ef" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-43" lnHash="1429237719" rule.header="Hungarian notation for word types" tool="c++test" lineHash="1429237719" unbViolId="1d16c3a2-7910-3dce-9ac4-da32317e1c80" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1d12bd1-0658-3765-a787-52f1648317bc" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="FORMAT-47_a" lnHash="1429237719" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1429237719" unbViolId="bbe1f9b9-fd2a-3fba-83a1-b98efffc6afb" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3acf11c-89a8-38c6-badb-9368e34676a3" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_4-a" lnHash="1429237719" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1429237719" unbViolId="58cbfe73-2960-3479-8fae-e61e5265ec48" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8595e69e-855f-3679-b67d-ef00bc4508b5" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="3dc0b8a7-02d5-346c-b597-d562bbab5fd4" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09124768-c31c-3436-822b-4091ed2288c6" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="fb679344-b0a3-348d-82ea-07694747a646" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4908883a-4786-3bb9-993d-bf11073a49e0" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="1429237719" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="8bded0d9-3575-3103-94d5-25527763f569" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10ff8dce-a5d8-3a58-8456-63fa2742db74" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="1429237719" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1429237719" unbViolId="d3f2a8ec-5963-315f-907b-2f64b2ae7565" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e727ea5-e61e-3b45-879a-fed2c1997b43" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL00-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="20d7bc96-8060-33d7-933b-aa89f36e4975" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="039aa944-bd34-3f3f-970a-e5c9b388f2dc" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="985729d0-94dc-3d68-9964-0969ea7e8124" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8c08a1f-bdfd-39b6-98da-fef14e026437" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_1_1" lnHash="1429237719" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1429237719" unbViolId="6e4eeee4-faaa-373d-8258-a1363c8f6324" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="752c91c3-e0ea-3808-8ab9-4ac0fe7c478c" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-53" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="5e3d9be9-6260-3f4e-bdc7-8b893e73b72b" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="909c63c7-a55e-335f-8e46-8787737c43e6" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_2-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="e59606cf-8a28-34d2-9f3b-41e07bd5d5e4" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5cc0120-65b6-36d6-af08-0e5de323342b" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Parameter 'message' is not validated before use" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CERT_C-API00-a" lnHash="1429237719" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1429237719" unbViolId="8c1fc9b9-535a-32e3-b359-810eb9c9d7d7" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f463f943-a4c4-3598-b88c-be2f8db3ddc6" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Parameter 'message' is not validated before use" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CODSTA-86" lnHash="1429237719" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1429237719" unbViolId="2bd1aa2e-d23f-3b24-84a4-98088133b75d" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98485489-b2ae-34fa-a9e0-234b341b1941" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-05" lnHash="1429237719" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="1429237719" unbViolId="26cb7e59-f643-3869-8848-06cb408e5510" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="687525f6-f0da-388b-90e9-549d2a4ce9e7" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-09" lnHash="1429237719" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="1429237719" unbViolId="e6e8f089-5cf3-31d3-b8e4-ed062cf1b516" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa3159dc-9cf7-326b-8604-315850b7f914" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-10" lnHash="1429237719" rule.header="Hungarian notation for char pointer or reference types" tool="c++test" lineHash="1429237719" unbViolId="cc21026b-4b11-39e3-af4d-eaab2fe52d16" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87b97289-b9a8-3e33-b259-b579918cbe94" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'p' prefix" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-34" lnHash="1429237719" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1429237719" unbViolId="b4f589f0-aa8c-313a-ba45-885399716410" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eb47943-43fe-34ce-aed3-30c0e177895a" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: message" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="1429237719" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1429237719" unbViolId="982c8c8b-49b0-3453-86c7-df5fe4c16c40" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a473d9fd-0fa4-38fa-9f3a-4eea740ef579" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: message" ln="58" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="58" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="1429237719" rule.header="Do not declare pointer type" tool="c++test" lineHash="1429237719" unbViolId="90853ca9-59dc-3c8d-964b-015ed596fdba" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58fc2416-a8be-3bbf-b29c-7e8c765717f8" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="59" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="59" sev="3" auth="yshi" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="e6a2fbf6-adde-3708-b032-4d483c29ec33" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0521dda-61a1-33ae-8480-a1bba495d8df" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="59" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="3" auth="yshi" locRef="4" rule="JSF-061" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="57a5a360-b844-300a-a53b-18979b360ac6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40009758-4b33-3e8d-8d88-b0397712ce1f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="3" auth="yshi" locRef="4" rule="FORMAT-42" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="94ca5a13-fec9-3f2d-a46f-4ced8ca5a7ea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2913ed2-110a-3664-a9f6-93249972d325" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="3" auth="yshi" locRef="4" rule="JSF-060_a" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="a1521b29-9a6e-39b5-a58c-17020d9ace4a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c69b4c8a-e7bc-3ad3-bb4c-983bf09e2121" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="3" auth="yshi" locRef="4" rule="FORMAT-43" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-600547524" unbViolId="64fcad51-bf14-30c6-8124-335b3bfaa7c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77451199-99e1-3982-9e8e-996b1fbb8248" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="3" auth="yshi" locRef="4" rule="JSF-060_b" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-600547524" unbViolId="f0126efa-977f-305f-9d75-b136a976f754" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="124d4173-be4b-313c-82a8-c68db7a52157" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-600547524" rule.header="Tabs should be avoided" tool="c++test" lineHash="-600547524" unbViolId="211902a8-46c7-36c5-a14b-4fe1d5c0689d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39173b04-bf84-3890-ad4c-252471febd73" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-600547524" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-600547524" unbViolId="bd841907-5e1e-3f7f-b241-a26ee78c76ba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01e3809c-940e-377d-b5f4-e7c8dd3ad16c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-600547524" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-600547524" unbViolId="6a8de0cc-39de-37c3-8d97-13b461c40561" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70fa73f8-afe4-3044-9c9b-c590a27c16ff" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="3" auth="yshi" locRef="4" rule="FORMAT-02" lnHash="-600547524" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-600547524" unbViolId="2de6ec01-b9f4-3bbc-ace5-1079065f6323" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a78f276-c855-34d4-b5df-5925935cd253" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="3" auth="yshi" locRef="4" rule="CODSTA-23" lnHash="-600547524" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="-600547524" unbViolId="93bff4ad-3aaf-34bb-b558-bf439252c0bd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3706d9cd-0933-34a8-8957-45a32739e0e6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-67" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="f4186c98-771c-3762-9522-d01622f9dc2a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5dbdea5-b86b-325e-942a-ab731ac40b6e" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M5_3_1-a" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="82b90801-b723-341c-a347-35ecd075395b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d78dc8b4-97b4-3b77-8dc2-97a765ad3846" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_3_1" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="5d88b814-cab5-35f2-8576-1195adf0a7ae" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87629855-d740-35d0-a81f-30634ce2bab5" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="In 'assertion' function use positive logic rather than negative logic whenever possible" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="5" auth="yshi" locRef="4" rule="CODSTA-46" lnHash="-600547524" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-600547524" unbViolId="95384311-cc56-306f-8857-c92451e20e08" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87b03de0-c0aa-3268-8b3b-cf4112f826ef" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="60" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="60" sev="3" auth="yshi" locRef="4" rule="MISRA2004-12_6_a" lnHash="-600547524" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-600547524" unbViolId="b1c53616-7e13-35e8-b854-2e29d2d0c9f3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e126ee1-7d24-36d0-803a-a8e188985785" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1274881582" rule.header="Tabs should be avoided" tool="c++test" lineHash="1274881582" unbViolId="8567ab1e-9511-3615-b81e-4c98a150f5cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42fc1c85-24ea-3844-9052-6191b1a20fd2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="ee5ed97c-60bc-3f87-8825-a10978ba3ca6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c11ebc5-f7ad-3da5-b9b5-1cccf156878e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="605b3bf6-b4d7-37b4-a5dc-a28eadcb2024" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7037021c-5f63-341b-a951-05a67b891db4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1274881582" rule.header="Tabs should be avoided" tool="c++test" lineHash="1274881582" unbViolId="5e0b23a4-6ce8-3fa3-a5cb-c6da92b3f8f1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9e2e2e6-face-377a-ac51-9a3dda69959f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="ff12f905-0945-37fb-a9e3-a3780e758bb3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc503675-d786-32de-95db-d42065d838d4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="3a691b1a-c576-3497-b8db-6577fbed9563" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64975ecb-38d7-3daa-ab90-dbb0ccd90feb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Throw only instances of std::exception" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="3" auth="yshi" locRef="4" rule="HICPP-15_1_1-a" lnHash="1274881582" rule.header="Only use instances of std::exception for exceptions" tool="c++test" lineHash="1274881582" unbViolId="60e061fe-36be-3178-85fa-e56020dcc399" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7eb7f6d1-adf0-39fd-af9a-886ae7bfae99" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Throw only instances of std::exception" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="4" auth="yshi" locRef="4" rule="AUTOSAR-A15_1_1-a" lnHash="1274881582" rule.header="Only use instances of std::exception for exceptions" tool="c++test" lineHash="1274881582" unbViolId="037b2c38-9ba8-3ccf-895f-ded058389d2b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15fd4f0d-372a-3665-9c02-200436329d96" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'assertion'" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="2" auth="yshi" locRef="4" rule="JSF-208" lnHash="1274881582" rule.header="C++ exceptions shall not be used" tool="c++test" lineHash="1274881582" unbViolId="f78a6ab4-344d-3553-b684-cd6f259ebf33" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3095211d-6a9a-37ba-941f-164ff9a463ee" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'assertion'" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="2" auth="yshi" locRef="4" rule="EXCEPT-05" lnHash="1274881582" rule.header="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" tool="c++test" lineHash="1274881582" unbViolId="475affca-1ba6-3010-a733-75f8c95d061d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06638319-cf45-3680-8968-7bb43bc9a8c4" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="4" auth="yshi" locRef="4" rule="MISRA2008-15_0_2" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="02953074-19fb-3d01-bbe5-b327f0246407" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60622768-1e2f-3d79-bdce-e98a33b054a6" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A15_1_2-a" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="b82f03de-ff85-3a67-829d-f82a0e57a564" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a590f21-a983-3f00-90b0-3f80af25da68" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="61" sev="3" auth="yshi" locRef="4" rule="EXCEPT-09" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="7d321171-d5ff-3530-ba0a-d0399d5fbb92" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12a6cb5f-5415-3fe2-bea8-d946c89b0911" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="62" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="91bdd824-9cef-325a-89b2-9b15bb159944" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7a726f4-9c8d-3bf2-bdfa-582bc0ffb02d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="62" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="62" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="f4f051b1-15f9-33cc-905d-44be5530faa0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03d0bbcc-b955-327d-8a1e-c82346738446" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="62" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="62" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="3e7f8bfe-b853-301d-be93-7a3912d4f321" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c68452c-b4c3-3484-ad37-8807b8a5d52a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="62" goals="0," />
    <StdViol msg="Pointer variable 'changePositionMutex' uninitialized when declared" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="136478104" rule.header="Initialize all pointer variables" tool="c++test" lineHash="136478104" unbViolId="916be5cf-fa1c-3b30-9fd1-4e8a5813c5af" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="825141c8-394d-33a7-b6b7-9ce634a8cf8d" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="'changePositionMutex' should be encapsulated in a class" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-18" lnHash="136478104" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="136478104" unbViolId="3d280221-de74-38f5-826f-955bd3ac115f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5f22604-148d-3988-9605-bd620ab76e72" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'static' keyword is used in 'changePositionMutex' variable declaration" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="HICPP-7_4_1-a" lnHash="136478104" rule.header="Do not use static keyword except inside functions and classes" tool="c++test" lineHash="136478104" unbViolId="fd89389a-e1a7-377a-9379-653b2e2b2ea2" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc0214bd-17b2-3c59-a4ce-06ff88c56103" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'static' keyword is used in 'changePositionMutex' variable declaration" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-50" lnHash="136478104" rule.header="Do not use static keyword except inside functions and classes" tool="c++test" lineHash="136478104" unbViolId="248a28cb-38b6-310e-b5c0-af6beffa32b1" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e42d82bf-749c-3f6d-8bae-88317ee37d73" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Consider encapsulating 'changePositionMutex'" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="JSF-207" lnHash="136478104" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="136478104" unbViolId="f097ba4b-440b-32cf-9af6-f79b4589f1e9" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44a559ce-10d0-35cb-88fe-ba2d07b3077a" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Consider encapsulating 'changePositionMutex'" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-82" lnHash="136478104" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="136478104" unbViolId="b77935b7-53af-391d-9f03-8e95e947a93e" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a7a823b-dcab-35b3-ac85-40513f7bf2b5" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'changePositionMutex' variable should be commented" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="136478104" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="136478104" unbViolId="4be8dcfd-471a-336f-b15a-d9bc2684a079" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5eefd0c3-a974-3a16-9c74-adcb1962f385" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'changePositionMutex' variable should be commented" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="136478104" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="136478104" unbViolId="fccdd08f-d171-3b82-afc4-f282bd4760a9" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54d22202-9aea-3d8e-bc32-59ab09df402d" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Use of variable &quot;changePositionMutex&quot; with static storage duration is not allowed" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="HICPP-3_3_1-a" lnHash="136478104" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="136478104" unbViolId="f007e5e9-3156-34be-94b3-e807b703f702" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77322b53-79ea-360d-93af-4b144d941e95" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="5" auth="yshi" locRef="4" rule="MISRA-022" lnHash="136478104" rule.header="Declare objects at function scope" tool="c++test" lineHash="136478104" unbViolId="3eb19a54-d043-3d03-863b-1075252808dd" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="460b83e5-7492-353a-b96c-d7f3fc02b763" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Naming convention not followed: changePositionMutex" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="NAMING-18" lnHash="136478104" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="136478104" unbViolId="976e6756-e759-36dd-b158-97966b0e8244" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="805e97d3-469f-3daf-bf64-87ad9bbd2173" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'changePositionMutex' identifier should have the 's' prefix" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-38" lnHash="136478104" rule.header="Hungarian notation for static variables" tool="c++test" lineHash="136478104" unbViolId="c8bbc683-daed-3449-83da-e4605fd62120" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23f207d5-ae10-369b-8f50-a0e6a43834ac" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The name 'changePositionMutex' should be composed only of lowercase letters" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="136478104" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="136478104" unbViolId="16db6dde-ec28-3cf4-906a-6a946c14bb74" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52d496d1-bc4b-38da-985f-0d0706b94747" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The name 'changePositionMutex' should be composed only of lowercase letters" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="136478104" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="136478104" unbViolId="b5836f68-f02d-345b-ba40-2bce32348319" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ad9850e-379e-3a61-beda-d8152b0bb2ab" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="136478104" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="136478104" unbViolId="e5e3d037-8288-302f-83aa-11cd02bd5b84" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="535de353-48af-322d-b087-d58c625a8513" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="136478104" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="136478104" unbViolId="d26f3e9a-2f43-3780-ba80-ee7e69b195a9" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c89bd13a-cae6-31b5-9e84-0d7b3580f507" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="136478104" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="136478104" unbViolId="51de932a-072b-3a92-910e-6a9bd0f7b998" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b7122d7-f943-380b-ae71-0d7b8b8e3ca0" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="136478104" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="136478104" unbViolId="946ff3e5-c282-3888-8362-928a9add2614" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a39b47ce-53a5-3410-be51-686c7136f83d" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: changePositionMutex" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="136478104" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="136478104" unbViolId="bb5dfbf6-4c8e-3051-aebf-1a20824ee58d" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc08c46a-4b11-3e4b-af0f-7a6e2d45403c" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The variable of pointer type is declared: changePositionMutex" ln="65" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="65" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="136478104" rule.header="Do not declare pointer type" tool="c++test" lineHash="136478104" unbViolId="99dc26aa-919e-31e9-9458-775a0b297b1e" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bea73ae7-d2fd-3fe6-9af2-a5d2d6e2d239" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The declaration of variable 'ring' contains a non-constant initializer" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_2-a" lnHash="893639642" rule.header="Static and thread-local objects shall be constant-initialized" tool="c++test" lineHash="893639642" unbViolId="c6aa58c8-cab8-3092-877b-4c4464bbb50a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a9f56e8-7c34-3f06-9245-7db6c2fdd9ba" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The declaration of variable 'ring' contains a non-constant initializer" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="CODSTA-MCPP-32" lnHash="893639642" rule.header="Static and thread-local objects shall be constant-initialized" tool="c++test" lineHash="893639642" unbViolId="073fff3c-2100-3b2e-93b2-e5abf07ae9bb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7518225a-4254-392e-9e48-15de74e8aaee" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The definition of the 'ring' variable should contain a braced initializer" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="893639642" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="893639642" unbViolId="a11322de-a047-3155-bfd2-a77d616e0b7d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52ba511f-4530-3ff4-b554-98db13edbbe2" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The definition of the 'ring' variable should contain a braced initializer" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="CODSTA-MCPP-38" lnHash="893639642" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="893639642" unbViolId="49c5a55f-81e2-3def-aa80-51b7da821b2c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="712d4bd1-c01f-3d64-984a-c72e526191bd" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="bcb14e11-3f69-36ac-91ca-7c694f1275bb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfe57817-77ce-3f30-83d5-efcc64c689b1" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="92ff3883-9e16-3db3-8a19-4b701189113c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee740fa2-a0f1-3615-837f-f7707a3d41ef" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="893639642" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="893639642" unbViolId="dba7d118-8fab-3ccc-9145-39f6d39b0e7d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8475c640-b245-3937-87a4-9e3ba0719060" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="4e37c30f-c571-3fc1-a556-10400f4676a2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a0867d6-09ad-33f5-82bf-19e1b9f45cc8" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="284197e1-fc51-3b7c-b954-3a126a569946" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4ffdb58-4a18-3768-8076-3eebe3d92e99" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="aa9dc34b-c9bf-3e66-a72f-d00d8481b3f1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb8ab121-c75f-3954-840c-cefd53f2488f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="ce484583-e830-324c-bdce-38b9b7893242" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db485435-6330-3e22-82e7-bdc00be18627" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="893639642" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="893639642" unbViolId="0f3d6bc2-6b1e-3ddf-a6d9-fbf54e2abf9f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d67f6b21-f71f-3930-bda0-bd1ea9c32211" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="893639642" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="893639642" unbViolId="82d23bfe-e217-35a4-beba-255cc39847ef" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be32dd66-c3de-3193-8ced-2f1f008cdd01" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="893639642" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="893639642" unbViolId="283e6fe8-6ee1-38c5-8baf-96ef056ae7e3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2596b126-e23c-350d-91ec-4fea6d95ac44" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="893639642" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="893639642" unbViolId="78c23339-7a81-3476-b2af-70468cd78e13" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e65e143d-0b72-3a0b-8c54-94bea31e991d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="'ring' should be encapsulated in a class" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-18" lnHash="893639642" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="893639642" unbViolId="e3cd1d52-f494-3258-98bd-b251a145b3e3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c079a453-363e-31b6-8a63-7ec3cf188a5f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Consider encapsulating 'ring'" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="JSF-207" lnHash="893639642" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="893639642" unbViolId="1af700fa-0066-3b86-8e61-4f29b18179a6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="342fa0c0-acf8-3ac7-900c-04ea2bf228ac" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Consider encapsulating 'ring'" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-82" lnHash="893639642" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="893639642" unbViolId="389a9c42-a904-3f7f-bc56-4ba783e94dc6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9050a9f7-38a7-3ed5-9312-58ffa9ea847e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'ring' variable should be commented" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="893639642" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="893639642" unbViolId="dda52f4d-e314-3ac8-ac45-d3503aff2419" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b74c34bf-1e0d-3766-90c8-caadcccf871b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'ring' variable should be commented" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="893639642" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="893639642" unbViolId="96b53aad-e16f-39d3-9a73-dec8580e4374" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b0c7862-70b7-3dc5-b8ce-3290fded3f33" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M15_3_1-a" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="0475be35-da5e-3f60-a63d-ac26cf0c3852" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc18cd5a-136b-3b81-afc9-9b01944cc8f8" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="CERT_CPP-ERR58-a" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="0deb7524-b6d9-33ff-ac69-c21e512f68d6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e219948-578e-3772-ac5e-156dc4f50fe0" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="MISRA2008-15_3_1" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="cf80bc2b-fa7c-3ed0-a001-b3ace1736862" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f9cdcaf-4797-3133-b189-7a1559e0a469" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A15_5_3-f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="54ee621a-8c9b-38e3-a4b0-ef43a237eeab" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8dacb1e-a201-38c2-bb4a-3f325ddffbbc" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="CERT_CPP-ERR50-f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="29dfc0d1-47d2-388d-9d03-033a3fcc62c7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c83dc0b-f74b-3fd8-870d-422cbc05c21d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="EXCEPT-08" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="3531426f-5562-39e2-9edf-06ecd14f0dc1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa82719a-aece-35d5-92a6-68cb4a31705a" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="MISRA2008-15_5_3_f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="4aaa4ee0-cf1a-3d0e-9d3d-51613bd23e52" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fa604cf-2ec3-3c32-83f2-6dfe5b0aff05" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Use of variable &quot;ring&quot; with static storage duration is not allowed" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="HICPP-3_3_1-a" lnHash="893639642" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="893639642" unbViolId="79c5fcb1-eab8-3cf8-985c-2b49576f438d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e78682fb-9a1b-3e7f-b1f1-b71aad6e3aa5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Variable 'ring' should be declared using 'auto' specifier" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_8-a" lnHash="893639642" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="893639642" unbViolId="8f1eb890-c195-3530-b391-3f3f411a5919" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c7b62d8-d90a-34f9-bf76-3bcd2117e523" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="5" auth="yshi" locRef="4" rule="MISRA-022" lnHash="893639642" rule.header="Declare objects at function scope" tool="c++test" lineHash="893639642" unbViolId="ecd222f3-0362-329a-8c78-6e1fe8c8793c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d8cfdb3-6c06-3a36-84b5-7291e7ae13e9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Naming convention not followed: ring" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="NAMING-18" lnHash="893639642" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="893639642" unbViolId="5ef2009e-846f-3afc-ae16-5171ec5fbe79" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f188bc4-631d-3f02-b7d4-dcf921985a5e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'double'" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="PB-11" lnHash="893639642" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="893639642" unbViolId="09e7563b-1300-3d35-aa8b-b9a9e755c1ce" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d99e798c-33cb-3466-8567-cacc74d69160" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Argument type conversion from &quot;shorter&quot; type to &quot;longer&quot; type" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="PORT-16" lnHash="893639642" rule.header="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" tool="c++test" lineHash="893639642" unbViolId="02fdff50-12d2-3129-9972-bde0cf84e00d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fb86184-0709-3df8-b8d4-a11d888c7890" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_0_5_b" lnHash="893639642" rule.header="There shall be no implicit floating-integral conversions" tool="c++test" lineHash="893639642" unbViolId="e518ed11-c16d-3836-b804-435621a44dab" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7e3c70a-1266-3419-a462-48814921a029" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP39-a" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="625d6cfc-8f95-3e06-a0b2-5caa8d02ac67" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9019de4e-2b2f-3803-9f64-f8f9be10bd62" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M5_0_5-a" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="c964eab7-2989-3bdd-8937-84642628544e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="739d58f3-263b-33bb-b2af-362100071e24" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="67" sev="3" auth="yshi" locRef="4" rule="MISRA2004-10_1_b" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="d17903c0-5110-3a99-92c2-6df700336279" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20e33e71-260b-3a73-af4f-408f8730a8a8" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The operator '*', used for 'participants' declaration, should be directly connected with the type" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="JSF-062" lnHash="-1054095129" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="-1054095129" unbViolId="b04b50b1-773d-314a-ba29-02ceaa2dcedc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a45cb226-68f0-358b-97c7-d4fffcb7c440" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The operator '*', used for 'participants' declaration, should be directly connected with the type" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="4" auth="yshi" locRef="4" rule="FORMAT-32" lnHash="-1054095129" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="-1054095129" unbViolId="61998927-aa30-3aba-867e-4493466ee7e2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="987e2de7-cdc6-3d1d-b23d-279782873b81" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="'participants' should be encapsulated in a class" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-18" lnHash="-1054095129" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-1054095129" unbViolId="649a1e45-15b1-38a3-b4e3-a2dc030ba247" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ade28f1f-3bee-37b2-977c-5d7567d9d8ba" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Consider encapsulating 'participants'" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="JSF-207" lnHash="-1054095129" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1054095129" unbViolId="9ebb9903-5765-3379-9072-fbf475a68984" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b091835d-9c51-3045-921d-d7659760cd7a" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Consider encapsulating 'participants'" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-82" lnHash="-1054095129" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-1054095129" unbViolId="4056c8e6-29fe-31c5-91ad-f825b54dc890" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da88685c-f05a-3289-9b49-eb8bd22cbbbc" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' variable should be commented" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1054095129" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1054095129" unbViolId="ed1d6564-69a1-3ebf-ba61-a25a4727e8d3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e088779-9618-3683-be37-ab5a95023861" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' variable should be commented" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1054095129" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1054095129" unbViolId="badebad6-a698-373f-8a91-5d76b667f1ba" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40d736d8-9312-3def-a094-1c20fbd943f5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Use of variable &quot;participants&quot; with static storage duration is not allowed" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1054095129" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1054095129" unbViolId="9338c332-8a9b-38c0-8789-7459f93fea99" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55399fbb-588f-304b-a8e5-91cb0a6d17ef" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="5" auth="yshi" locRef="4" rule="MISRA-022" lnHash="-1054095129" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1054095129" unbViolId="4605caec-3e06-325f-b770-f5b77b897365" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b812e4bf-1128-3d8b-b178-03d9dbc70ea3" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Naming convention not followed: participants" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="NAMING-18" lnHash="-1054095129" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1054095129" unbViolId="e0e00787-0673-3418-83e4-e4f184cdce7d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf716e0c-efd5-3842-8942-a2840c1b4fbe" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' identifier should have the 'rg' prefix" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-01" lnHash="-1054095129" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-1054095129" unbViolId="aca445de-1d65-367c-a892-0dc88a3673ca" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a14336cb-e091-32a7-af32-4b3167230736" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="79bf3464-a9a5-3404-a831-2af4629e6780" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d8b7aa3-341b-304b-afde-61f83f6e1327" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="f23bf3d7-2de2-3242-88ce-941791178565" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22c11331-6df9-33d3-beac-098b7e66be5d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="-1054095129" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1054095129" unbViolId="6a385bb6-686b-3ec6-aa54-6799167251c6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f998bb6-509e-3ffd-bda0-ff456f3d1f23" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="a7e3684c-f6d7-32c0-be72-b6aec8b9e48f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="517ab3ed-7d27-348d-b9a4-f7e929dbffb5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="f83af5ee-781e-3abc-87e7-1129cedc3af0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53747c80-42bb-3e0b-87f8-281a7482de5a" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="bb6ac36f-f81a-3e9b-8306-901c9a1848db" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62c14891-1e46-3899-bf75-3995a4a244a9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="8ddb96ce-cf3e-30ce-96d5-6cd912467fcd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3e4d598-1637-369b-9c8a-cfac93d1cbc3" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' array should not be used" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="STL-37" lnHash="-1054095129" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="-1054095129" unbViolId="7254a98b-3e9e-384b-a39c-12c6bc6fe8d6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9e9635c-1054-3944-8b3c-32297eddf39b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' array should not be used" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A18_1_1-a" lnHash="-1054095129" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="-1054095129" unbViolId="bdf0e77c-ad06-331a-81d8-7380e9b85e4e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab7bb41a-639c-3893-b0a8-6897fe94d8c0" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="-1054095129" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1054095129" unbViolId="a9d77889-0b7e-3f0d-9451-c40928608a14" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45d15f1e-3765-3881-99d2-ab9a126cdf03" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="-1054095129" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1054095129" unbViolId="c8e5ac2e-eb00-3304-8ed9-2efa53c88842" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cdd2c02-2d56-3053-9281-689f46cfa8c9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-1054095129" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1054095129" unbViolId="e72da13c-3a78-3c4b-9d88-db1c0c44ab83" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eeb9f0cb-89d0-306e-8dc8-e574e9dad1c9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="-1054095129" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1054095129" unbViolId="5a83732a-26db-3a79-ab67-3abb37909e9d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97c9779f-75e1-3481-a3ad-7ce724cbe975" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Declaration of variable 'participants' contains more than one level of pointer indirection" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="HICPP-8_1_1-a" lnHash="-1054095129" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1054095129" unbViolId="e1ff14c3-df41-3255-9b77-bdcaf10f6d74" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23ed5dfb-7a78-3ba7-b211-d5d0cd143b9e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Declaration of variable 'participants' contains more than one level of pointer indirection" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="CODSTA-89" lnHash="-1054095129" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1054095129" unbViolId="edbd6733-8114-3924-a2ca-938eb9546492" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f761573-e5e0-3063-b8a8-e186152f43e5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: participants" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1054095129" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1054095129" unbViolId="922bde39-1b89-3bf6-b708-13fd501b613a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79da266d-5416-3ca7-a4af-84b7b18a7511" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The variable of pointer type is declared: participants" ln="68" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="68" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1054095129" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1054095129" unbViolId="7ae8cfe6-7837-305e-8277-2a0673028412" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a39e498-80c4-3be9-b642-017b09896d64" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1146363747" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="73a85fb6-5e4a-3ee4-ae83-bbb53a7aec0a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3463237-191d-3161-b00c-b706a0252bce" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="-1146363747" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1146363747" unbViolId="e3104c5a-7cc9-3b9d-97eb-d63bea17add9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cab3a0b-d46f-3ac9-a761-5ad7c2ccf9d2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="-1146363747" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="f4ba9c9f-1cb9-330b-a9b1-569ccd30211a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f31bc7e1-f7ad-360a-891d-bc22a4c5151a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1146363747" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="cb45a66b-333c-3484-94b7-f1179b314323" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2dc3fb29-2f29-391e-936e-ecedc9c78da8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_6-b" lnHash="-1146363747" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1146363747" unbViolId="ed9635cd-131f-3c2e-963f-015e347dd300" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21f3b0fd-b4a1-38dd-a59d-4ba2b3a1280f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="220e42a1-c120-3201-b4de-a4bcc152c49a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06ca9e69-5d6d-36c3-b0e2-a47cf9c7be0f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="MISRA2004-6_3_b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="e4199786-88d6-3a71-b308-cf4fa8c5fb6a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc1525c9-7fc4-336e-bd3e-3ca526ccdf71" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="2" auth="yshi" locRef="4" rule="JSF-209_b" lnHash="-1146363747" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="b79035b4-9634-315b-948e-7e85104e67f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6293141d-1104-3dc1-97f9-f7e69ad4a9d4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="2885259e-d965-373b-9374-b3c9d0c8488a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a019e5d-33f1-3597-9bdf-cd8225d648f0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="HICPP-3_5_1-b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="0de9fbf4-20a3-35d3-8499-0ac5658bac51" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbc1a2bc-eae9-33e9-b4e3-d229fdf10226" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="'participantsCount' shall be declared as unsigned int or signed int" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="PORT-13" lnHash="-1146363747" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-1146363747" unbViolId="11e7a4a5-7936-344f-b95c-158189925759" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1f0990c-d506-3a9c-b29b-5dc752001ff2" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="'participantsCount' should be encapsulated in a class" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-18" lnHash="-1146363747" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-1146363747" unbViolId="2862cb8e-0575-38b0-ac50-1c869bf1bb7c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e23e3514-5931-36d7-88f5-9c0b1e9c7b28" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Consider encapsulating 'participantsCount'" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="JSF-207" lnHash="-1146363747" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1146363747" unbViolId="6caa8c03-f8ea-3dd4-a986-ee37ed0c3e0c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbbb656f-77d3-3309-ab32-0048247af446" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Consider encapsulating 'participantsCount'" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-82" lnHash="-1146363747" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-1146363747" unbViolId="712da9b2-eed0-3e8c-b6a2-6a14c9062478" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8d78667-bafe-3940-9849-61f7cfd0f829" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' variable should be commented" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1146363747" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1146363747" unbViolId="9a5071ce-d6b1-361d-9ed4-02cc27f4b8dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e44335f3-16ad-3d7d-ba45-deaa139e91f6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' variable should be commented" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1146363747" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1146363747" unbViolId="de92d5a7-8e7d-3712-ac31-adccf64d6c29" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0a04e1d-40cd-3fdf-8117-b251487ec027" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Use of variable &quot;participantsCount&quot; with static storage duration is not allowed" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1146363747" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1146363747" unbViolId="723713bf-0d7d-34a8-8c87-cb160fbf87fd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13d2a479-1e57-330f-999f-144206c16628" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="5" auth="yshi" locRef="4" rule="MISRA-022" lnHash="-1146363747" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1146363747" unbViolId="099bb6f6-00ff-30de-a3ad-bfcdd3bbaf13" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3a9abaa-07d8-3af3-a17f-60f12513ef91" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Naming convention not followed: participantsCount" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="NAMING-18" lnHash="-1146363747" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1146363747" unbViolId="f97d988b-77d7-3d29-811c-1f1734326fb7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bed3edf-2b72-3577-a835-adfbd5e41870" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Naming convention not followed: participantsCount" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="NAMING-19" lnHash="-1146363747" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-1146363747" unbViolId="67542a41-b5fd-369f-8c2f-399b73d34619" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a96d90d8-b043-378d-b4e8-6a72ad50d652" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-22" lnHash="-1146363747" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1146363747" unbViolId="c1b2f74d-4d88-33af-9c73-32a55bf663b4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="635e0cca-6cc2-3674-ade2-c67eb9120333" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-30" lnHash="-1146363747" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1146363747" unbViolId="5e2d0b60-6297-3dfb-96f3-4ef86a0fd72e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad8181d8-6563-3c3f-98cd-ddbc27d5d1b4" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-43" lnHash="-1146363747" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-1146363747" unbViolId="91de21ee-c3bb-3641-a365-a7488391949a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aafd93fa-ef90-3879-915d-963e4c98754a" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The variable &quot;participantsCount&quot; was not initialized when declared" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="2" auth="yshi" locRef="4" rule="JSF-142_b" lnHash="-1146363747" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-1146363747" unbViolId="0a3c7d73-3eea-3d0e-99f2-fe3ad0cbd04f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db83cc91-af2b-33df-9949-800afa311d26" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The variable &quot;participantsCount&quot; was not initialized when declared" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="INIT-03" lnHash="-1146363747" rule.header="Initialize all variables" tool="c++test" lineHash="-1146363747" unbViolId="f1df163d-4020-30ce-9450-c044d9645380" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7926397c-fa12-3a9f-92a0-a46924375719" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="31669cbd-8979-3f2b-aeb0-a87d37d9b411" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cc432a2-d889-377b-8c25-09ac4be8f7e4" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="ec97602a-8ea8-3f1f-84ce-f033610ed7ab" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75cd5bba-07f6-3f6f-b40f-9b51d70c9dec" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="-1146363747" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1146363747" unbViolId="bdd457d5-05bd-37f9-a926-8cbe552dc774" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5c068be-7a2b-3623-8e7c-3a51a15036b8" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="9a8d3a7b-d699-36e4-8a14-57eb92832eb3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10facc19-c00f-318a-a8a5-6d126504e3ff" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="2d0f3059-8e10-3c75-bc92-fa397c0e2f54" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c283b052-5d95-348f-9649-654be79f3cc3" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="fd780ee7-e107-3e7a-8b2e-f5e318a1dc6d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d09d975b-451a-3fb3-a33f-325060b34c91" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="7ea3fb89-7ca0-392b-8908-8611ef480468" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ba41b4d-3b83-3aa9-a728-74713e21e3ce" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The name 'participantsCount' should be composed only of lowercase letters" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="-1146363747" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1146363747" unbViolId="cf90e918-5d98-3911-88fa-1b2df54209d9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d526eab-e9ce-370a-ab59-a0e387ec293f" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The name 'participantsCount' should be composed only of lowercase letters" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="-1146363747" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1146363747" unbViolId="83124dab-8644-3d9c-9cde-36104eadc9b1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8b6cb6b-0c49-3a50-a371-975e0add213c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="-1146363747" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1146363747" unbViolId="e4859b18-1ded-33c6-9ae4-12c09af32578" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce45ddef-a223-3d3c-b8f4-ca8f7bcef684" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="-1146363747" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1146363747" unbViolId="d66b60fa-2495-3b7a-a83a-6232d8eaf9a2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b94bacb-c1e5-35f0-bff9-af54401236ec" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-1146363747" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1146363747" unbViolId="12ca2102-c6a0-3c8e-b3df-0ed5457a1fe6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03430254-1f4f-3614-9c43-7e9608c7351b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="69" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="-1146363747" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1146363747" unbViolId="b5164ad2-1fb9-394e-a108-8e45b202d1a3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85f23f48-8a4a-3891-9b3e-34ee2facb477" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="-807048934" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="405e3204-78cd-3fe1-b1fc-8ef576b19ce0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="519b76eb-a5ed-3c42-aabf-83008080de6f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="-807048934" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-807048934" unbViolId="f315026b-3940-3c85-a03d-02adaf5e2b7c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92f1b8f5-3835-3133-b5e8-eab7bd335e42" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="-807048934" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="13c141c9-2c1a-3e17-857c-fb083b838bd5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b68b9639-a54a-35af-a0f8-476cdfb6d2e6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-807048934" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="d1ddd843-94b3-378f-b976-0a334dc4228e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05a9bd27-3153-31e7-b367-87e820dd804a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_6-b" lnHash="-807048934" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-807048934" unbViolId="1d1733b7-a27f-3b88-a1c2-79a61527afed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ea96227-e40e-36e9-a350-e05e03003077" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="312c74b7-1a2b-30ac-9c3e-5d267db7ca2a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bebaa69c-09b3-3e06-b1b9-bbf0d190412d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="MISRA2004-6_3_b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="9624149a-b3d3-35e2-add1-8f8c662159d8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a63911e-8f34-3f7e-a5f2-33f398013204" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="2" auth="yshi" locRef="4" rule="JSF-209_b" lnHash="-807048934" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="66253327-4b33-3241-b943-ee38afdc6b2a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12c70219-c611-3013-a503-46d97c2b76f6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="0f066679-a0b4-332d-b626-3010013678e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2dce7a2c-0424-36fc-87f2-1605466c2a17" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="HICPP-3_5_1-b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="8a89ded5-6f5b-32b5-9c91-c901546fa2a7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06bbd4b1-5310-3675-8439-5681eb854b74" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="'exitGame' shall be declared as unsigned int or signed int" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="PORT-13" lnHash="-807048934" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-807048934" unbViolId="357eddf4-44db-3a37-bacc-e8f21dd644a6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5878099-a9c0-3bbd-9a70-538447bd6194" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="'exitGame' should be encapsulated in a class" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-18" lnHash="-807048934" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-807048934" unbViolId="760f6e5e-4392-3976-9ee8-de35d8401b06" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d164983-7d2a-325b-b329-ef9cf151d6c5" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Consider encapsulating 'exitGame'" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="JSF-207" lnHash="-807048934" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-807048934" unbViolId="0d28cee4-0432-374e-ba08-fc6d1153c8d0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29e7f20b-19cd-36a5-a874-5b820ee9069a" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Consider encapsulating 'exitGame'" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-82" lnHash="-807048934" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-807048934" unbViolId="483decda-2de1-3af7-8ddf-40d678754000" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="367f5965-6642-377d-9234-f72d3431f49c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' variable should be commented" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-807048934" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-807048934" unbViolId="a3e2c8b9-b5a9-32d5-aec0-8fc212494c74" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e5a6582-9fba-3b62-a78b-a4078ba3a97b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' variable should be commented" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-807048934" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-807048934" unbViolId="ad569e79-1ef2-366f-9690-65c7a4f06ed6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4fdb506-363a-36bf-92a3-a733a2aec0f4" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Use of variable &quot;exitGame&quot; with static storage duration is not allowed" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="HICPP-3_3_1-a" lnHash="-807048934" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-807048934" unbViolId="67f412e3-a154-3910-95bd-7ebb9e4b0aa4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcfbdea3-1682-3f93-9ab4-c21f3223beda" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="5" auth="yshi" locRef="4" rule="MISRA-022" lnHash="-807048934" rule.header="Declare objects at function scope" tool="c++test" lineHash="-807048934" unbViolId="b89cb3bf-bb59-36f1-b62b-f35c7dd9039e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90408650-3252-3ff2-a5f3-44d2315f7d33" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Naming convention not followed: exitGame" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="NAMING-18" lnHash="-807048934" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-807048934" unbViolId="5bc7030e-b12b-3cb8-a53f-0f98234fff61" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f595889-c6f8-3e4b-b3ac-b6ca024aa121" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Naming convention not followed: exitGame" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="NAMING-19" lnHash="-807048934" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-807048934" unbViolId="12bca3cd-26fa-3e53-b876-400bdebaef81" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b708e3f8-ced0-3f37-a281-1db2907f5c74" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-22" lnHash="-807048934" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-807048934" unbViolId="2b8a511c-ff7a-3865-92ea-860d0324738f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="082174eb-c710-399f-9835-1b74c029de89" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-30" lnHash="-807048934" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-807048934" unbViolId="982f9fd7-5dba-3550-9e84-a22c498348f8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cc802fe-23c2-329b-8e0b-753877a4dab1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-43" lnHash="-807048934" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-807048934" unbViolId="f6c215c7-6b2c-3f53-b8ef-36d2159dc785" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d4975ce-fbe5-33a7-9af9-8ce948a9a8d1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The variable &quot;exitGame&quot; was not initialized when declared" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="2" auth="yshi" locRef="4" rule="JSF-142_b" lnHash="-807048934" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-807048934" unbViolId="279157f0-bed9-35c4-979e-093ec9609afe" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48e64b89-731f-3527-9a7b-bb00170f1bda" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The variable &quot;exitGame&quot; was not initialized when declared" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="INIT-03" lnHash="-807048934" rule.header="Initialize all variables" tool="c++test" lineHash="-807048934" unbViolId="35792cf8-c7a9-3dd2-8fa0-94c5107b81d8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94543759-bd3d-3e23-965a-3ebe07e8a8c1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="480dba4c-88c9-39d4-9d32-35023ba1ecd7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d30f1d2-7207-3a54-abc0-92232bf5aada" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="4ebcabe7-f33d-31f3-a785-75c39b6ee744" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efc5e218-6c4c-3943-9f3e-920a8480a456" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="-807048934" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-807048934" unbViolId="a5b79738-0400-3125-80ed-48e72d206ccf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac16bb17-a926-3d74-9f1d-524b80b6bac6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="1fdafffe-d9a7-3bcc-b046-0e53648451e4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cbe5dd5-bb7c-3786-8f5e-c6e68dda6a25" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="b5beb3cf-dcb0-394d-b099-2b400373e2b9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4304f5c-f00d-338f-a956-4cad597f3d61" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="ba7f9dd3-fb32-39a4-8221-ebf8e87d5e59" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77aaf8f2-e617-3e9b-b40a-0e5a4834792f" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="70c52a69-8b70-37c1-84bd-9dc115abce23" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae1e203e-48ba-3eee-8600-ef68fd1e70f9" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The name 'exitGame' should be composed only of lowercase letters" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="-807048934" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-807048934" unbViolId="9d6d541c-348f-3992-98d1-ae16f4ef915f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1d00204-a38e-38f9-953f-1ce8839852a3" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The name 'exitGame' should be composed only of lowercase letters" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="-807048934" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-807048934" unbViolId="9d89d3c3-fa2c-32a0-98d0-0b963f06bf56" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cd72761-108b-33da-b67b-7ed04624d949" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="-807048934" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-807048934" unbViolId="3f6bce9f-bcc8-3bd1-86a2-1e3edbdc3aee" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67e5d155-f7f4-307a-95ad-d059764e1f7b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="-807048934" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-807048934" unbViolId="70f6c7c2-786f-3d40-b75f-7827a2fafc6c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eee70af6-62ec-3fe5-9944-d8a5bf53ecc6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-807048934" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-807048934" unbViolId="45e43a41-767f-3fda-a91e-d876e4ede784" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b46643b-4011-3844-9759-dc77bb8a50e1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="70" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="-807048934" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-807048934" unbViolId="ae706551-4f2b-3b94-aa5c-9bfacfc4aa24" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af934836-38c4-376a-8624-beca8eae2cc6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The return type of the 'GameLogic_Thread' function should be declared as 'auto'" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="2" auth="yshi" locRef="4" rule="CODSTA-MCPP-08_b" lnHash="-105532398" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-105532398" unbViolId="93ef8784-3d09-372a-a111-2f392bdad3cb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1de13b15-23f2-36d3-9f3e-edc1d4439873" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The definition of the 'GameLogic_Thread' function is not preceded by a comment" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="COMMENT-04" lnHash="-105532398" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-105532398" unbViolId="521653f4-acff-386e-8925-e1d36a897045" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="960a1036-7cc0-349d-add3-fd4cdd9e2a1e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The definition of the 'GameLogic_Thread' function is not preceded by a comment" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="4" auth="yshi" locRef="4" rule="JSF-134" lnHash="-105532398" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-105532398" unbViolId="1c2fd48a-6a15-3ed3-9d79-29f659057c83" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17fc6e10-6d35-35b3-b6df-e842febba04b" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="836638a8-135e-3305-923e-820d39fb2703" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e47499a-d5f4-3257-a20e-d310adee5d11" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="9a5aa7dd-92fe-3525-af0a-ae803642f3dc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ae2caf8-d8bc-365e-8722-bc107988ab3c" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="-105532398" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-105532398" unbViolId="20267d65-6146-3899-9749-e5d1ae2a4b50" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e103cd3-9013-3fe8-bf6b-12343dc601d4" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="fb89a2f7-78ea-33d1-8a15-eea0d9617acc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38e3e2af-bbe3-38e4-93a7-62e3fda438b4" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="b616ac6e-8f1a-3ffd-9ad9-206cb9910e71" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="589459d6-7fb8-3e79-a344-eba593fee35d" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="98809f2d-ec16-3556-8bf1-f75722c0a500" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54c92b7a-eb4a-3d2c-8aed-be7ccd3a0887" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="1a104540-55f8-339e-a3fc-3b8781fe42c9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0103a4b-e3a5-3bc9-9fa5-6710ff60cdab" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The name 'GameLogic_Thread' should be composed only of lowercase letters" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="-105532398" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-105532398" unbViolId="d86b5228-86b8-3012-8b92-6ee5203c9e10" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0b5bbd3-294d-3674-94ee-cc14a204c972" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The name 'GameLogic_Thread' should be composed only of lowercase letters" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="-105532398" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-105532398" unbViolId="02895d82-50cb-3c2a-8d02-cb92cb227a53" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d01ddf27-0c31-34e1-9bee-a68d5e90ba41" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="-105532398" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-105532398" unbViolId="cbbc6cf0-97b7-3287-b1b4-f20f771c6557" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a621173-49be-3229-b251-da1c8afc3a26" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="-105532398" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-105532398" unbViolId="050a782b-4683-335d-be78-6a3154d33d57" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37e6183d-797b-3b26-809c-e044464f954f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-105532398" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-105532398" unbViolId="3656e20c-57ab-3bbe-9fc7-1cc4f860fd5a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74af546e-91fe-3286-bf05-e3f91a202947" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="-105532398" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-105532398" unbViolId="cea63023-df07-3edc-9ed6-40fb3747e9f8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0d6f2bd-8cfb-3eed-ba43-eecdb0312fa0" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'GameLogic_Thread' function" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_2-b" lnHash="-105532398" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-105532398" unbViolId="8d3e0395-25a4-3175-87fa-0c947f527402" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e213c237-3f2b-3854-b791-97344de99a67" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'GameLogic_Thread' function" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-11_b_cpp11" lnHash="-105532398" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-105532398" unbViolId="e2ca4c03-99a4-31f2-bed9-189d07f50d1d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="795251e7-4ef7-36aa-a6a2-95ded10f26d5" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' returns a pointer type" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-105532398" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-105532398" unbViolId="e67d01f0-3675-3bd2-82c4-b303bceba32c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4473812d-ca3c-3352-afeb-a033b12e1794" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' returns a pointer type" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-105532398" rule.header="Do not declare pointer type" tool="c++test" lineHash="-105532398" unbViolId="9c73d55d-a997-3535-83b0-f29d804b7a8b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2689c26a-8e71-3b81-b62b-4dddf9c11782" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="COMMENT-14" lnHash="-105532398" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-105532398" unbViolId="62bd87a3-6a3c-3087-8332-383d178224f6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aeb3a773-4196-3e94-8765-e15eb5a25aee" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-105532398" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-105532398" unbViolId="b5373bf5-5a6d-3e02-9d81-754ab26ee4e2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7355c4c-998c-31ed-8723-b7a1e4a470c1" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="COMMENT-14_b" lnHash="-105532398" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-105532398" unbViolId="957533af-10e4-3de8-b22f-7c10f288b86d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="904bc121-f551-359f-a324-d40210d9998e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-105532398" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-105532398" unbViolId="0d1082fa-7ada-34ce-a680-7557dd5d34f6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c6e4b43-9a06-36b8-b430-7ba19501d669" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be declared 'noexcept'" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A15_4_4-a" lnHash="-105532398" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-105532398" unbViolId="ba11e186-bd8e-3ddf-953c-b43ea072b97d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3db31a6-2ef7-32b9-9ab5-1b53b1eec0bf" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be declared 'noexcept'" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="CODSTA-MCPP-09" lnHash="-105532398" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-105532398" unbViolId="1a8b383a-31cf-3365-9166-a05d6cf8c04c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89239629-cd96-349f-90e2-3c31e5b0d40d" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has Cyclomatic Complexity value: 1" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="5" auth="yshi" locRef="4" rule="METRICS-29" lnHash="-105532398" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-105532398" unbViolId="7aec5a15-2881-32d8-a6d2-f5074d404bbe" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="caf95398-1c64-35dc-9071-e4587e29da0b" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has Essential Complexity value: 1" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="5" auth="yshi" locRef="4" rule="METRICS-33" lnHash="-105532398" rule.header="Report Essential Complexity" tool="c++test" lineHash="-105532398" unbViolId="f1a207b3-5c3f-3a16-83d5-e5f9f44f4fc9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c88d19e7-3263-3259-9f23-a23db9736113" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The incorrect global function name GameLogic_Thread was found" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="NAMING-34" lnHash="-105532398" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-105532398" unbViolId="c781e908-a06a-3ea4-9e21-a66652a543f0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7fcc0cd-1c44-3fff-8f05-139eb6ee193a" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-105532398" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-105532398" unbViolId="d67de514-133a-3ca2-ab54-285cf8f2713a" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39ba2a45-46e6-3566-9fec-875e98bd66ee" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="72" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="72" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-105532398" rule.header="Do not declare pointer type" tool="c++test" lineHash="-105532398" unbViolId="252ecc4b-3829-3fc6-9129-92bb019c2458" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84028319-e50f-38a3-97e1-6b6355aeb4e7" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <DupViol msg="Duplicated function: 'THREAD_RETURN_TYPE GameLogic_Thread ( void * ) { return (...'" ln="73" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="73" sev="2" auth="yshi" locRef="4" rule="CDD-DUPM" lnHash="123" rule.header="Avoid function duplication" tool="c++test" lineHash="123" unbViolId="03dc1ecf-ed7b-3aff-8571-3eb38129f3fb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="b783489a-4b49-38dd-9c1f-865728e378bc" locType="sr" locEndPos="1" urgent="true" hash="-1769734618" locEndLn="76" goals="1,">
      <ElDescList>
        <ElDesc lineHash="123" ln="73" srcRngStartPos="0" srcRngEndPos="1" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="73" srcRngEndLn="76" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 73] Duplicated function in file 'DeadLock.cpp'" rngLn="73" />
        <ElDesc lineHash="123" ln="79" srcRngStartPos="0" srcRngEndPos="1" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="79" srcRngEndLn="82" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 79] Duplicated function in file 'DeadLock.cpp'" rngLn="79" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="74" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="937420148" rule.header="Tabs should be avoided" tool="c++test" lineHash="937420148" unbViolId="2cc37ab1-2170-313c-802b-8ea358866e51" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03dd7da2-5a8f-3836-9344-36e54802232b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="74" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="74" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="937420148" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="937420148" unbViolId="aba08ab7-86de-3a4e-8437-0d3a722b178b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="874eff7e-06a0-3aa9-994b-a1838b40f7b1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="74" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="74" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="937420148" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="937420148" unbViolId="0e83a929-6bb6-33a7-b61a-bc24ed9ccb07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fc172be-a879-30c5-b8af-f8bdab72a288" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="74" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="466607007" rule.header="Tabs should be avoided" tool="c++test" lineHash="466607007" unbViolId="b0f953c1-26f2-3a72-8670-0d6f45b4ab09" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f2886c7-5dcf-3ccb-b1bf-c8ff52aa85ad" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="f7f4f14b-1292-3a46-945b-a0e53cd7084c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="116f1716-2ccd-3bd8-b2b6-ee635e3970b8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="e1f74de8-5b0a-334f-9342-84f7918f069e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa7ce1bc-2f8c-39cd-837a-56a11120dd67" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <DupViol msg="Duplicated code: 'return (THREAD_RETURN_TYPE)0;'" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="3" auth="yshi" locRef="4" rule="CDD-DUPC" lnHash="466607007" rule.header="Avoid code duplication" tool="c++test" lineHash="466607007" unbViolId="f70234f2-8769-3eaa-8644-eb87126e6d68" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="f8b34497-138d-36d8-ae83-15f89ddc98f2" locType="sr" locEndPos="30" urgent="true" hash="-1769734618" locEndLn="75" goals="1,">
      <ElDescList>
        <ElDesc lineHash="466607007" ln="75" srcRngStartPos="1" srcRngEndPos="30" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="75" srcRngEndLn="75" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 75] Duplicated code in file 'DeadLock.cpp'" rngLn="75" />
        <ElDesc lineHash="466607007" ln="81" srcRngStartPos="1" srcRngEndPos="30" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="81" srcRngEndLn="81" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 81] Duplicated code in file 'DeadLock.cpp'" rngLn="81" />
      </ElDescList>
    </DupViol>
    <StdViol msg="'return' statement should be used with parenthesis" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="3" auth="yshi" locRef="4" rule="FORMAT-25_b" lnHash="466607007" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="466607007" unbViolId="c7534ab6-7f61-3ae2-ad49-19a90e4df5c4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98a1d916-882a-3aa9-a395-9e0b1368aedc" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast is used" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="3" auth="yshi" locRef="4" rule="HICPP-5_4_1-a" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="1aa74113-cace-3a3c-a978-405f117ccd4d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d63e838-ad66-3790-aab7-5015a8b25837" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast is used" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-11" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="4faf578a-ac1d-364f-bcab-1403ed4f76bf" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b50e490-2301-3e32-b429-39447587460a" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="2" auth="yshi" locRef="4" rule="JSF-185" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="f2f1a912-27b2-32e9-b0b3-add9ebbdafdb" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00280281-d14b-31cd-b333-549fc178ac10" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A5_2_2-a" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="e671bb4c-1df6-3c69-b3b6-e403a482dcf7" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7625fa58-82fa-3e62-9bdf-3cb8ba40c905" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_2_4" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="782b6a40-ac62-31c2-a0de-2cfde8de5912" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3292cf6f-04b7-364a-aecd-bdb3eca8808a" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-66" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="1c68fa6c-1e78-3c4e-aa4f-25f3988891da" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="558b670a-6e20-3141-b54d-42bbfb942545" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="3" auth="yshi" locRef="4" rule="HICPP-4_2_2-b" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="e123ad88-045c-3bdb-ab1a-dd2fa6b6998a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a60638be-018e-3f7d-8a99-ec1847a2a43f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="4" auth="yshi" locRef="4" rule="JSF-183" lnHash="466607007" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="466607007" unbViolId="9b2beba1-b229-3d84-95d1-ff307df371e3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb7666e0-bdeb-344f-a2c7-d86759583060" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="3" auth="yshi" locRef="4" rule="CODSTA-31" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="0734d54f-25ef-3dbf-a8b0-174758d19f15" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="833350c0-9f40-38ac-bdd9-70269df8a78d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_2_8" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="2e1a568c-e5c5-3c6a-a2dc-e13c5807aaab" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f28a3b6c-5a8d-3c7f-a959-a630891a95e6" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="3" auth="yshi" locRef="4" rule="CODSTA-65" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="fdc5cac7-a7ee-34ee-b144-3f632a1a3a50" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ee0f0b6-6b73-3ca5-b955-28c45a1d6c75" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M5_2_8-a" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="01d2c022-eed3-3eca-b806-580d37c64f10" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23945b66-5be1-30fb-be6a-3a22a2874b73" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="265322a3-acec-342f-92f4-46cf951f2536" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6a92a43-f482-32c2-8ca7-9c333cb45e7a" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="5880de84-d53a-3e85-a4a1-9b57f7141b77" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c173939-c8ab-3494-a72c-8472b798f352" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="75" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="75" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="d3758968-4b72-3dff-a350-2a93b5185da5" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7c7f6f3-5d9d-3512-b8a6-298914b3021e" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="The return type of the 'Controller_Thread' function should be declared as 'auto'" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="2" auth="yshi" locRef="4" rule="CODSTA-MCPP-08_b" lnHash="-391064646" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-391064646" unbViolId="a0dd9c53-cc38-3215-8f6b-c4d02a12215a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed7a4672-6970-31cb-866e-f99b730d5c4d" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The definition of the 'Controller_Thread' function is not preceded by a comment" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="COMMENT-04" lnHash="-391064646" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-391064646" unbViolId="574327bb-2a0d-3b0d-af96-14244d55d3e9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6cee4f0c-5847-31b5-ad20-27a30841676e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The definition of the 'Controller_Thread' function is not preceded by a comment" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="4" auth="yshi" locRef="4" rule="JSF-134" lnHash="-391064646" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-391064646" unbViolId="bad45658-7375-3e46-81aa-13e01987758f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="beda9abc-f5ef-30c0-a47e-6d788e6d8222" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="822ba010-84f4-32b0-9be8-abe82173701d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bdd7dff0-1cf8-38f0-b17a-ba4015a4ea20" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="3e3b3b95-53cf-3dc9-93d8-80c4769fe79f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebe7f2b3-0d1f-3328-82b1-61ba723a2269" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="-391064646" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-391064646" unbViolId="0da1b7f2-22b5-3081-88cc-4f1644896c3a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0afd7f80-81e5-3b6e-b0c9-fcdc59cbc90f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="3035a90d-9452-3659-af0e-aceec3a8fef2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="060afa43-202e-35f9-9aaa-6e0d1e9b9dc3" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="e067c7e2-db59-37d8-847a-3bda3bd99b14" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67e0d721-23a0-39db-938f-3735ab005d6d" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="1c8faff6-2617-30bd-9dee-d05daafb80b5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18eb1760-3a9f-35f1-a60d-2d82d03c248e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="9325a233-1182-3a46-ac4c-33c30b982c60" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e851abe-4e8e-3b7a-8bb2-785d04152d6c" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The name 'Controller_Thread' should be composed only of lowercase letters" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="-391064646" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-391064646" unbViolId="0bb2acc7-c9d7-3c7f-8999-c8a33918681d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c233c7e1-d9a1-3d41-ace1-0adf8e729bff" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The name 'Controller_Thread' should be composed only of lowercase letters" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="-391064646" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-391064646" unbViolId="dd285f56-4b82-3d0a-8354-0791bb79cb99" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72b9ec10-e09e-3f0a-b367-fae8c1d20260" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="-391064646" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-391064646" unbViolId="7f023eee-6cdb-3c1d-9833-0099d7f50593" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e58658fe-50b4-3a6c-abf7-7066d16c78fa" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="-391064646" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-391064646" unbViolId="9df4f47f-52aa-3363-b8d4-a40efa912604" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca19348b-e253-357f-8a16-29f167163760" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-391064646" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-391064646" unbViolId="fca2d0c7-5370-31f7-8c85-12f3fb26cc97" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="203ea483-b6bd-351a-9ec9-c07120c22a6a" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="-391064646" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-391064646" unbViolId="d2b44169-6409-390f-81d4-d30c5ae706c8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17015efa-4390-348c-964a-09172b0edbfe" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'Controller_Thread' function" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_2-b" lnHash="-391064646" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-391064646" unbViolId="9e8f2cb6-8bc4-3a1d-9133-15db2f8193c3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71b40637-a65f-3119-aebc-56b19129b4c8" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'Controller_Thread' function" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-11_b_cpp11" lnHash="-391064646" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-391064646" unbViolId="246cd17d-e996-33f2-b6e6-a98752621970" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7317ddc0-6b4d-3793-8f0e-f9d8afc4b63b" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' returns a pointer type" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-391064646" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-391064646" unbViolId="19aacaf5-e289-32a8-8d06-1fa7e6658bf6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d73f1fe-2880-3397-8a95-3603c59d9efb" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' returns a pointer type" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-391064646" rule.header="Do not declare pointer type" tool="c++test" lineHash="-391064646" unbViolId="e76edb9e-c549-374f-b3e2-ca891af571dc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e72ba5c-e337-3543-bd64-fc386205cd39" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="COMMENT-14" lnHash="-391064646" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-391064646" unbViolId="b9dacacd-e3b0-3df6-9a36-5996ab71d859" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5eff3561-fae1-3589-9975-cab159ce6185" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-391064646" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-391064646" unbViolId="e497a9fd-b9e2-3c0a-ae42-f11eb98e778c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c94a41fe-800c-3abd-8363-fb1f90fe0803" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="COMMENT-14_b" lnHash="-391064646" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-391064646" unbViolId="bfa23576-7f23-3b00-931a-28b86a4f7503" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="222a4caa-6bfa-3ac8-94c0-8d82983f8dff" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-391064646" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-391064646" unbViolId="eedf4ddc-1351-3e7f-a422-f84d493e879e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a770021-b791-368b-936c-35691b3293e1" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be declared 'noexcept'" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A15_4_4-a" lnHash="-391064646" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-391064646" unbViolId="5e385ea6-7a8c-3024-9f9c-e340e2581681" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca8f75f1-88c4-3fd8-8c1b-a2b4b543d4e6" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be declared 'noexcept'" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="CODSTA-MCPP-09" lnHash="-391064646" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-391064646" unbViolId="5a0d84ab-bae1-30e5-980a-b38f1ac0c024" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b98e68cf-1ad7-3da4-a141-cacdba7143a4" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has Cyclomatic Complexity value: 1" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="5" auth="yshi" locRef="4" rule="METRICS-29" lnHash="-391064646" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-391064646" unbViolId="d415afc9-7792-3d04-b5cb-2b7b2b1e669a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb230aae-f1b6-3eb5-ac3b-e7ccff045b5c" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has Essential Complexity value: 1" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="5" auth="yshi" locRef="4" rule="METRICS-33" lnHash="-391064646" rule.header="Report Essential Complexity" tool="c++test" lineHash="-391064646" unbViolId="7f760af5-c31f-3c5b-8f73-6620b42cea56" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc1928e3-2b5b-3070-b182-0ff8db370c27" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The incorrect global function name Controller_Thread was found" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="NAMING-34" lnHash="-391064646" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-391064646" unbViolId="f3c95244-1d39-3265-a002-b41d0e959f2b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deda926b-0ae7-3dbd-8636-8cb567b8d9bb" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-391064646" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-391064646" unbViolId="f6b06875-e1e0-3694-8943-be113130bd5e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63571467-c987-3fff-bd65-76f6e2cf1065" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="78" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="78" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-391064646" rule.header="Do not declare pointer type" tool="c++test" lineHash="-391064646" unbViolId="214cacc3-e3ac-33d0-81e7-5259b01c6df4" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="827d50b0-7637-354f-bc58-a528ce0c34eb" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="80" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="2111304760" rule.header="Tabs should be avoided" tool="c++test" lineHash="2111304760" unbViolId="6fc33019-2b4b-394b-a19a-bd76cbf50ac2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4178fd8-05c1-3e7e-899b-257a7f9567fe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="80" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="80" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="2111304760" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2111304760" unbViolId="5a240a61-4050-3ff8-8d99-f3cf9a40d13d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bc5b0fb-1c53-36fc-a176-744d097fff03" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="80" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="80" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="2111304760" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2111304760" unbViolId="8616eaf9-bdce-341c-8dae-3af5a84285a6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fdcebca-902f-323e-82fe-6a317a15023b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="80" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="466607007" rule.header="Tabs should be avoided" tool="c++test" lineHash="466607007" unbViolId="e030735a-9e18-3ef6-a1e1-439e64dc567a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a20abedb-d848-3ab9-ab50-64923b3c18c7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="c7821093-e378-3fe0-8abb-3f86492f0d40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87b1d837-3294-331b-8571-0c74edc23768" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="40a86886-e81b-38ba-93ab-a32465d0a0a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c669984-bd83-3d87-8a49-08aae2b359a6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="3" auth="yshi" locRef="4" rule="FORMAT-25_b" lnHash="466607007" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="466607007" unbViolId="045eeaa1-0b21-3384-a459-5efde89976af" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a9a897a-c2d0-3939-be73-5c2cce6e8d87" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="3" auth="yshi" locRef="4" rule="HICPP-4_2_2-b" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="f5d96226-1fb5-3361-a7d8-2756bc100cde" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59e89d12-7665-3538-a2ab-44c678fae323" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="4" auth="yshi" locRef="4" rule="JSF-183" lnHash="466607007" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="466607007" unbViolId="3790ef53-4e3d-38ad-b4fc-170af3b7d68c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="853f80d7-d94d-3c5f-93e1-3f2577d216e9" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="3" auth="yshi" locRef="4" rule="CODSTA-31" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="610ebc0e-0b7d-31ce-bca2-31412adb0cd4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b667583e-f125-3ed0-b6d7-8bd8a2616c11" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_2_8" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="5f410006-1e8a-3199-8c66-31d1eeef90fd" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb1a9968-b16d-3749-89e7-19d6c3e8a635" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="3" auth="yshi" locRef="4" rule="CODSTA-65" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="c636f7fd-665d-3c2d-96c6-9f2e082a872f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b1ea7c8-54d8-3a78-815b-f3a6332d387b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M5_2_8-a" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="f0de831e-5546-3765-ace1-f1924487eb21" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13641b09-2cff-3ef7-bfab-1357bb07b19c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast is used" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="3" auth="yshi" locRef="4" rule="HICPP-5_4_1-a" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="c90da6b8-d753-3d9f-82f0-73a87bff4d00" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43431f9a-004b-3d05-a6b0-8fc5f954c499" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast is used" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-11" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="4224524b-6fa2-3344-b41e-6288e473f178" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2556bb02-0074-3950-b394-39b435e429c1" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="2" auth="yshi" locRef="4" rule="JSF-185" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="3aeb1bc3-23ca-3f70-93ac-4de4546f38cc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bb83ca2-8502-318f-9fdf-2ba49b357718" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A5_2_2-a" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="4137a8b0-b79d-3dde-b490-c077a356b3a0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8d7ca96-0fd8-325f-8109-cc331e393b21" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_2_4" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="223193de-cf24-334c-a3ec-693a25509607" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8a8e2e9-19f1-38d1-a9da-15d4b37c5338" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-66" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="f8a44458-4a0a-362c-bbc9-25627adcddc5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7487d63d-b7a7-35d3-8e0c-816caab2ad35" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="c7d12a86-153a-337b-b698-69b9d34f406e" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="631343ef-e308-360e-8bbb-b7f5e0c900b1" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="13b001c7-fae5-3178-85a2-fbfa6cd5cb9e" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14692e18-8e96-37b2-b32e-839909dcaaa9" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="81" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="81" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="4be5c4c7-0b1b-3714-8232-075ab76241f2" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1dcaac4-3015-3eca-9d01-8ecd7eeb5d87" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="348867655" rule.header="Tabs should be avoided" tool="c++test" lineHash="348867655" unbViolId="e0e78026-c487-34cb-bf92-ae4e7a2b2cc6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f165bd2-adb8-324a-bda8-1294373687cd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="348867655" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="348867655" unbViolId="73670f14-c6ad-3969-a800-396b6b931ec3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0170da28-b952-3b18-980a-4381f89a1ed9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="348867655" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="348867655" unbViolId="d20460ba-54b5-3c84-8d1d-1f7580b391a7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d49df64-af20-3522-b899-4aa2f6c9e47c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The operator '*', used for 'velocityArray' declaration, should be directly connected with the type" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="JSF-062" lnHash="348867655" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="348867655" unbViolId="c17ae8f4-df5f-3045-93ff-528bde93daf7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dc75334-3e6f-334b-9b8a-b9a3bfb12b13" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The operator '*', used for 'velocityArray' declaration, should be directly connected with the type" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="4" auth="yshi" locRef="4" rule="FORMAT-32" lnHash="348867655" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="348867655" unbViolId="a8fb0b8c-0e31-3b2a-9c1d-d8bba64ae47f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70ea99be-9c31-3b73-9de4-d49c2059b3dc" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Consider encapsulating 'velocityArray'" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="JSF-207" lnHash="348867655" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="348867655" unbViolId="176e63de-c25c-334f-92cf-369e965d6b0e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cc12124-79c3-3542-9177-1255ded9887c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Consider encapsulating 'velocityArray'" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-82" lnHash="348867655" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="348867655" unbViolId="b0e2eeff-ce50-3818-ad4e-25419c593aa2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7d29ef1-8ea9-3b6a-881d-1826b12d60b0" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable should be commented" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="348867655" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="348867655" unbViolId="145de4b5-f53b-3c27-8cc5-c5bb0a99a4dc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c9b182f-e883-3526-801b-ff2db74088bc" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable should be commented" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="348867655" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="348867655" unbViolId="1873d219-4ee2-32b5-b0a8-5d8e9bc67693" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cfc193e-0b13-335e-881b-8d9f7964b874" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Use of variable &quot;velocityArray&quot; with static storage duration is not allowed" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="HICPP-3_3_1-a" lnHash="348867655" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="348867655" unbViolId="29bc486b-8a0f-3369-bf72-1baa7cb27011" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="038897d0-d2c1-3a17-9545-d2065179cba4" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' is declared" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="5" auth="yshi" locRef="4" rule="MISRA-022" lnHash="348867655" rule.header="Declare objects at function scope" tool="c++test" lineHash="348867655" unbViolId="e7e2eeb0-21ba-31b8-ad96-b4f31d0c472b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b974b86c-4983-3e6f-914c-2a505ef30a9f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Naming convention not followed: velocityArray" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="NAMING-18" lnHash="348867655" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="348867655" unbViolId="144a7b14-fbe6-3f50-80c2-9593169599ac" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="433b7946-bdbf-3100-9339-af4a00c0daa2" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' identifier should have the 'rg' prefix" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-01" lnHash="348867655" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="348867655" unbViolId="3575b50f-37cd-366e-8d59-92c1e242c9ad" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e1f3d1b-4991-3060-b06d-f5ce45095f5f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="b3b01777-7a7d-39f9-a7f9-dda143f0e977" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2ac60f5-b965-3908-9a76-b1ad0abcf1fa" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="5d92b750-34d8-3db9-848c-3e1cf9628f5a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f90b304-ffbb-3b86-9a6c-3e10496c2b27" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="348867655" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="348867655" unbViolId="7d51ae68-49c1-30f4-a79d-26ff456e5901" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ef94e8a-d462-39dc-ae2a-51ebb022f8e7" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="0e22e859-4d57-3217-9161-bc56adb21f9e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc4221a9-ea94-3a1b-a2fe-44391cf10f4d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="6761a1a2-8167-3b2c-9bd0-2e58db3aa0a3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63ad4128-a52d-3d4f-9a0f-d49a346166c1" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="78201985-0360-34f6-a15d-4b196a1d84be" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70502259-29fb-3157-9263-04b44f9e3ca4" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="966d21a2-7a25-3d9f-a781-40270a1fae1d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acb91dcf-06fc-3736-8b95-ba52954c0d71" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The name 'velocityArray' should be composed only of lowercase letters" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="348867655" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="348867655" unbViolId="7c440023-5ef7-3054-8d61-e0f08513a153" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8acb6c4a-b928-3111-a8e3-1e98164df235" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The name 'velocityArray' should be composed only of lowercase letters" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="348867655" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="348867655" unbViolId="a7fc419e-7674-33db-80b5-a4576af75eb8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ee0c47c-c5a2-3c7f-9f21-848bb19ff3bf" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' array should not be used" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="STL-37" lnHash="348867655" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="348867655" unbViolId="3a618688-5fa0-3d0b-b4d9-33b88571dbea" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b74720b0-71e1-3fb0-af53-e44e76c2fc05" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' array should not be used" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A18_1_1-a" lnHash="348867655" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="348867655" unbViolId="55a0efe5-7f50-3e4f-bb71-09743e05bb47" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78ce46f9-c5d3-3dfb-808b-0fdf080b6103" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Declaration of variable 'velocityArray' contains more than one level of pointer indirection" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="HICPP-8_1_1-a" lnHash="348867655" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="348867655" unbViolId="157265f2-19ba-3b00-a17a-59ca9f04d1a1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37cbd382-49c0-3f21-aea4-e905b3fa38a9" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Declaration of variable 'velocityArray' contains more than one level of pointer indirection" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="CODSTA-89" lnHash="348867655" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="348867655" unbViolId="f0e7cadf-5583-322e-92b2-c6a5efd84ea1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4bb8339-604e-3356-b7d0-4d23d3f092b6" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: velocityArray" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="348867655" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="348867655" unbViolId="25d8c700-4d06-3ea4-b00b-43870edb7e36" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b29034f2-ee9a-37d5-83d2-75402470e299" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The variable of pointer type is declared: velocityArray" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="348867655" rule.header="Do not declare pointer type" tool="c++test" lineHash="348867655" unbViolId="17dc0c0a-ce2b-3a56-bbf8-38867dfe0992" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="484675e3-a028-3625-a7ff-4fb8431c7e1c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="72f8f5c9-daf7-3c46-adc6-c3d37ae5b50a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="21489cc7-ad60-3ed8-8115-cab98739c1f9" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_4" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="2729b724-3e1a-3624-9d5d-ad0341e36540" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="468c6807-a591-3b57-96e4-f4675be108bb" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="86" sev="3" auth="yshi" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="3acd277e-6257-3006-baba-800f2b3d1f04" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="50d015cb-3af8-3f8d-929e-ae9cbf8a3178" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="465702038" rule.header="Tabs should be avoided" tool="c++test" lineHash="465702038" unbViolId="c9d3bd5b-ce8d-3a36-8e19-8c24c69cc6f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2396eeb-c941-37ba-8374-f1726831e3c7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="465702038" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="465702038" unbViolId="4ad4aeaf-f879-3c6b-b920-7694fc70be8a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5734ed9-ea78-3451-b5ba-7fe39cddd4da" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="465702038" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="465702038" unbViolId="5b4e018e-bb8f-3fa0-a2a3-31c52dce3755" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1f83094-3372-35a9-9f3a-aff86c2cccd5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="COMMENT-14_b" lnHash="465702038" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="465702038" unbViolId="4654e381-9987-3a02-93ca-a2ae1d0275ed" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1b99c66-bfd7-3ab8-99bb-ed9bd1652e11" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="465702038" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="465702038" unbViolId="607dbefc-0716-38aa-a1c5-e856d589e6b5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="572f74cb-6b1d-35a1-81b7-4ae9b47a45d2" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has Cyclomatic Complexity value: 3" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="5" auth="yshi" locRef="4" rule="METRICS-29" lnHash="465702038" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="465702038" unbViolId="ba29210e-47a7-31c5-b2e8-e37dfcd87c4e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f73fb8e-cb59-330e-b3fc-9fb75f4c99c2" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has Essential Complexity value: 1" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="5" auth="yshi" locRef="4" rule="METRICS-33" lnHash="465702038" rule.header="Report Essential Complexity" tool="c++test" lineHash="465702038" unbViolId="e61c8407-4ee1-32e6-9031-5b870e06ecce" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="804a41fd-5996-3d82-9955-45d70852f91f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The incorrect global function name Physics_Thread was found" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="NAMING-34" lnHash="465702038" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="465702038" unbViolId="0edaf31e-faac-33f5-bfef-d8c87ea7432d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a797500a-6348-3ceb-9cd6-b09cc730b4b9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The definition of the 'Physics_Thread' function is not preceded by a comment" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="COMMENT-04" lnHash="465702038" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="465702038" unbViolId="5696345d-1708-3f15-ae1d-80913eb79e0a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18bfa276-128a-378c-9557-1088fb47fd54" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The definition of the 'Physics_Thread' function is not preceded by a comment" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="4" auth="yshi" locRef="4" rule="JSF-134" lnHash="465702038" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="465702038" unbViolId="d19010f3-7454-3fc8-ac80-6c1bb5ba054e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfebdccf-e86a-3c74-8690-34f9e2e2fcb7" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="640ec441-2676-38be-ad38-5124c1d83d78" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aca0379a-63eb-39e1-be7c-20cbb5d2a3a7" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="33aeabea-3643-3b7d-98e3-ee5cc7995406" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94bcd6fa-da16-3372-a76c-8b12666650d5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="465702038" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="465702038" unbViolId="bc4fa3fa-b2f1-3c57-9a60-92d2cda17d3b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2b5402a-3a5f-3b68-92c8-9e13a795b968" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="4502545d-036e-3666-8493-c5b82dc10638" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15601358-62e9-3658-8e96-706724af94c9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="289d34c5-9d2a-3455-bba8-afbdd0f717d7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b2bf0a5-d864-347c-89c5-625aa9f82532" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="24761004-5494-391a-b075-24e071ad1182" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a011aeab-b9bb-3c95-8849-1d7ab265652e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="6ce203aa-06eb-393f-9cb5-9ac9334804bf" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af79ad3d-253a-312a-9e8f-29101b1995f2" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The name 'Physics_Thread' should be composed only of lowercase letters" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="465702038" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="465702038" unbViolId="0d7ec93e-8bbf-3fa6-8fa4-7ad594293c2a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="280b2a28-722d-3977-acaa-c42f73ddb97a" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The name 'Physics_Thread' should be composed only of lowercase letters" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="465702038" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="465702038" unbViolId="68fce9e1-0778-3669-a713-9ef2b2fee9bd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deb2775e-c8cc-32c8-b62d-84ab85e64edb" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' returns a pointer type" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="465702038" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="465702038" unbViolId="8d6ba3b2-d6b4-3179-9be7-d3f47b925808" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a8ecc45-22ed-367f-a53f-629062bfe887" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' returns a pointer type" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="465702038" rule.header="Do not declare pointer type" tool="c++test" lineHash="465702038" unbViolId="d47a1a77-b498-3aa7-980f-5809be3436d2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52a28ed4-2fba-355b-8364-2c24b6f112f5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="COMMENT-14" lnHash="465702038" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="465702038" unbViolId="10955d29-6597-38e3-8125-f5734cf3f8de" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84a817a9-10dd-3b28-afec-d44363f2a43a" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="465702038" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="465702038" unbViolId="8872bacf-d21a-3d33-8330-5d2572b522a1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c16d9885-ea89-3164-a767-4d96fbe6ad90" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="465702038" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="465702038" unbViolId="5e10a734-ebe9-36b7-a8ee-29d4d5172a5e" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1db0fd1-898a-34c8-ad37-91dff45350a7" locEndPos="23" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="88" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="88" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="465702038" rule.header="Do not declare pointer type" tool="c++test" lineHash="465702038" unbViolId="46e0b296-02f4-3771-af9b-e853f61347a5" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cad5cc80-7426-350a-af71-9345f9283c1c" locEndPos="23" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 13" ln="89" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="89" sev="3" auth="yshi" locRef="4" rule="METRICS-19" lnHash="402" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="402" unbViolId="52f45974-f50a-383d-8c9b-ddccc04a7b08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b056398-5b60-35cd-9faa-c2c0a77c461e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="89" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="8becb5b9-53c8-3318-8a62-35ca69fe979d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13cea40a-9900-348a-9925-7c93dcc26425" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="89" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="9318e675-01a3-3157-9faa-378bccf44b24" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f001f944-8911-335e-9852-dbb3f1b73123" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="89" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="b492435a-836b-3c8e-9737-3863267262e7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79127faf-9ed6-338e-898a-8f0738f76e4b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="3" auth="yshi" locRef="4" rule="JSF-061" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="3903147d-ecc2-3550-998a-93b1bb8ef890" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="668b2443-47db-3ca3-8632-a8cc2ab4a2cd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="3" auth="yshi" locRef="4" rule="FORMAT-42" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="086c4b5c-2894-351b-9970-a8bfa5cd979f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81af5570-ea93-38b8-b3fa-c2fad67851e0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="3" auth="yshi" locRef="4" rule="JSF-060_a" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="b84fd7df-3791-3d60-9ca0-6538beae341f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a767aa8b-b7d4-3b36-a14a-d0b284f1f366" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="3" auth="yshi" locRef="4" rule="FORMAT-43" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="a483cfc8-4a02-3e54-9aae-01ebe6dd3295" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90a7ceea-bd1c-3e5a-8bac-d6c1e14521ec" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="3" auth="yshi" locRef="4" rule="JSF-060_b" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="c9e7af95-e710-35ae-9ae5-b2215acdcd0a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f6f6340-563d-3aff-8ffb-dfda09fa4275" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="103d4448-293e-3bd4-9c5d-36fea273dbfc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="567de7b9-720e-336d-beb5-56e40d6cae97" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="d67d86c4-951a-34ac-bf1c-6e6e086d7a42" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e46cdc0f-7a22-3940-8b4f-ebcab9bc3108" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="7e7970e3-ea5a-31e3-9b4a-347524581535" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4554858-5d79-3051-bb90-c3b7d0dcd1d1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="3" auth="yshi" locRef="4" rule="FORMAT-02" lnHash="-1229452372" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1229452372" unbViolId="35892ecf-7ff0-3d26-a074-24126edbeca3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dea584fb-f6cf-337b-af11-a343c338a767" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="ff6773fe-56c6-3fbb-8e17-93f421d1a17d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbb3dd51-2bcf-33f7-b266-4db2c2a0ccb2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="bdc19d5e-b2a8-3bff-9fdf-442c2125b305" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e50479a-2c0b-323d-b426-dbf6bd9419de" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="9765dd46-6de2-367b-a571-584184ff3a4d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="075bd48d-6405-3168-b15d-2af952c1ef2f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="3" auth="yshi" locRef="4" rule="CODSTA-83" lnHash="-1229452372" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="-1229452372" unbViolId="9b5ba7e7-262a-3f6b-b73d-06778ba9d6f4" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1eaee7f9-35a9-39be-8b91-4b5db89f12ad" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-67" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="b43a28e2-a047-3e04-837e-28c7b9aa785d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17eb24e1-d876-38be-8cd7-a883e0fef8bc" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M5_3_1-a" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="00c1ce9d-9685-32f4-b1de-7149f7cbd3cf" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="158d2814-528b-3133-a90d-ea1016008043" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_3_1" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="439c8345-103a-3944-8a17-6a7e5c3c6129" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad5588f6-bc2c-393a-a59a-faf41ac0efcf" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="In 'Physics_Thread' function use positive logic rather than negative logic whenever possible" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="5" auth="yshi" locRef="4" rule="CODSTA-46" lnHash="-1229452372" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-1229452372" unbViolId="c41aa795-93ce-3edd-834d-fbed45680895" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38487c43-a5e4-33cb-8669-41ed146b19b3" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="90" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="90" sev="3" auth="yshi" locRef="4" rule="MISRA2004-12_6_a" lnHash="-1229452372" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-1229452372" unbViolId="00344496-4aa8-3c68-b999-299bdcd9192d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1dc76846-bd3e-35ba-8e26-7ad3c6b079a1" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="JSF-061" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="2ffcba65-053e-3ef1-9797-d4d2ee3d1a90" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6c06e72-b8f9-3dd7-8231-058a40966863" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="FORMAT-42" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="fc57ac8f-7047-383b-935a-3d967a93d01c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf235e5c-24f4-353b-bcd2-6a62eac12ac3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="JSF-060_a" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="408ec165-9508-3d51-b73b-8bea77cbab3d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35bb372a-1ebb-3c8f-a5c0-dd50e7b8c0ba" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="FORMAT-43" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="38cb9493-02cc-3acc-8da1-bfa2dbd12e48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="879862bd-4524-31f0-a5ed-e5d1cceb05ef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="JSF-060_b" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="5a2069a1-a005-3a63-91b3-a18c031e3272" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="882cb0c6-7c59-3192-89f3-1f4d215f26fa" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="b8f21203-968d-3ec3-bb22-a6fceea04b1e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acf9ab57-0455-3dfd-a329-5d86f3d44334" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="0166e53d-0a28-3c8c-9538-9b458a696537" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="418c1636-f87b-3b81-8432-cf1a71c8b770" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="da46cbc0-3031-39cd-9143-69f7bd43e481" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5130d085-71cb-3208-8035-faa9dd59a2d8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="FORMAT-02" lnHash="1544355218" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1544355218" unbViolId="fcd8300d-4627-3614-ac07-ff3ac5a9c128" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9f75de2-5f98-3be4-ab15-7b397e746b89" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="07686560-a3b6-386f-b397-102badfc1a1a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="701897c3-832f-306b-9ca0-b0ebee5788c0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="fd1c8c99-d823-34de-9037-0c1f1451e352" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bd9858c-0bd4-3935-ab1c-f9a915a12ebf" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="b487f40f-4393-32b5-a253-14c91a34f3b6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7acf2f8-fa59-3f03-a947-bed646a5bfe0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="2df4cf7e-ccc1-328d-9fda-e4d759c1c99f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f65cb2f7-8b6f-3e2d-80b2-cae22204179e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="99fab139-cd15-3581-81de-fa22ffde575d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6acb8f0a-776e-3fa2-917a-d25f4002646e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="8d7138ac-204a-3ec5-82f5-b30c7d73e94b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eabcf9b8-0c68-3dc5-8525-ecb32c7fc98e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="CODSTA-83" lnHash="1544355218" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="1544355218" unbViolId="cd64003d-f4f3-3410-afea-682a8f56c473" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74ed56b7-02a1-3f0c-9bdd-3143239f1212" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="FORMAT-12" lnHash="1544355218" rule.header="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" tool="c++test" lineHash="1544355218" unbViolId="f9237236-4792-36bc-b7c6-6324d2079ff3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a974aa1-7ff7-37a7-82c1-543219bd57a7" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <DupViol msg="Duplicated code: 'for(int i = 0;'" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="CDD-DUPC" lnHash="1544355218" rule.header="Avoid code duplication" tool="c++test" lineHash="1544355218" unbViolId="8b7b6a97-2296-3844-a7fc-df3f75bdecc6" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="e198f782-93cc-309d-8a47-87ef00bb1784" locType="sr" locEndPos="17" urgent="true" hash="-1769734618" locEndLn="91" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="3" srcRngEndPos="17" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="91" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 91] Duplicated code in file 'DeadLock.cpp'" rngLn="91" />
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="3" srcRngEndPos="17" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="122" srcRngEndLn="122" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 122] Duplicated code in file 'DeadLock.cpp'" rngLn="122" />
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="1" srcRngEndPos="16" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="9" srcRngFile="/FlowAnalysisCpp/MemoryLeak.cpp" desc="[Line 9] Duplicated code in file 'MemoryLeak.cpp'" rngLn="9" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="2eaa8f08-8b5d-363e-9e1c-9dab43e0c975" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78923ad0-a813-3b73-b4eb-2cd7d721846c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="adc7b40a-21e7-3911-9fec-e692852ba0fe" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="367a9427-1143-32f6-a496-4964e8179a29" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_6-b" lnHash="1544355218" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1544355218" unbViolId="2930c818-212a-31ed-8db9-86ff819e99b7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="874fabfc-0fe3-3529-9f5c-1d0a76ee2133" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="f7e6d194-93b8-36ff-8042-be545aa72a99" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d2c2318-e398-3eec-986d-ea5bcc253282" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="MISRA2004-6_3_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="a209992a-0d38-321c-b647-225110535d6b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dfc70b5-1630-3595-8995-8beb1d7e0c2c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="2" auth="yshi" locRef="4" rule="JSF-209_b" lnHash="1544355218" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="abac5e63-9f50-3f15-8122-691510e28186" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2997d5b4-5b5e-386b-82a6-03609f621068" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="e7372543-4c0c-3514-b36c-4cd4460cd26f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad54c905-cc71-3734-a3dd-85feeae7b9e2" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="HICPP-3_5_1-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="0cec22d7-e2a8-399d-b16b-c28eb0082bbc" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d9aa8b1-b904-3d22-9a6a-eddaee6c4e9f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="1544355218" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="1ac31310-167e-377b-9adb-36e3e3ae77b5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="685d8294-6896-304d-a74e-56e36a64d69f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="1544355218" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1544355218" unbViolId="07fc0b77-2809-3646-90a7-114f1658ff3c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44b350f7-b2a7-31bd-b8d6-56ac09a59d9d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="PORT-13" lnHash="1544355218" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1544355218" unbViolId="a481c101-2250-33d3-ac6e-1acd51df93e8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fa47cda-91bf-38a1-b2aa-6af47cf267ae" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Variable &quot;i&quot; declaration was found in control statement" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="OPT-10" lnHash="1544355218" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1544355218" unbViolId="e65b2f61-6790-31ba-b6e2-84ebf1b9d8a3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03d3aca0-f6ae-3c40-81db-d9189c5a75e8" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="1544355218" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1544355218" unbViolId="8303524c-33d5-3c61-8cbc-7cd760e78726" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1db9b140-952d-31a9-85b4-20c7b3b00339" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="1544355218" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1544355218" unbViolId="0f1767b4-c4ee-302e-b911-39419ffedd2b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="020ce9b9-7524-3d6f-90f2-71791036ee80" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="c98b7e07-e8c4-3c03-8f68-38864e5a5384" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1b2bd74-a45b-367d-b1f3-58fa398429b2" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="CODSTA-MCPP-38" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="197e4899-4d4b-3c46-b2c1-640d6f3740bb" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d142c34-33d3-3ae4-9a69-c190aba90eb5" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="91" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="91" sev="3" auth="yshi" locRef="4" rule="OPT-04" lnHash="1544355218" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="1544355218" unbViolId="7a40b31b-c3fa-3c6b-b16b-35bf18e48212" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9410530-cd12-3ce3-8b88-be5f477737dd" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="cb9704ef-4a59-3d10-85d7-4e7af43237ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42ee3f26-113f-3824-9df4-3a5bf5664b9d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="e4f372e0-ec1d-37ad-99fc-82e2f3954aca" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="804bc984-ca08-31ab-b8df-dd6af14f092a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="f67f0d31-edcb-31d8-8d3e-0c94db60e212" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a13bfbef-fba5-3464-b782-539bde38bfb5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="196f43eb-59d2-3457-b647-266c51a0d448" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c945f850-0b97-3202-ba2e-f8c563d9b312" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="51163f37-7f0b-3cd0-9d8b-f4293eccaec1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="015c7f22-dd40-372c-98cd-06b3c4335765" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="e7b4f288-58f2-3f7c-8425-28e6be61535c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="550ec507-14a0-3b60-a00d-aca2711eeb76" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="e75267c7-5160-3f1e-8d3a-128f67666c1a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c333f63a-7478-3ef1-8cd1-c629f63a0352" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="03233f9e-9da8-3f2b-9ebc-b5d736b7828a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9524d91f-c6df-369e-9535-0496880b0a10" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="db7ec552-3dd8-3cce-8687-69e96a2adbe9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65d718a0-ca51-3180-a646-c0422ddce6f2" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="556a0141-5f53-3a33-b433-3b88fb68f22f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e68a4498-3ef3-3f7d-b38c-b0c8f06bd7f4" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="fe21702d-f038-34be-853e-a4cafa878fc4" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56e1f501-9b45-35db-bbe2-857fcbc0a20d" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="783eb9da-4f79-309d-8ead-c2becb387405" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90f0aa57-06b2-3c21-bca0-98f6c760b948" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_lock' is called without scope resolution operator '::'" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-251104526" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-251104526" unbViolId="0ede5301-4593-3090-9d38-2718aaf29485" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0ce6606-f557-335b-9fe9-5536f89637bb" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="a59f42bb-1825-36f6-9773-dc7654e2e3b4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05b52513-0401-33cd-b1a4-c32329a7ee9e" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="c4cfe362-b379-38f4-ae1d-995da6501693" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85cda477-fa46-3dd1-aa08-f220d2c55d64" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="0713b364-45bf-362a-9678-c3ca271200a7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2760681a-b2e9-3731-a831-bd23588accd6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-251104526" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="73ec42d6-933f-301f-be9e-025a66846555" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="824ff5cf-b817-3b23-9d8d-ee4f5556c765" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="a0375344-765d-351c-b632-fff737cda6e2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="939029ac-135f-363b-b44a-9efc2acf9da7" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="e8f41e09-7e84-38d8-bc0e-6cbe84e2d8e1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce190d17-a6e9-32de-91de-cb0df0c480a9" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="c307c9a0-bf97-31d1-b412-5f1b5582679f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e7733a4-3b3d-3a7a-8f0b-c6c89e332924" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="1ea1673d-660b-3cb4-b079-13abe868f6dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd1dff64-3cfe-3c41-bb6d-6c9cc252aea7" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="83f327ef-7f6f-3a7c-846c-94bddd62a2a6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7dea699-03e1-3c77-ad78-997a72bc4d3c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="8707abfb-83e3-34c0-ba83-0ac8342c94f3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56455aea-0c09-3e70-865a-6c962e88e60f" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-251104526" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="e1385a58-c819-3e7e-8304-9e7fae7945fb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27197161-1483-3a98-b0cd-b48601094131" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-251104526" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="7d723a2d-ef7c-3e10-ac9d-2d391cfdb395" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e786fad-a895-3e18-a17b-55b8d986a860" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-251104526" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="d2b268e5-e930-3ae9-b8b3-1fb1ce377427" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3e7a287-b76c-3109-8c2b-f49029a32b39" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-251104526" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-251104526" unbViolId="8c1227a0-552b-35c8-ade0-87198cc62bfe" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef60b3b2-eab1-3a3a-afad-721a9838a59b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <DupViol msg="Duplicated code: 'LOCK_ACQUIRE(changePositionMutex);'" ln="92" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="92" sev="3" auth="yshi" locRef="4" rule="CDD-DUPC" lnHash="-251104526" rule.header="Avoid code duplication" tool="c++test" lineHash="-251104526" unbViolId="47bffeb1-45f1-37dd-8627-eec292949a9e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="c6313747-1c40-3236-a1bb-3e473342a2e5" locType="sr" locEndPos="38" urgent="true" hash="-1769734618" locEndLn="92" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="4" srcRngEndPos="38" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 92] Duplicated code in file 'DeadLock.cpp'" rngLn="92" />
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="3" srcRngEndPos="37" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="118" srcRngEndLn="118" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 118] Duplicated code in file 'DeadLock.cpp'" rngLn="118" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="87b1b809-a7b9-3d4f-af3f-a415a8951b05" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52254b2e-b953-34a7-b867-92b3c3f63e96" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="9d5988ca-f085-3786-a2cc-d53b67b77117" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aceae9da-6787-3f2d-ba5d-0cf429a9ecdb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="e3501d9e-fd91-344c-99f4-21f01320a3fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f10f5a5a-4843-3306-ad44-1eb3a267108f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <FlowViol msg="&quot;participants&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;participants&quot; in second critical section" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="94" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1511312469" ruleSCSCMsg="Usage of &quot;participants&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="93" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-113188255" lang="cpp" violId="627d743f-b757-3f66-84f2-45e3553fcd62" locEndPos="0" locEndLn="94" goals="0," locStartln="93" sev="2" locRef="4" tool="c++test" lineHash="-1511312469" unbViolId="f8a5aa43-bd75-30c2-b5fc-e4c3da7d0731" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType=".C" rngLn="93">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" ln="98" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="98" srcRngEndLn="99" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType=".P" rngLn="93">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="b04ad66f-651e-36ef-9fab-f0e1e7a2a31d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0890c94-8652-3d80-a27b-2afa2405e9fe" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="3a34e1cf-8848-318b-b7b8-b6724621693d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a2b8058-aa65-326d-9d46-b88a998198b7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="ede6182d-0737-36a6-a489-d57387d687cb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48620c64-6af6-3db1-8887-9f4c0024a57f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="cfca272f-5c5c-378d-880b-5edd7fa3a8d7" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bf0d849-a437-329d-b55c-e642c9740b0f" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="c3334646-3aab-3500-b62b-ee930c93a61b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd500fcc-c3ed-356a-9ed8-1b26007da02b" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="116f430b-fcd9-3221-b040-92ea850b79bb" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85496d14-7c36-3e60-a7d8-1ca37c0af108" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="c300e606-73ac-3f5b-836a-dd1f44290a29" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63845458-2b1b-396f-8d6a-dd8662baee7f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="a4017c8d-72cc-391d-9e97-a20f4e03c79e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb9039c8-24b7-364d-934c-c625a8b6eb61" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="58d9c0fc-ba69-3838-b607-d3b4cf7f8794" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22b91e7c-cb16-3885-bc0d-cdb412a423e0" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Variable &quot;position&quot; declaration was found in control statement" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="3" auth="yshi" locRef="4" rule="OPT-10" lnHash="-1511312469" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="-1511312469" unbViolId="6ebcdd33-b3d5-3422-a67b-05efe10a7ae0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b3e7b05-455c-3a05-a238-d55a60fd78df" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The 'position' variable should be commented" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1511312469" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1511312469" unbViolId="a04c0a6d-3081-33b7-997c-34d83a4d8c89" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ddfd037-045b-3abf-9b83-caae015e808a" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The 'position' variable should be commented" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1511312469" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1511312469" unbViolId="884463e2-bc9b-37c5-926e-65e91bead8b9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c2fe76f-caac-3604-87fe-ad75747ec5a9" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Variable 'position' should be declared using 'auto' specifier" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_8-a" lnHash="-1511312469" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="-1511312469" unbViolId="5f8898de-5237-3f26-a7e7-caa585a513c3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff8f70e2-86ef-3436-b9a2-191f68fcd766" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The definition of the 'position' variable should contain a braced initializer" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="-1511312469" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1511312469" unbViolId="7e03e33d-72da-3839-a911-d0c78166f4e9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="200c80cc-828c-3227-a6f3-4364113b5663" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The definition of the 'position' variable should contain a braced initializer" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="3" auth="yshi" locRef="4" rule="CODSTA-MCPP-38" lnHash="-1511312469" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1511312469" unbViolId="69bb6687-6856-3909-9db1-b0696adb608c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d7200e6-cdb9-39d2-9202-14135cdeb337" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The 'position' variable should be declared with the 'auto&amp;' type specifier" ln="93" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="93" sev="2" auth="yshi" locRef="4" rule="CODSTA-MCPP-08_a" lnHash="-1511312469" rule.header="Prefer 'auto' to explicit type names in variable declarations" tool="c++test" lineHash="-1511312469" unbViolId="f1693db9-9ed6-3dd9-a7ca-84c95ca2c942" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67aa9134-03d7-35eb-b5c5-65952e919050" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="500222a2-e287-35ae-af3f-1fe2fd92bfaa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f52768b-7871-390c-954d-603089455230" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="43b5e187-4e71-3f2b-877b-d07761016bf6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cf961a4-65f5-3d6c-9356-264f27cb5bd1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="ad844fc1-3930-3626-896d-45055fa899c9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6731ebc8-6d6f-3fb4-9a30-655793b86d77" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <FlowViol msg="&quot;velocityArray&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;velocityArray&quot; in second critical section" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="95" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="929435952" ruleSCSCMsg="Usage of &quot;velocityArray&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="94" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="189199709" lang="cpp" violId="b22c6b16-aadb-387d-a96f-8b85373e5281" locEndPos="0" locEndLn="95" goals="0," locStartln="94" sev="2" locRef="4" tool="c++test" lineHash="929435952" unbViolId="a21f4130-735c-3b20-a616-db437f502c6c" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType=".C" rngLn="94">
          <Anns>
            <Ann msg="Usage of &quot;velocityArray&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" ln="98" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="98" srcRngEndLn="99" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType=".P" rngLn="94">
          <Anns>
            <Ann msg="Usage of &quot;velocityArray&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="aef14757-4b82-3224-ba81-e09bde7e64cc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4d39a38-ef0a-39b0-861c-44a318849668" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="50946e91-01f0-3632-b111-613b8ecbbefc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4db48a2-edee-3aca-a0a8-23319887083a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="46c40440-e6d6-36ef-9741-c9dedf0d51c1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="feafc6bf-9539-3b66-bab4-03b02e1753f0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="2a8ed0ea-98b8-3de8-b06e-327a4c7e4d68" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3b2ddd3-d6a0-3d84-8350-99ef3b7ed5bd" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="bf530a40-06dc-3637-b3f1-af44ed6509a9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9358ea18-fcd2-3466-8c5c-1f838918be80" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="54ff50c4-c494-3aa7-adcc-830afce1f90d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3853c601-b07c-307d-94e1-6dd27f1fae8b" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="d8f0fc60-90ad-3dfb-8192-f116b18eb5b2" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d948ca6-7d24-3c3c-a27a-25423e0e74ee" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="ab6d86db-85fc-3abe-8870-65a7072ae923" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="078592ee-9a7c-3175-a468-d1f5add07e91" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="8925056b-a661-331a-84f1-4bfb8c673e42" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be98299d-2b20-3321-99a2-74e7a0af68f0" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Dereferenced pointer type expression should not be used" ln="94" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="94" sev="3" auth="yshi" locRef="4" rule="PB-01" lnHash="929435952" rule.header="Do not dereference pointer type expressions" tool="c++test" lineHash="929435952" unbViolId="f7596176-7d68-3423-a4b9-2ce56bb5b09b" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bd80c98-c107-3c5c-8d33-dcd4865efa56" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="3141e99c-993b-38a0-9e4d-d63fb6b04604" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0afc6005-3005-3101-b370-3834791906ba" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="15eac39e-68d1-391a-860b-62a70b580352" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66c0c9ca-7b92-3b42-9b33-cefb14a56e76" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="314a47d0-c16b-3c8a-93df-4128053eaac6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37346de2-509c-3b5a-935f-4e9e85177084" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <FlowViol msg="&quot;ring&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;ring&quot; in second critical section" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="96" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1599411881" ruleSCSCMsg="Usage of &quot;ring&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="95" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-681850023" lang="cpp" violId="fb9341f8-3b93-3bab-8dce-d20a42b64a54" locEndPos="0" locEndLn="96" goals="0," locStartln="95" sev="2" locRef="4" tool="c++test" lineHash="-1599411881" unbViolId="1721064a-625c-350a-b945-f02716666061" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="ring.contains(...)" ElType=".C" rngLn="95">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" ln="98" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="98" srcRngEndLn="99" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="ring.contains(...)" ElType=".P" rngLn="95">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="9f1aac7b-3265-313f-9b8f-3cb1da1e3a01" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="425b6fe7-5a21-34db-8599-83c9c6f82a6c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="0865ca24-14a4-3436-9c90-724661aa48ca" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fd1757f-15e3-3333-a575-b664b231b6f0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="9fd64b69-78e5-3390-8045-b9973b0d002a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f474881e-c56f-36b9-9ea6-98749da7e1c4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="5228a5ca-d97a-301c-8e61-3c904ba878a8" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7bc6d9f-82d0-3f68-9a45-754e67ab1a74" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="aac9971a-a393-315c-9a4c-6a5d37b4cc16" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bad9ae74-695f-30ee-b1e3-318b6021ef69" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="da157ccd-7266-3c95-8535-c6c28259d6f7" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c21b9b67-aa5a-38cf-b254-bc29938d42a9" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="c27206d3-d606-391a-be02-972a3ec18490" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3fdd188-82e4-396a-87cf-8a139e2a5ee1" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="501246eb-967d-3f0d-ab03-cbd240a4c6cd" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b279ace-d3a1-30f2-b434-feef9e8011f2" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="c8ae33bb-29d9-3d68-a395-ca3017ab6d49" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9749d117-bdaf-35fa-b0f7-6592a775cf2f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The global function 'assertion' is called without scope resolution operator '::'" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-1599411881" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1599411881" unbViolId="2f45d97b-e7c6-3aa8-b30e-2ed5c44dfb0e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d824488-d624-333b-aba2-2ef126064c7a" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="CWE-798-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="a38bc8d6-4b29-37d1-bad3-d6ae42237a8a" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1dac201-2ed2-315c-a4b8-2fd7037fa9b5" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="5" auth="yshi" locRef="4" rule="CODSTA-203" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="c7bd9f23-d535-35dc-8220-f16135170c58" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a7ed124-601b-33a6-a606-5781142e3497" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="1" auth="yshi" locRef="4" rule="APSC_DV-003110-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="015ac1ce-aef7-36c5-9481-16fa0e67c219" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81d74398-34a8-38dc-876f-fe1456eb0e54" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="1" auth="yshi" locRef="4" rule="CERT_C-MSC41-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="73d21215-54c0-3ae2-b99b-fc4377031e5d" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b677d94f-0d03-3818-9648-d620d68d02e5" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A27_0_4-d" lnHash="-1599411881" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="ffa1e336-50cb-3803-bf20-2390e759020e" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8de1f0c-3356-38c6-abe8-b5f21e5e7b76" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call" ln="95" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="95" sev="3" auth="yshi" locRef="4" rule="PB-76" lnHash="-1599411881" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="f1e9bb53-eee7-3d45-b8e3-8ec5075ebbdf" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8de8f0ea-9b7a-3749-8b27-d89e00b0617f" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="c7df5621-be0c-341a-b849-6b6926a36c74" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1b22fd2-0783-38b3-9647-58d921fe112b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="40cc1a69-4000-368f-bcd0-c277507b789f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a332954-37fd-301b-9614-de6b61cf1b4e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="952f09b5-4728-3841-91c4-5bed45f5f970" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e02e4c60-0f71-3268-9c2b-458b767b3bcf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="7909fb88-fd4d-30c3-b82d-8c9ad33ee69d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d7c8554-215c-384e-b922-39c638cb42b7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="d6bd3257-1331-3ed3-acd7-a0d1f946115e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e08f5db9-3c4b-38d8-821f-88544918f406" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="af4191eb-b383-390c-9ed6-2f8de540ab7e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16c17986-0d33-3e84-bb38-0ebb68f7a28e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="ff204a8c-a49f-36ef-a880-ec0eb93a0e72" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53cd29ed-e321-3368-95b1-245b19374b55" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="72898274-ba9b-3612-8524-7f0b61764928" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c05dabf3-2f4b-3679-af91-23c222f049dd" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="fbb9f950-878b-3c71-b608-76b2ec6b220b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="666800bb-eadd-329d-9d71-9ef6b562fd0b" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="bdae818b-99a6-3de9-83f0-90e9f7c1aa77" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb7beba6-7ed9-3232-9e3a-99efb55ad64a" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="3df5137b-4e03-3c33-a04a-112c015a7662" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="221946b6-6da3-3b73-ad7f-e45fda276f65" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="a37015f9-ceba-3588-8df2-fdd3f68afb98" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2246c81-c6a3-3961-92d1-a1f22df6d240" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="8995b9cc-678c-3cb6-9fc1-8b1e62b8f7ba" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="526d04f0-3112-3c2f-a8d8-1bb72a75a380" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="127770fa-d51e-393c-a79c-915529660d7d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfa182bb-0719-3d52-98f6-9cb1292753bf" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="190e4a38-13ad-342b-9d4a-defb81e16c25" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb3cec07-1eec-3f8c-b900-7b59b5dab731" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="bac6c444-1ad2-3a85-acc6-d09cf6bb379f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfede371-d6be-3467-adf8-4b2865c68ed6" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="408f17ed-53e9-3876-b907-f8b1c94806de" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cd774c2-caa4-32fa-ba67-46b3aced227f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="bad6fc2c-4978-3004-8f2a-551397744342" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b212f471-d0bb-39b9-be33-72ed23f95124" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="969791be-6431-3b9a-b331-0cff01ca49fc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e73cea8-31a6-39b1-a464-1c386629db4f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="2c7c7f90-5044-3176-bc09-d3026d4f237b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4ed52ec-a946-398d-979f-0c1ee96e7b28" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="55c06019-ea41-31d0-b702-f2ef2863f0be" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe71432e-0e21-39d7-9f53-1a4c6c2ae846" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="23b9e198-3aa2-3096-9ecc-f94bdd5992fd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8274905-3f4b-3d5e-95da-de9e2eefa726" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="5f61c6b1-d5f1-3316-8770-7b2deaafdf8b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33a590b9-ea6a-3dd7-8689-e3654a3cacf8" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="31130f5a-1e82-3bc7-8eba-b9b5a44eba8f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d6a5c1c-29be-3c95-8f11-3f11d3d93de4" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="5b3a2264-6424-334b-ac84-49f7f1efc6a3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3218459d-d0f7-3b3a-8799-e9813c4c4e31" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="e3d06c78-18f9-39bd-af6d-962b7fbb4e49" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bacb97f-9946-3c57-bb4a-2c66f7b947f0" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="8b4c2535-619c-3262-9667-e0400083c3b5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8a8368d-c5f1-3369-b2a7-c53f8b48af7b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="d7296b07-3c4e-3eea-92b3-2bb63b008faa" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff67170e-f05e-3bba-8b55-c86bf410dff6" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="0e77a04d-2a98-3c2f-8134-ff64be193358" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d546fa7-d539-3595-90a3-ad91a2e48c12" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="2dd3cc53-0181-36d5-9848-042512134f9e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08621ee7-5bf0-35e0-a525-6b893512b7af" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="b9a67c26-b7a7-3127-a05f-5c4025d2dcdf" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da5404a4-860d-3c18-af4c-fca050d12f9e" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="3dfea8a8-0fdb-36d7-8de5-5708067cf30d" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59aac114-2bb1-3805-b820-f749ee3dac50" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="f43aec70-5994-36a1-ae86-eec00bda2dd6" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc1fe238-dd12-38be-9872-5dda35d6e0fd" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="3fd8ae63-ad1b-3b3e-a685-c27a35689afc" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d88bbdb2-edef-3d87-bb07-d16b838de327" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="dc2e6a94-9f81-3bf9-8785-a6ce783504d2" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef40871d-1d90-3e98-9702-86684934f2d0" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="96" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="318e31ab-b278-367c-a050-874b0c4a3fcd" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="721d5eee-988b-3522-a403-4fd2974337e1" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="cebec6c8-3b16-3f3d-b5b4-09ed4671adab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b987fec-8045-3d4b-bbd9-1c856659dd51" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="1d52ccb0-58b2-3d50-a870-5aff3c18bf8c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="802c31b4-ac99-3fe1-8c80-b5bc185cbe1b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="a2fd539b-52cf-35c7-9b8c-3b31b7c954e0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3ce72b7-6ec1-3026-befc-69b8713db70b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="dc236fb0-f82d-3c11-8a82-0a23a7608b31" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61177559-4c54-3131-b031-89a20ebb9215" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="c3095170-167a-3cb7-8e99-d9c2af8eb00b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d37e0d18-7754-3483-a1f7-b8b348223d8a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="adf4f76b-e66a-3123-889f-5b315477f051" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19a32a0b-7ce5-36f2-a15d-a5b7ab6120df" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="f427d9a0-fc96-3fb6-8ea5-28c4fe316a50" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9478216-8174-3eba-91a2-ea81bbf20f72" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="1e0e625a-2aab-335b-bfeb-f1f51d1080de" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83d5f978-7dbb-33f3-9cd2-8fc2a4f5e517" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="1d2ea6ad-4471-390b-a09a-74a688f52f29" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="089d5ea5-a7f0-34ef-b8b2-ecb5ca42c682" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="55740082-d530-395c-8859-f3dd0b1c8b3c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="697f7679-9949-3819-82c6-f44b0d338dee" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="a5d01bcb-ef10-3904-9670-c3ca0b5e1b3e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="582d1bde-7e13-3035-a921-6d6414f3cfd7" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="56596490-bd8b-37a9-b23b-cc7c455f7b82" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de44cbe2-d9e5-3938-b808-1f5e744c1169" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="6a936c25-2fce-3bef-a179-b730031b5620" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="347d9735-26fd-3425-baa3-e5daaa5deffa" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="cfe29a8e-7da1-3d54-a329-56385c0a2d0d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36c0cf01-968b-32bd-8571-b17b61709e0b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="37f92b4e-e41b-3407-b23e-fc5e57d4cec8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbb79bc3-b97d-3627-8e86-44f8c5f6ddd1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="dbcc62b2-7db2-3bac-8226-8fa7b0aa83be" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02b7ba77-72a3-3378-8ebe-b45e4d2fc5ba" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="435d4172-ebc8-3db0-8b68-9ceebe1ddd2d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0f1789b-00d2-3186-b070-ef57b391dedf" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="550a8262-b301-3cf8-b73c-bced18d3b053" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25707aee-f35d-3492-a06c-0a695fe12b80" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="9d1a05ed-d5d4-3230-94d8-2a8bca204486" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c52d8cd7-ff12-3bed-bd39-7762da96ff2a" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="53e6b582-e51e-332e-90d0-6527c592f59f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ecea60d-52aa-3e2b-9d7c-e873e0ef808b" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="5e93677d-9e2f-37d1-be99-cf57199fa371" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01bcf9ed-6b4d-3247-b39c-bcb1d1fa2c01" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="8b4b95de-dffb-367a-a940-08fca92e81c5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="488b8ebc-1247-3bbf-be64-e37a00a94442" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="ff30ef4f-54d1-3a5e-b98e-4354b5a96470" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbe9d477-4bf0-3bb0-acfd-4df722978dd8" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="a646416f-accc-3ef3-a377-71b0e2361108" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4234a416-7a3f-3298-b04b-fcc02c3addca" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="ba57cc19-0b04-3226-ba8c-440be4ee764d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78ccc250-bf19-3721-be1d-c9108da75157" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="6f2198eb-3a93-319c-a956-635c80c20772" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8471c8b5-d084-3acf-9ad5-151cc843e884" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="0358ef00-b0ab-31ff-8558-b7c28f041f1a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af4a54b9-423e-3268-ae88-677802e5b310" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="aa65e424-458f-3003-8035-ce171edbf9b9" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02c0d46d-afca-31f4-aaa5-1bd015cbfbea" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="1b003740-72ed-3b9e-b72c-5cbbfdf16651" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="713973ea-e35e-3e59-8448-5e7514fb5286" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="00a41d60-69af-3fd6-9483-4fd41ecc726a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="254081f2-3a9d-38ce-86b0-124eb21616d3" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="fbdb3f0a-698a-3ea0-ac0b-cdd99ea67775" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8cdf058-700d-3bdf-b02a-9923f328f319" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="6ec85fc1-2fb3-3be8-a7d6-e26d39ce5097" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09680ca7-8a5c-36a0-ad65-08aeccb13d3f" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="19c56837-eb7e-38ff-b961-fa1de3213f52" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f250e9e-0881-3fd4-a586-7b5d240b3c80" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="c6243925-8216-3e8b-9952-01b0c279635c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="063ba9eb-6417-32e2-9e4d-8613e872fe97" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="8b96fc4c-8b66-39dd-b1a2-39957296fd28" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1fc3a99-419e-32e1-b9f2-0c48fc004309" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="97" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="15aa608c-cb0b-3b96-b8f9-a5c8e3e26469" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="481ec675-8576-3fd1-9efa-37e06756e780" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="520ea949-8738-3ec5-9343-71cab25ebf07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e818a147-2def-326e-b472-bd68de77a1ef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="f650c92b-d55a-3e58-a5ad-22a6a123bca4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2de083dc-6e90-36b5-99e0-ce822d2778e3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="24624b09-16b9-3c54-9420-c38f2c4d2d10" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fe81dfc-cd89-3e16-8c2d-8487b630e68c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="9d60a82d-ed57-368a-b2c9-c0451f8f4540" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="001dd290-9d39-30ee-8478-36bb6845f0e4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="f74f90fd-61e9-3ede-b364-efa0c0b935d6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eeede9b5-6ff2-3581-aeaa-80a6233336e5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="2022b9cc-6cf8-385a-8ffd-2f26d32dd87d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bc46dc0-703a-39e6-95bd-5fca946b56be" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="bff0262f-dc80-37bf-aaed-ecfb2977b0b6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff463567-63c4-33f1-93b1-c61828b13546" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="71e2c8ed-5a5b-3728-9109-03dec520f0b9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fd716d0-5466-3af8-a9b8-84aa673cda83" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="25a56a42-bec4-307d-aba5-1af8931fb5d7" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="284bccc3-23a8-376a-b82a-65f3fed5558c" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="75f07769-6f81-3134-918a-ff1d33cb2026" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b8e36b9-12a1-3149-a0cc-f8876511627f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="a3ea7d8c-2236-3cea-ba6b-c3d004d9b047" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6e542d8-7ef9-30fc-ab49-a984d768d246" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="96d87ea4-b516-3c98-b497-92f1d52b8f56" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ce1ad59-134c-3353-8999-9c0e7f9aa04b" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_unlock' is called without scope resolution operator '::'" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="793595747" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="793595747" unbViolId="66d1d067-6997-356a-b4a6-25ead42adf66" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a7e557d-f3fb-38b1-a070-5ad8880cd0a6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="55771861-f231-31ba-a228-fbc677cb1bdc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f261d58-b539-39af-851b-1cf22cafaa96" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="03cca8dd-4dec-34de-b64e-a5e8be53da46" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26bbc7c7-0303-3bfc-b4e6-60d37cc946ff" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="d53a6318-c949-39ba-aa5e-48f1ecf4c409" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b283f363-fedf-3c3a-a74f-aa7d28e46d46" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="793595747" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="4dc5fb53-6d46-3498-aaf0-827c50bb167f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f1904fa-da47-37df-be66-a7dd7dcc7f70" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="edb0b4dc-f5b2-3fe4-9c1b-ef713f8c7025" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc4bce69-7025-32ed-8188-2d7a1f9af898" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="8b2b8012-3b0a-3789-a7a5-ac52b83fcc50" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b31e6c0-fe8f-375d-b28f-32d5c338eb23" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="1f2bd68b-60c8-312a-8ff2-e97dec5b5de4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a5d267e-6a84-3e1f-b7e4-6722390eb5d9" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="5671626c-f72a-33e0-b255-abbb64bd4c74" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94d7e4a4-9b39-3281-9c60-14dc4aa9ffbc" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="29e79a12-f54c-3598-9365-e4f9552d5bc9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6e7e1ff-8e38-390e-aa4b-50b0f7337b22" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="7a7fe50e-44a7-33c2-a4c8-94d8ff7392d5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afa79e4a-5e7c-3324-abbf-f1a0600d6049" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="793595747" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="4edacec2-4d54-3f0c-a44d-a6724a0ce018" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8305a73-5189-3f40-b9ea-a28827b9851d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="793595747" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="e3b5dbde-93bb-33c9-8297-9565a12fe149" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfe14def-90eb-3bed-b9d4-476541c27751" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="793595747" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="a4327c93-cc69-3825-90d8-1c72589abbf1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ed757a1-e5c5-3ceb-bf1f-a2830c5bdf4c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="98" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="793595747" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="793595747" unbViolId="f6f0a7ef-03c9-32be-8a67-03851ecdaead" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e18010b7-6833-39a8-a9fc-2046e2dbc338" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="99" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="96c1891e-63c6-3fde-aabd-f115df66a651" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ed19ac2-6515-36bf-b7bb-b10b27e43f80" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="99" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="cdb6b4c8-300a-3d96-907b-e78223e57965" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a80a61a3-cd5b-31b5-9a13-fcd5aa61f68e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="99" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="87a147e9-a0b1-3129-8eb0-e469a71394e0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73176afd-0601-3c2f-8951-9dfee4a8b573" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="99" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="d7f85f1c-5d9a-336f-bcdf-09e6838443f2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fcc1f6e-9a49-385b-8ba5-3d72853a6c1f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="99" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="13515e64-a776-3bbf-94f4-9a2568dbff84" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1df3c62-4d04-31be-be17-f6eb65efa991" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="99" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="8e519248-dfcc-329f-9be0-874e9aea19c4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c55921b-d19b-37b0-a1f4-cd7ee057bbbe" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="99" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="593df10f-421c-3312-80dc-d50fb92b77c7" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f96fe13-233f-3a97-be6c-c4da7fc78805" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="99" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="d928b523-5d3b-3d62-9952-4b75be68fc0a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="963561ca-aadb-3283-899a-d68243fa25a5" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="99" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="7775051f-6f29-320e-ba43-2cc3407fed25" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="575c251f-5732-3db7-bf59-570215d0209e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="3c5d7d77-693f-385f-9fd5-2e53506cd95f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07db38cf-8e98-32ef-b468-c007261233f1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="cae7d18f-8577-3543-864d-7dcc698c8f32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fe47209-c7d5-30f8-8c29-e1569a105c59" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="f90345f3-f13e-3f61-bb16-a4c740162506" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d46ca05d-e2d5-3fbf-89f3-9121c8652af8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="deefede0-d6a9-3e13-acd1-ad229b3fbf28" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e269c19d-0947-3d09-b68c-e633fedd1072" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="a0e78bd2-cfcd-3ff7-8489-d3658b63ec8b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="566a4533-fe9e-3086-a62e-8edf55e2c36e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="3bf8f5c4-857a-3645-b946-b62da90edb5c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd0d8ec9-f205-3842-b6f9-0ec091d5d4e8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="cd4ee33f-3b74-3498-97a4-a1f24d946d6f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b7cee66-189e-338c-81c8-74df8c45e901" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="70f67060-b73b-3277-b7ba-2c8da6152cb8" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42989bed-8f17-39b3-995f-0dbb54605523" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="c1c904e2-45f9-3cfd-a167-5902e7ab3dcd" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="175787d6-c70a-3327-ba4b-1be92388d4ff" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="The global function 'sleep' is called without scope resolution operator '::'" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="1234365944" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="1234365944" unbViolId="444f1fc0-b367-3fdc-a3e1-6545abad8979" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2de866a3-d030-36d9-bb83-68d0cb82514b" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="0b5cad03-9e04-312d-94c8-f48435cba848" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6c76903-7c29-35d8-8ba9-096ebf692d36" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="67a067c7-ff09-3101-9f96-ed5f7b8163e3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c33efe0-86c4-3d19-acee-500ad4e00d98" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="53d4aea8-436b-34f4-8110-d1510ab6c7f0" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c527e457-76d4-337e-aab5-8f667f391067" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="1234365944" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="76eec324-a937-3f4a-9d55-026e2ba24fea" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27c6301b-d96b-3a96-b245-649ae28980fa" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="7aeaabd8-4ce4-3cfb-ba8e-cf89175295ca" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88e390af-7ddf-3f9b-b1f1-fd84493fe0cf" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="05133e72-dd9e-31d5-b47d-863ba97be959" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9c3000c-1786-3486-a39b-6b689bdd3abd" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="8ba7c73d-7cf9-3b75-a494-2bc62034c3d7" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f6637a9-2f0e-3e67-8eee-210320eea1b9" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="a0ff7f8b-2d2c-31aa-b45b-ec127516dbad" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4893873-421e-361b-966b-affd0f5ba2a6" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="0c62a007-5b5a-31f9-903e-336ebba9bea1" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7aba29fa-3d0e-3b11-95b1-cee341a222f1" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="4d0a0c93-7993-3447-88c4-5a38f04a3ca8" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f520290-4213-34ed-b757-93d73dd4f219" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="1234365944" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="31b054f0-033c-3abe-a437-165727fd0b01" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab236baa-eab4-3c57-a037-d312a0e6407e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="1234365944" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="12d957c2-2e41-368e-9a3d-3950b25eaaca" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0933a8a5-3e19-3c44-b810-4c359d96053e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="1234365944" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="c890b806-5bcd-312b-bebc-16d8e28d9a71" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="633f0b2e-e12d-3e5e-a823-8c62c77a43c9" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="1234365944" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="1234365944" unbViolId="3f90a87d-f0d5-3a2a-8a1a-ccde5d88f107" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffd45188-cb03-3939-a2f7-48c434f113c0" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="The type 'int' of function argument number '1' does not match declared type 'unsigned int'" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="3" auth="yshi" locRef="4" rule="PB-11" lnHash="1234365944" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1234365944" unbViolId="8f0d2b6f-1bb8-3512-8a6e-ae4dbf035044" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="289ce1fa-d489-3278-bbee-6929f3f3a945" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <DupViol msg="Duplicated code: 'SLEEP(STEP);'" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="3" auth="yshi" locRef="4" rule="CDD-DUPC" lnHash="1234365944" rule.header="Avoid code duplication" tool="c++test" lineHash="1234365944" unbViolId="81a9b608-d1ec-3c5d-8db5-39bad33727a9" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="635271ad-569e-3778-9899-29b9fa8a6006" locType="sr" locEndPos="15" urgent="true" hash="-1769734618" locEndLn="100" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1234365944" ln="100" srcRngStartPos="3" srcRngEndPos="15" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="100" srcRngEndLn="100" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 100] Duplicated code in file 'DeadLock.cpp'" rngLn="100" />
        <ElDesc lineHash="1234365944" ln="128" srcRngStartPos="3" srcRngEndPos="15" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="128" srcRngEndLn="128" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 128] Duplicated code in file 'DeadLock.cpp'" rngLn="128" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="1234365944" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1234365944" unbViolId="128c9f57-dc8a-3885-99fe-e9da5c09d003" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ff51d00-c475-30fd-b790-614c3161a883" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="7663dace-e579-3e29-ad4e-81ae4413aea6" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddddfa49-09d4-3ef2-b0a7-0c9688b08aef" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="3" auth="yshi" locRef="4" rule="MISRA2004-10_1_a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="804ae902-d360-3b45-a004-894aa7f7f04d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e4ba956-e2f4-3181-9628-7274d479e879" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 20" ln="100" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="100" sev="3" auth="yshi" locRef="4" rule="HICPP-4_2_1-a" lnHash="1234365944" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="1234365944" unbViolId="6f908718-8247-34f7-861a-95cdd7aa06fb" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b92853e-326e-3e4b-8840-bd01df4a6369" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="101" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="4e67ff0c-9100-3793-9ea8-f93681af1631" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27388ef8-7914-356a-b271-adf11b90c21c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="101" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="734a7cd7-212a-3e24-95a4-0c27e3a7cc55" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bac27232-91b3-3099-8662-c7e606517871" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="101" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="98de5fa7-7128-3758-8ec0-937200b0b31e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc1b9df3-188e-3bb1-a15a-6e3aacc550e2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="101" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="14d1a7a7-e42c-3146-852e-ea8df3baffa5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="088e5189-0fcf-34e9-b06e-04f65f9abba0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="101" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="f0607db4-c154-3b17-abd3-d19170af5d4b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dec3ca8d-6627-351a-9f6b-e5cdaf81a919" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="101" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="8a2314a5-bad7-306a-a10d-eb1d6582fcaa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02130793-5539-3f2c-9580-d053272dc8ab" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="689c9872-b2a8-350a-8d95-6704667f5ab4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87d87a59-28ec-3dd2-833a-7d68503bcfa4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="61595688-cc41-37bd-b864-a026ee87c45a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3406045-af37-3ff2-93e6-46c228850254" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="295364bd-43e8-3b66-862c-7cbbd792ba34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c05f1826-646a-3cdb-b2ef-59c1db2e108c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="d3515b7b-d16c-3672-a9a4-992563dd6b58" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba0d6e6d-dbbc-380a-a912-f87a006825d3" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="c0017b00-6c23-3a71-96f9-ab784dc38181" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f3f022e-f969-30f6-8e78-b6becedc2197" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="e273ed1a-b336-3d52-affa-92a9d25f40ee" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fd3114d-e42b-3fab-b6b5-713ed1b1eb75" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <DupViol msg="Duplicated code: 'return 0;'" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="3" auth="yshi" locRef="4" rule="CDD-DUPC" lnHash="-1688062501" rule.header="Avoid code duplication" tool="c++test" lineHash="-1688062501" unbViolId="461434e7-ca45-34cc-be37-fa07a67eeb48" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="c9b6ad94-a6de-3ff0-916b-391abd5f2442" locType="sr" locEndPos="11" urgent="true" hash="-1769734618" locEndLn="102" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1688062501" ln="102" srcRngStartPos="2" srcRngEndPos="11" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="102" srcRngEndLn="102" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 102] Duplicated code in file 'DeadLock.cpp'" rngLn="102" />
        <ElDesc lineHash="-1688062501" ln="130" srcRngStartPos="2" srcRngEndPos="11" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="130" srcRngEndLn="130" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 130] Duplicated code in file 'DeadLock.cpp'" rngLn="130" />
        <ElDesc lineHash="1599597842" ln="13" srcRngStartPos="1" srcRngEndPos="10" locRef="1" locType="sr" srcRnghash="-1257393797" srcRngStartln="13" srcRngEndLn="13" srcRngFile="/FlowAnalysisCpp/NullPointer.cpp" desc="[Line 13] Duplicated code in file 'NullPointer.cpp'" rngLn="13" />
      </ElDescList>
    </DupViol>
    <StdViol msg="'return' statement should be used with parenthesis" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="3" auth="yshi" locRef="4" rule="FORMAT-25_b" lnHash="-1688062501" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1688062501" unbViolId="d13a6777-238c-3aa3-82f1-97a39d19ee0a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22a20bdf-5e6d-385d-b714-46c957a7866e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_a" lnHash="-1688062501" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1688062501" unbViolId="0a4f4a03-2017-3754-8bff-55e5c8ddb3fa" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1ea6fdf-a326-31b7-ba51-99aca8a1b778" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M4_10_2-a" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="a78cb72a-5e9a-3c64-8413-0527d1a7b413" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af6822df-7a41-3a05-befa-d92ed1ac02c1" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="2" auth="yshi" locRef="4" rule="MISRA2008-4_10_2" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="c0e49910-039d-3d0d-93eb-75ea3991edcb" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="915fd807-b963-382b-9683-f6439810e09e" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-63" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="4ee5c015-fd71-3d7b-91b0-d00e84bc55e9" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9bf5356-962a-3f9f-841c-639887348ae7" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-a" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="4f5c3156-5066-3d0a-b658-222ad372a466" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c65d5686-f1c1-37d0-a069-83cddec79e0d" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="f65dfa03-a330-3cf0-a1ba-a052232b6a45" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25f1fe1d-a128-339f-b069-5968fba5a795" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="b842e791-7572-3576-a7c5-0cd029b6fe03" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="206b9dce-9af8-3e0f-b0ca-aebb7c94e877" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="1555cd49-2c19-3175-a9be-b3c01468a74e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c02a39fa-06b0-3d0b-a9b5-78ba571c11bf" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1688062501" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="325b62c9-29a9-34e5-8e47-5c565a2f8dcc" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca1005d8-da53-3aba-8838-d8c4564b6c5c" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1688062501" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1688062501" unbViolId="d4bb5179-83df-3fc6-b8ac-371df36170b9" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d6fc9fd-9134-3348-87a3-47c8a2d4a61e" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="102" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1688062501" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="cf3dd2b5-f83e-3319-895e-073bc9ea003a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3788a98-5dfd-3454-8f42-7293ea288f60" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="93" rule="BD-TRS-LOCK" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="579201482" lang="cpp" violId="fa3ee360-b164-314d-978a-92d8f98ee713" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="1" locRef="4" tool="c++test" lineHash="404" unbViolId="5dca9284-191a-345b-b725-8b9de9305f66" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" ln="61" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="61" srcRngEndLn="62" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" ln="103" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="103" srcRngEndLn="104" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="93" rule="CERT_C-CON01-a" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="530300502" lang="cpp" violId="0b790f15-242e-3fdd-83db-a5481946a43a" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="3" locRef="4" tool="c++test" lineHash="404" unbViolId="1f1088f6-c19f-3bf2-8f2c-037f3e541215" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" ln="61" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="61" srcRngEndLn="62" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" ln="103" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="103" srcRngEndLn="104" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="93" rule="MISRA2012-DIR-4_13_d" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1275301858" lang="cpp" violId="92ac64b0-b624-3f26-ade5-869432ebbfb4" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="4" locRef="4" tool="c++test" lineHash="404" unbViolId="e0967555-e4d7-38b2-b238-2da90d5c0699" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" ln="61" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="61" srcRngEndLn="62" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" ln="103" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="103" srcRngEndLn="104" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="93" rule="MISRAC2012-DIR_4_13-d" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1738045475" lang="cpp" violId="dfe928ef-c672-30af-a63c-da5f19034b3d" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="4" locRef="4" tool="c++test" lineHash="404" unbViolId="39f8e4d3-f46c-3a13-9488-cf32c2d954a2" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="90" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="90" srcRngEndLn="91" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="91" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="91" srcRngEndLn="92" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="92" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="92" srcRngEndLn="93" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" ln="93" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="93" srcRngEndLn="94" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" ln="94" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="94" srcRngEndLn="95" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" ln="95" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="95" srcRngEndLn="96" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" ln="60" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="60" srcRngEndLn="61" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" ln="61" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="61" srcRngEndLn="62" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" ln="103" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="103" srcRngEndLn="104" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="103" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="cc7fb4f2-120f-3624-9225-06c64568f129" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a783f0b7-4f45-39b1-8978-5e2f3e236991" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="103" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="103" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="e18f9170-1cb7-3d94-91a5-be9d1c869ff4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f69d8487-e930-3127-b3fb-bf358e276b1c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="103" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="103" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="6e80e988-8e9f-3f21-b57e-c46f4cb25969" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c90674f4-78f7-3830-9e84-56db05c43c9d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="103" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1765880527" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1765880527" unbViolId="7ee19576-7224-3092-ad04-1fac65638026" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a87b817c-4abd-33ef-a34a-2be1dc520ed1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1765880527" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1765880527" unbViolId="8966c276-3173-3ee0-92cb-3a53bebcf4cc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="385f1d4f-8abc-3b68-b373-4341c0d8c122" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1765880527" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1765880527" unbViolId="534f0a2e-f386-356c-abd6-930ef5d621ce" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3afa27e-3f46-3a19-b121-54487707f835" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="JSF-062" lnHash="-1765880527" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="-1765880527" unbViolId="4cdddaf5-2165-3474-9520-b72e43f78270" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d5030da-58ce-3401-843f-3bac4b160ff1" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="4" auth="yshi" locRef="4" rule="FORMAT-32" lnHash="-1765880527" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="-1765880527" unbViolId="34702838-4b3e-3648-8aa4-3b04ed8206b8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="657440c1-fe19-3fac-bbe0-580201260a50" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Pointer variable 'currentCameraVelocity' uninitialized when declared" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="-1765880527" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1765880527" unbViolId="8c147f33-4c72-327c-9f17-85fdc66e4ba5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d967b2e-9969-3ebb-9e67-32ec6729eb2f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Consider encapsulating 'currentCameraVelocity'" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="JSF-207" lnHash="-1765880527" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1765880527" unbViolId="aa7366d9-3608-3295-bb93-80561cc06efc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="038c6a0a-b8b1-3989-b32e-ad42ec359026" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Consider encapsulating 'currentCameraVelocity'" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-82" lnHash="-1765880527" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-1765880527" unbViolId="48e64994-e826-362e-81fc-315e6a323d78" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20e3479f-5845-3b23-b276-d27f0d9b5912" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The 'currentCameraVelocity' variable should be commented" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1765880527" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1765880527" unbViolId="7f53a481-60de-3f98-9d8b-e4939e06b303" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5c2cd37-f96e-37a6-9ce1-2b1d28d3c652" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The 'currentCameraVelocity' variable should be commented" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1765880527" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1765880527" unbViolId="15746ff3-da68-31b4-819b-7647fa55c5dc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57195ae0-2565-34ec-9efe-33761c8ddbed" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Use of variable &quot;currentCameraVelocity&quot; with static storage duration is not allowed" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1765880527" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1765880527" unbViolId="ba626c05-8d6d-3e95-8c3e-02c8345669ab" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53ad9969-03ff-36a5-9f15-6628f163054e" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' is declared" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="5" auth="yshi" locRef="4" rule="MISRA-022" lnHash="-1765880527" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1765880527" unbViolId="c3eb8ff5-19d0-3210-992f-fca65ec082e8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27cc2dca-10b8-3756-a02c-1839b7a64445" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Naming convention not followed: currentCameraVelocity" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="NAMING-18" lnHash="-1765880527" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1765880527" unbViolId="b84c2a78-3528-3597-908f-9ca9930125ec" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97c081f4-225b-334f-80e3-7f064d01fbfc" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Naming convention not followed: currentCameraVelocity" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="NAMING-22" lnHash="-1765880527" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="-1765880527" unbViolId="a721f635-bdda-3167-a696-0e0151ddcd0c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="802f1f7b-69b4-3f3d-ae66-4f7f152c9622" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The 'currentCameraVelocity' identifier should have the 'p' prefix" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-34" lnHash="-1765880527" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1765880527" unbViolId="043738c2-4045-3c1b-85dc-2719cd0323ee" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c9234f1-257e-3269-8c1a-4dc9f2983a9b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="4e2abac7-a703-363a-bebd-7d0b84e699c6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="346940eb-37df-3f92-bead-530601177058" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="087cd219-e40a-371a-99af-7090b477f800" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="729df8f6-6e5c-3cfa-8dd1-4959a01a38f3" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="-1765880527" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1765880527" unbViolId="3b50066a-9dfd-3e74-8022-70d6f700dd71" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08f382ef-7bd8-3616-9eb0-2536bf0be157" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="55aead43-76ed-3901-8f7b-e83828729df2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="736c253e-7c02-3cf3-94e4-c37b36f19974" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="2f0d7857-1748-335f-8b71-4e9b2d9da87b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6ada585-24f0-3f82-8f8c-7127d7de066d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="d7a9ec50-6486-3e30-9124-168c216c81e1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0501755e-4081-34a4-8580-e60c73c6f853" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="39044349-27f0-3969-aa53-bec414e56803" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab1e7bbe-119d-39f3-b4df-d0a77a09865e" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The name 'currentCameraVelocity' should be composed only of lowercase letters" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="-1765880527" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1765880527" unbViolId="e60bef84-d003-3487-b373-6b322a5837c9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b103243-e192-3fec-973a-b557f383c5fa" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The name 'currentCameraVelocity' should be composed only of lowercase letters" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="-1765880527" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1765880527" unbViolId="2b6a0837-d9f1-3c80-8912-a9d58b0c594e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ab15a07-18c3-37e9-9a34-62dd4d5011ce" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: currentCameraVelocity" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1765880527" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1765880527" unbViolId="b772b8ca-9ea9-312c-8250-6630cf820332" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de676172-d3b3-38f2-8cbc-15b3c7d5bc12" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The variable of pointer type is declared: currentCameraVelocity" ln="108" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="108" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1765880527" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1765880527" unbViolId="203d81ff-f207-34d6-a2c6-b766848c8671" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="161a96a6-e39b-34db-bf9c-99ad2700ac02" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="2003669405" rule.header="Tabs should be avoided" tool="c++test" lineHash="2003669405" unbViolId="d8ccb84e-3ba3-3537-b19e-da9fa8c113ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e0508ae-b403-38ef-bdb1-ec35010ed3b1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="2003669405" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2003669405" unbViolId="cb81f9d5-dac9-3e21-9ce9-b0fa870933fc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c05637ad-4f54-32b6-a66d-7807126001d1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="2003669405" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2003669405" unbViolId="b3aeff27-c362-30d9-a845-18f5d6617507" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed9cfebd-6248-34fe-b484-b5c21fead53d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="COMMENT-14_b" lnHash="2003669405" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2003669405" unbViolId="33d87473-5101-3451-8bc3-42fc6e14a8fb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b2637da-4978-39fb-99ed-b230626bcfa2" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="2003669405" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2003669405" unbViolId="035f074e-dc27-38d4-b7ab-82b82aa4e6c6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbbd28ed-5855-3b74-9fdb-b21582dc46fe" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be declared 'noexcept'" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A15_4_4-a" lnHash="2003669405" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="2003669405" unbViolId="4d0f0a8f-bc05-351d-8d7b-d99bd1ebdeab" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6be5958e-12a3-374d-a052-ef2cd17a267c" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be declared 'noexcept'" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="CODSTA-MCPP-09" lnHash="2003669405" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="2003669405" unbViolId="c500f699-d38b-307d-8f63-c2108165d411" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d8426ff-b965-3beb-8e1d-36d0f2555877" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'draw'" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="FORMAT-28" lnHash="2003669405" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="2003669405" unbViolId="aff9418d-e78c-3dd5-abc7-64973dc106e1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccc0a15c-bc6d-30d6-91e8-de9aeaf1e9a8" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has Cyclomatic Complexity value: 1" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="5" auth="yshi" locRef="4" rule="METRICS-29" lnHash="2003669405" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="2003669405" unbViolId="5eed9dfd-01b3-3de4-8069-d5cac7508ccc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d036031-65ab-368f-b57e-ca591938b448" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has Essential Complexity value: 1" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="5" auth="yshi" locRef="4" rule="METRICS-33" lnHash="2003669405" rule.header="Report Essential Complexity" tool="c++test" lineHash="2003669405" unbViolId="667e3a47-bd38-3a4f-9c90-5f47ec793015" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec6e0e28-d72e-3a1d-81e9-53a2bdd1fdaa" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Naming convention not followed: draw" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="NAMING-17" lnHash="2003669405" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="2003669405" unbViolId="7ee1f64f-b42b-354d-89c9-f2a6b11afa0f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5069e70-8caf-3e5c-9711-eca86e2069a0" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_8_b" lnHash="2003669405" rule.header="All functions with void return type shall have external side effect(s)" tool="c++test" lineHash="2003669405" unbViolId="ccc6d1dc-3d78-3063-a14d-94e9116bbc07" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdbca850-83c9-3e4b-8850-b70820ee18f5" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="4" auth="yshi" locRef="4" rule="OPT-32_b" lnHash="2003669405" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="2003669405" unbViolId="b4d9db5a-47e1-33f0-b241-82b1b963894a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c9fa3ae-da51-34ef-b1ba-5660cf4d3730" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_8-b" lnHash="2003669405" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="2003669405" unbViolId="c84b2cbf-834c-315e-add0-3410bbb78077" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12b36fec-6664-37f5-bf30-3e63a68eb7d1" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The definition of the 'draw' function is not preceded by a comment" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="COMMENT-04" lnHash="2003669405" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2003669405" unbViolId="def6c911-daca-3407-9b12-4d5b5c4de825" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ec1043c-27f5-3f42-b567-b0db809486f4" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The definition of the 'draw' function is not preceded by a comment" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="4" auth="yshi" locRef="4" rule="JSF-134" lnHash="2003669405" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2003669405" unbViolId="e2f44c90-78eb-3b72-8abe-f912164926b8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d6dacf9-5c55-39ee-859a-6af47f102795" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="5161fc2c-215c-3034-b05c-8012c37a08e0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e94163d-4349-3575-beeb-05938bee5505" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="3788a89d-ec1f-30eb-a75b-94dcc6a93be7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8d375a8-59bc-3425-92ae-4c844743da34" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="2003669405" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="2003669405" unbViolId="ea37cec2-d6ba-3624-abe7-9cc4dae36356" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77cbdbfa-2429-345f-a91b-bb702a6871c3" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="9785ed65-981a-3dfa-b840-0e756c13a533" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5393a5ff-b99e-322b-83b3-7041ec5169aa" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="24631265-ab25-39b5-b385-3b3ebaf1b521" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ef39c5f-0ba2-3e4e-b362-d296d3227bdc" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="4a1d73e2-d7ca-306f-bb4c-7a00fb2192f5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6edb3f06-830c-305d-ab84-3ca7434ee094" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="69f99284-08ab-3969-9033-538dc56b32de" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78aa76f8-55cf-36cf-942c-1c53fb0cb6d8" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be preceded by a comment that contains the '@brief' tag" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="COMMENT-14" lnHash="2003669405" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2003669405" unbViolId="13fcb083-6d0b-360f-9a3e-503e60475e48" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25d34926-d412-374a-b962-331f0e5ea79b" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be preceded by a comment that contains the '@brief' tag" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="2003669405" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2003669405" unbViolId="0ee54fe3-d52f-3009-8cf5-51345aeda7d1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96b54f9b-900c-3b7e-8c91-869e33719d4b" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="FORMAT-47_a" lnHash="2003669405" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="2003669405" unbViolId="21bc4d48-467f-3ef7-b513-ecaab05cf631" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6038645a-f9f0-3c2c-a4d2-a7a65f027d1f" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_4-a" lnHash="2003669405" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="2003669405" unbViolId="87b5180b-aff9-3fd0-a80c-86433ac43be8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf11d2d9-45da-35f1-988c-3b856bb00445" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The operator '*', used for 'object' declaration, should be directly connected with the type" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="JSF-062" lnHash="2003669405" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="2003669405" unbViolId="691acca5-f2a4-346c-ac04-f72947a2f14f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b520632-611d-314d-96eb-4e88e974458b" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The operator '*', used for 'object' declaration, should be directly connected with the type" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="4" auth="yshi" locRef="4" rule="FORMAT-32" lnHash="2003669405" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="2003669405" unbViolId="bd104d35-fd7c-3e21-8bb9-68642abe4b0f" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92e81242-0095-3362-a0df-6a59bd3b4738" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL00-a" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="1296ea52-bab7-3de5-b39b-a0ed962a87fe" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38da023d-a0f4-3eea-a9f2-dfd35c71c1b6" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="cb28dfe1-7218-3fd0-984a-afe3ea37bfd3" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6606ac71-ec33-30cb-9395-50810fa2e393" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_1_1" lnHash="2003669405" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="2003669405" unbViolId="25f010b2-e0db-3a24-83d6-cfabc77d4e22" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc91457b-4518-3a5f-b880-f97ecde77ae7" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-53" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="fb6cd746-bf32-3c0e-bc8b-3810eccf2907" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbcef576-60b4-3dea-9b05-74912717d21a" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_2-a" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="1a870b96-1d22-3c6b-b232-8550db43361c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6618e684-72af-38b3-a4d3-63787dc8a6c1" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'object' identifier should have the 'p' prefix" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="NAMING-HN-34" lnHash="2003669405" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="2003669405" unbViolId="0c907fae-66aa-3157-a3a4-9131e9687be3" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9eb38812-acbe-3509-b8bb-a1e8b23de1f9" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="R-828: parameter &quot;object&quot; was never referenced" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="5" auth="yshi" locRef="4" rule="PARSER-REMARK" lnHash="2003669405" rule.header="Parser remark" tool="c++test" lineHash="2003669405" unbViolId="370c45e7-f4bb-398a-ac64-b824b74eb022" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d41d00d-714c-37ac-8d76-9058d853de27" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="OPT-03" lnHash="2003669405" rule.header="Eliminate unused parameters" tool="c++test" lineHash="2003669405" unbViolId="6e3338cd-50e7-3b6b-9536-b4e2a67dfb9a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1caa7b30-f5fe-3c5b-99b3-1adab4722573" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_4-a" lnHash="2003669405" rule.header="Eliminate unused parameters" tool="c++test" lineHash="2003669405" unbViolId="698b6e8c-2fa4-3ce7-8178-e09d8ae8ef3f" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fe7e1ac-3b6b-316d-b7c7-6f3d86786246" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="OPT-31" lnHash="2003669405" rule.header="There shall be no unused parameters (named or unnamed) in non-virtual functions" tool="c++test" lineHash="2003669405" unbViolId="c351abb2-40cd-39e1-83c8-45eade9ed310" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4a25c68-4e61-3a1a-aae6-4959e9febf05" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_11" lnHash="2003669405" rule.header="There shall be no unused parameters (named or unnamed) in nonvirtual functions" tool="c++test" lineHash="2003669405" unbViolId="15834480-45b7-3d60-aca0-e159dd3b3c3c" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aab167ab-f0c2-3419-a559-ecb2d9ce047e" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: object" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="2003669405" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="2003669405" unbViolId="048c3288-18c6-3b92-afbe-ccc67aa3ff59" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5a7ba7c-357f-32a5-b234-7c9d0c318096" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: object" ln="110" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="110" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="2003669405" rule.header="Do not declare pointer type" tool="c++test" lineHash="2003669405" unbViolId="387bde72-71ed-3d52-aa75-dc36c4088f09" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42fd93f7-a777-3a98-a5cc-58a9ceb9f624" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="111" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="2c9d11ef-9088-303a-808d-ee2fdfa06381" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1b38aeb-20f4-392f-a1d0-17e45b448a40" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="111" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="111" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="48932818-df2e-350e-bbf9-d9636e31990f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c9eb65d-398a-3fa9-a3c8-9cec49c3b957" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="111" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="111" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="b214eba3-5f60-3125-8220-d29e27cfcb4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bc8627c-3268-3794-b83a-1b07a83b14ae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="111" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="112" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1506270258" rule.header="Tabs should be avoided" tool="c++test" lineHash="1506270258" unbViolId="cdb2524b-99b3-396d-be02-d8c59b2d1a59" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c29c9b0b-b225-3526-98ed-f020cffdcab4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="112" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="09900bd8-56f3-3a46-9310-31a05aaafba5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e7e4961-0f01-3b13-9334-e14c0320e8b2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="112" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="03430b09-11e5-3bb7-9a77-04e30f553427" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86f44a1e-606a-386e-82e9-b38262261860" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="112" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1506270258" rule.header="Tabs should be avoided" tool="c++test" lineHash="1506270258" unbViolId="b1dd96ce-b79b-3a17-8fbb-b3a70cb51570" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="650631d2-ef80-348f-95d7-5d9078259f03" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="112" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="43314834-098a-3181-adfc-5947369c2bbb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a74467a8-fd3e-320b-9564-10fc06f807f4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="112" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="fd23f898-32a3-3ae8-86b0-e29fed7894df" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="875bede3-8704-38cd-9e9d-840298df5e4c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="113" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="320a72b2-dede-3b9d-9d10-c3bf8d498677" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2096886a-fc8f-3378-a596-0c8b337fb5c6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="113" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="113" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="2f361bb6-7819-3a8c-b95c-24b1fd3bbe6b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c920a52-6848-3e26-b1dc-1ade1dc0d215" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="113" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="113" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="f26b2f85-70a7-3f7e-9488-80bd5573a77d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39a64f05-c924-35b9-a834-204f6f33e586" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="113" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1747693045" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1747693045" unbViolId="3152f27e-d3a7-33e6-9ea6-4f7f13df5613" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f3a67e0-535b-3666-bf07-d7d0b120c0f0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1747693045" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1747693045" unbViolId="a7491069-3828-3be1-9e84-6d85ac652a79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0714a00-1612-38f4-b4e5-b010a3f4a487" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1747693045" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1747693045" unbViolId="cfbcf5f7-4f51-33a1-96d5-8359d006e08a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75052361-e7ee-344e-88c6-77b825bc190f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="COMMENT-14_b" lnHash="-1747693045" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1747693045" unbViolId="45e9d285-53e0-35ea-94b7-c405a14df9cc" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6e7168b-c058-313a-ac2c-405aa411f465" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-1747693045" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1747693045" unbViolId="76f7277a-6af3-33f2-862b-09858fadf80d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eac4d552-1832-3bdc-ba5c-74f1588fab5f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has Cyclomatic Complexity value: 3" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="5" auth="yshi" locRef="4" rule="METRICS-29" lnHash="-1747693045" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1747693045" unbViolId="088efbd3-d8fb-344b-ac53-0309f86dd6a7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2eb6a5b-f719-3876-9787-c028d501d30e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has Essential Complexity value: 1" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="5" auth="yshi" locRef="4" rule="METRICS-33" lnHash="-1747693045" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1747693045" unbViolId="ed18fd0c-41f6-34db-8213-97d9c86e320f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="493a85c4-cb2d-3f21-af24-8e81fc656a5c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The incorrect global function name Render_Thread was found" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="NAMING-34" lnHash="-1747693045" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-1747693045" unbViolId="3ccdaf85-c9ef-3972-972f-345ad2505c02" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ab06098-697d-3a5c-bb36-ab6bcd4ff51b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The definition of the 'Render_Thread' function is not preceded by a comment" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="COMMENT-04" lnHash="-1747693045" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1747693045" unbViolId="95b83359-0627-3dde-9e59-1e9cd1a02e40" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36e9f7bd-0291-34b5-b404-ae8a5c3ab2fd" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The definition of the 'Render_Thread' function is not preceded by a comment" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="4" auth="yshi" locRef="4" rule="JSF-134" lnHash="-1747693045" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1747693045" unbViolId="f8c51399-295d-3883-96ec-4c171907ecf4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a94e692c-f9c7-3e25-88e2-3aed7fd84f8d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="a03f84d6-d5bb-35d7-8a05-ac733058c1fd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa4290b5-b2e3-3246-b8de-0d39e9400cf4" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="a0d8aea4-4982-38c1-bd7e-d405b73480f0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27e0e49f-ece3-3ead-be92-35c98d43caf3" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="-1747693045" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1747693045" unbViolId="0dae985f-124b-3932-8a77-232e5b005535" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="231632e0-bc68-3114-92b4-62a42334301c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="49e6df6a-8915-3868-8747-0e74725898f3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9a9d99c-166c-3c38-a0dc-0007d429abc1" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="ed04851f-7a71-38c0-9fb2-f27b8a776e54" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="079d6699-57bf-315c-a619-98149fdddfe9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="a1df0f6c-5563-358f-bcec-1c9da0f69def" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c4062dc-9a2a-320a-9218-860ce6b3d60d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="746e6448-b76e-32b0-88c9-5439b71e8151" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2febd1ab-7a92-38fc-8241-19663030aab7" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The name 'Render_Thread' should be composed only of lowercase letters" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="-1747693045" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1747693045" unbViolId="298bfa77-8b7f-32de-8d96-1a2940d0ba34" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="502fc9a0-b01a-35a5-b364-8a143b3620d8" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The name 'Render_Thread' should be composed only of lowercase letters" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="-1747693045" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1747693045" unbViolId="2db78385-6248-338c-b352-f0e1be7c5e39" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52977a3d-fb38-3c33-b029-2c924422c718" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' returns a pointer type" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1747693045" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1747693045" unbViolId="28d94f5c-1514-3a65-9297-7e1eea6d3df3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11bbe40d-8e17-3a31-aa66-ec481536acab" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' returns a pointer type" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1747693045" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1747693045" unbViolId="4370cb2a-8c13-3ad5-8f25-fb48059526d3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f68a368d-2fa7-309e-83eb-ac3122828b88" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="COMMENT-14" lnHash="-1747693045" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1747693045" unbViolId="387f87db-c3a9-3988-98bf-94eea62c1696" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca380eb0-0bcd-3007-8f49-56d084c0e031" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-1747693045" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1747693045" unbViolId="2a7c358b-7396-36df-a9b2-42f6c42079b1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88ee3a9b-8720-32e9-b75a-c7e7f39d3b65" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1747693045" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1747693045" unbViolId="dadd224f-5a41-3267-a521-0f9c1aaae5eb" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a35256f8-c920-3176-b669-e762acb7c092" locEndPos="22" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="115" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="115" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1747693045" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1747693045" unbViolId="6c6d504e-80dd-3ad3-89d1-711b3cdc82af" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ef98d0b-e28c-3fc6-bb29-10774ddaf76b" locEndPos="22" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="116" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="116" sev="3" auth="yshi" locRef="4" rule="METRICS-19" lnHash="402" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="402" unbViolId="fca089f1-1449-31d2-9b93-8af676fec23a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8628516-3357-3771-b015-b4078d6674df" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="116" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="f81a88f1-378f-3845-9255-9c192f2c2f5d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42cbc015-1372-3114-ad35-9944c31fda96" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="116" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="2ac85a54-cf9f-3bad-a3b1-a6434ddbb2c8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="569c721f-fb12-3dc6-a226-54ce1d4c4250" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="116" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="ba1431b6-1f9e-326b-87ec-15f40de6f948" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a80f6190-b282-3f98-894f-b9f8c115f04b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="3" auth="yshi" locRef="4" rule="JSF-061" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="81604376-f12d-3981-ba28-699f88fcd5d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c7a5255-1379-3e31-9856-99c6daba1e71" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="3" auth="yshi" locRef="4" rule="FORMAT-42" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="e054b168-9d04-30e7-ad29-2f0e638efb36" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99fdd012-5aec-3c32-ab60-e899d3d106de" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="3" auth="yshi" locRef="4" rule="JSF-060_a" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="c550c744-85e0-313b-ac85-a6b004485305" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00475b59-8d32-30ee-a290-6c9179c9db5b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="3" auth="yshi" locRef="4" rule="FORMAT-43" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="d713e1a2-e638-3f71-8227-d4d02b8b3f4b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40da573b-09e7-3638-8c12-b2879eeee40f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="3" auth="yshi" locRef="4" rule="JSF-060_b" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="17949eed-ca73-3d39-ba09-1c58d3b95110" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="070a699a-49b9-3394-bef1-2ae35d7b2ce1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="6c46b631-41d3-3484-9e3f-5f11f9e090e6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e0c8163-4c1c-3249-9dd8-16f4eb181f41" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="aefe0507-b939-3ebb-84ef-04609c9c6c17" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45068764-3c68-338a-a6fb-a257dd795c38" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="3b980137-5471-31a8-ae34-0a40bda78de1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdaa1060-d037-3afe-85d4-7912c98d0811" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="3" auth="yshi" locRef="4" rule="FORMAT-02" lnHash="-1229452372" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1229452372" unbViolId="21aeb08e-a23c-3606-97a6-65213923e596" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8c73498-6f13-3adf-b8ca-d46f9916734b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="70673d2c-6b78-3b0f-b6c8-0651e397db05" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa0ef936-c24f-32b8-92d3-adddc904e000" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="f308313a-c83c-3e4d-ac19-482bc34e88ac" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afc09f2f-a7f6-3429-b7a5-5b09259e9f1f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="8ca03e91-8329-399a-a2c1-0c41d96710e7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78df285d-41dc-3793-924e-a47bbc1d7cb8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="3" auth="yshi" locRef="4" rule="CODSTA-83" lnHash="-1229452372" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="-1229452372" unbViolId="64e590bc-b2e9-3ad5-a93c-9f1ced9606ec" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="537a2239-08bb-3c51-9d24-e543cd336f9c" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-67" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="b313ea23-0744-3fa9-98ef-68d7872c3bda" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d55e487-060d-310b-bdb7-0fa73a049936" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M5_3_1-a" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="68b0abc9-9df9-3b51-8630-74307517759f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a98fe05-04c0-301a-9dbd-d7aa9baf917a" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_3_1" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="712f864e-25a4-3248-bfe2-3ca27f23bf40" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eed8b7f2-7189-3c08-8a6e-37b5016f8567" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="In 'Render_Thread' function use positive logic rather than negative logic whenever possible" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="5" auth="yshi" locRef="4" rule="CODSTA-46" lnHash="-1229452372" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-1229452372" unbViolId="c85f0102-a065-3713-a6fc-c858328fc19d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a33de5d4-745e-3fb5-b131-7a183314e366" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="117" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="117" sev="3" auth="yshi" locRef="4" rule="MISRA2004-12_6_a" lnHash="-1229452372" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-1229452372" unbViolId="6929a9e3-0690-3df1-b231-bef202216c38" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8139f2a8-5849-3304-a25b-1b2379b3a6ba" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="c321b67c-2efb-3364-b8d1-8998bec22faf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d79c1fbe-24e3-3865-9ce3-77b09081a909" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="678e0cc7-2333-3ff9-b846-9cf41ec14269" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88ad5509-6971-3619-8d65-eed5190a9174" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="09262c91-a11a-3adf-bc42-19180bec2557" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="918bd755-37c1-3cee-9adb-e59172b4bb76" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="1cfec0ba-52f2-39e4-aff8-68f955609fdc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9950ae18-6287-3553-8615-15bdadc5acf3" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="c7b1dbd5-a5cd-35b6-a5c3-89230c1628da" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6751b32-07bc-304e-9c5f-a098b33ec701" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="8e24be99-592e-36ae-8288-39cdf2fe9acb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e997b17-0d2f-3269-8c0c-9c27ae059879" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="d4f5eae7-5d2f-32fb-9f2a-d461c668276d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3faad2a-11f5-38bc-99cb-f881ff2122fc" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="69ae0a70-c668-3705-845d-29439d7b3a56" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6788cdbd-0b74-30cd-9164-43009077526f" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="6d84c7f4-3082-3ab6-a24a-b09458a0d3ba" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a0803e3-06e0-342c-9b70-34613aa449e2" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_lock' is called without scope resolution operator '::'" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-2061438629" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2061438629" unbViolId="a2d54590-6ff2-3f70-950e-ddf750ce273f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27708b80-cd0e-37b5-8977-d69d28817b4a" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-2061438629" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2061438629" unbViolId="d59984fc-8761-38d5-bbc1-85a67735d84e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f59e2582-c368-3782-bca5-0e4b1a441f9c" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-2061438629" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2061438629" unbViolId="98c4a4d5-6544-3ebd-950a-66daf8bf39df" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35f87db1-e84f-3800-887c-d58a4662be1b" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-2061438629" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2061438629" unbViolId="ca400fde-de52-3744-99fc-d358ff2c632d" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd448739-90f0-3a28-9cb8-813b4d39ede7" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-2061438629" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2061438629" unbViolId="4b3ae419-811b-38bc-a6a2-0a51bfde4b28" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd10f02e-8479-370c-88e6-14452db7aed1" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="61a42324-892a-31ee-8b3c-496b9fe76a21" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28bd8c74-9891-3f2c-9c06-f70eac156961" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="b6cdd80b-fc86-35ae-8f61-cc89aa41ace9" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3df03bae-d3eb-3e72-a404-4579747ce1c5" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="838a8918-2ce7-31f9-9858-9a8dc0452901" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5487e29-f33d-39da-a64d-53e2876ba791" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="47509a48-93e7-364b-90a7-a672cffc8056" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cbd106c-c91f-35e8-a576-97365e1f6896" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="bd8d3f45-b23f-3f57-b638-98a8e1df4b03" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae29ec66-be6a-319c-bb60-42fe4e537f8c" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="de828836-2ea1-3f58-bde7-47657e61b8e5" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b03964f-4f79-3a35-921c-8acf4cddf060" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-2061438629" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2061438629" unbViolId="343995ed-1c65-3e01-b60b-9979ab6575f3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b22a0a9a-9d2d-3793-97e9-c02c140de150" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-2061438629" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2061438629" unbViolId="1e6647bd-2e74-3837-b73f-8a84c039d580" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64838fcf-2e16-3a36-8ee3-09050c59e4fe" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-2061438629" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-2061438629" unbViolId="66309541-2f8e-3e4d-825f-ebfea59fb69d" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dcc6ea7-f096-3c9c-91d7-fc0dbb915212" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="118" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-2061438629" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-2061438629" unbViolId="0f1570b2-7f0c-354e-acfa-d03243f2934d" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41e480b1-4123-3821-9172-9737b59ccc84" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="119" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="4e1b6305-4b3a-3bc2-8574-ab5303b6cc16" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64ba6aba-5912-3529-b509-88640c2ad95e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="119" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="4ccbdc1a-efad-329b-adff-03fa1f7f7d7d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57ab3b3b-4875-376e-9ae5-86fae3dd1ec6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="119" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="cbcd9bfa-61a3-3454-9a44-b2cefbddb2b1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5f48a49-4a7f-3b2f-b461-cacdb4b7c7f6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <FlowViol msg="&quot;ring&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;ring&quot; in second critical section" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="120" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1448027104" ruleSCSCMsg="Usage of &quot;ring&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="119" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1933001540" lang="cpp" violId="7021d9cb-548a-33e2-a78a-9de36227e67e" locEndPos="0" locEndLn="120" goals="0," locStartln="119" sev="2" locRef="4" tool="c++test" lineHash="-1448027104" unbViolId="6b413234-e315-3c87-9cb9-41cae26747a3" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="117" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="117" srcRngEndLn="118" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="118" srcRngEndLn="119" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="ring.getPosition()" ElType=".C" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="119" />
        <ElDesc lineHash="-1016738356" ln="120" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="120" srcRngEndLn="121" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="122" srcRngEndLn="123" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming false)" kind="condEval" />
            <Ann msg="Not entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1234365944" ln="128" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="128" srcRngEndLn="129" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="SLEEP(STEP);" ElType="." rngLn="128" />
        <ElDesc lineHash="-1229452372" ln="117" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="117" srcRngEndLn="118" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="118" srcRngEndLn="119" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="ring.getPosition()" ElType=".P" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="119" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="7be3beaa-f8ad-3033-a594-7905c0c260e4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a00980dd-0567-3aa7-bc57-ed0bf8b355f3" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="119" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="95bcc618-52ae-3c91-9001-8904d3344566" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8aa76629-a457-3229-8ff7-9ee2fbbee55d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="119" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="16f1a333-fb76-31e2-9a37-5f6d58b49864" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27d4a071-e4cd-3bd4-b78b-c7a0f599a80d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="119" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="8e07ba4d-e374-38e2-b04a-637af16d7fbe" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a69a643-b563-3349-ae64-bad026166e04" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="119" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="edf68f4a-2658-3794-98d8-5275464de307" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53c7933d-cbf5-3adf-a437-d087c26c985a" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="119" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="c8909a03-b3bc-3716-bc1c-0a9ae7a8dca9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3dfae1b-8ea7-3f86-854c-1c13040c22a6" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="ce1f38ff-9b4f-3814-b720-84b6f9bc039f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d81d84f-ad89-39d6-8aed-69bd6318a5fb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="59b09b3c-777c-398c-b9d0-5760140ada40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="117f898b-e129-33d2-9ab6-1bf11a6840d8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="80191bc8-c0aa-32e5-b1aa-f09366e85af4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a6aa764-430b-31f0-afa9-4f0805ef880b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="b3afa019-0a7a-3eeb-9c65-6fa982bde0fc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eaad8c14-06dd-3707-b60c-acbfb5d244b8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="8ecea2b2-83fd-32b3-b591-32886e009406" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38a0dae6-8ea1-31fe-8bbf-58596883a976" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="2de666c8-44b9-32ee-9684-8f0f7e05b093" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="421817ce-31e9-346b-9585-03c11a95471c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="834a8b58-389a-3dbc-b56c-3e2a376be50e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6811aaf0-745c-3052-8c83-71c3cec6c7fe" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="7c4a5f21-5b4b-3f74-bd79-6a5f34db1bef" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="018e6039-f454-33f3-aa65-317e97e695c6" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="c864915f-ef30-35ec-808d-37449a5299d9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05082385-4ba7-3f4f-b662-7bf71f94ac53" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_unlock' is called without scope resolution operator '::'" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-1016738356" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1016738356" unbViolId="49243851-519c-34a7-895d-4e6ba1b2f083" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2243eb84-91f4-3de0-9b7d-4c84447c1c55" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1016738356" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1016738356" unbViolId="20b6c580-be1f-3f5c-9100-0a984fbd8c4c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5247c6ac-9abd-3844-ad7d-869f422cfc50" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-1016738356" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1016738356" unbViolId="a5dfc692-04f0-33f8-bc72-53a94d1a99ee" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11c6adb7-6103-3c28-9802-a51999bf3637" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1016738356" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1016738356" unbViolId="39a13b0e-f223-32fc-a478-a05c5091acfa" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fdb303f-d684-3c84-a835-4e4916edd847" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-1016738356" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1016738356" unbViolId="d7b21ee8-77d3-3d28-8e0f-7b32e68b71ce" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbb718aa-6ccb-3b85-b7db-d4fbbadaefdb" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="9751c660-999d-3f21-9628-61d688aa1d56" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdf06279-9560-30e3-ab45-7c69006fe3aa" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="b89c9868-9f89-3b07-8839-4cb873427cb5" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e0b7adb-5066-381d-b9ae-a4089e8c738f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="d9acd791-7de7-30b6-91f3-e7117a446b0b" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="137b85e1-50de-320b-83fa-57dd9dbe67c0" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="197c81c8-7b1a-37dc-9e44-7e98fe442975" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da7bf87e-b486-3408-9af7-da53099b5652" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="9ba12369-6092-3103-bbf3-64b89dd7e87b" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="613f7692-7851-39f6-a031-73e53f85ae8c" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="2ac95caa-8844-3540-b0fb-2f789af584a2" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b79d9f6a-65c3-3003-9999-f54945706889" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-1016738356" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1016738356" unbViolId="f335d6c7-231d-33e5-b1f5-3cad8a5ed3dd" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f41fd9e7-054a-31bd-beec-f12c70ce2efd" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1016738356" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1016738356" unbViolId="6348a51b-d64b-3980-93f9-89b2531a3806" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c383dd05-7cbd-3449-af57-8bf0c669c027" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1016738356" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1016738356" unbViolId="d3acc688-61fd-3d9d-872f-3bd2951acf7c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eaef8724-0615-3630-b386-0a24f39cd92f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="120" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-1016738356" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1016738356" unbViolId="f6d2d791-f50d-329b-830d-0c5602ea7464" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ea33260-aea4-3a1c-9f1c-c947e5abde98" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="JSF-061" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="58545e41-7901-3a8d-99b7-8ed1b6e2db9f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2937ca31-7bfa-34eb-b2a6-59fe917ef695" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="FORMAT-42" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="74e7c9ad-b724-33ec-b225-f6e02baa9098" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a16021c2-6abd-3f83-b3a7-7766f08dbb5c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="JSF-060_a" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="3407ad1d-fe5a-324b-9267-f60df71491c2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efede51a-1364-3c8b-848c-d52316359858" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="FORMAT-43" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="820bdc98-ef3a-37db-accc-0e1d575ac989" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ed75243-57de-3bfd-b84a-c8536dca4fe7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="JSF-060_b" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="5f16cf02-116d-395d-8f29-da5354595966" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bea55f3a-321c-3a07-931f-9ad69c68b244" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="5dca838d-3bfd-33e2-8d85-e6aadcbef144" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dd7917c-118a-3095-b9db-50e9d14b765b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="7f394d96-ae5a-3846-8faf-90df6c0fb619" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1fc0e23-ba50-3338-a178-33611ea99ef9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="1cb2d82e-b328-3498-b217-4a3965fbc51c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="088eac5b-8794-3ced-a29c-ff643232e8b3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="FORMAT-02" lnHash="1544355218" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1544355218" unbViolId="dd1ea7a6-fec9-3792-bb5b-ed87ca09ba58" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eab622d3-0d34-38f3-8c95-a5347b4351c1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="a12d841b-2c04-3d66-8b63-84aa8bbff10d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f3f7c27-20d7-36c7-a3b6-89d2da279e4b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="c1a5ac35-0071-302c-93de-125d41dbe5fd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98ae9101-aefc-319f-a837-3174b9790160" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="154b4353-d325-31c2-8de4-5dfbcccac78f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b41c3f6b-f1d1-3643-bb42-adafb0f18675" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="d398524d-2050-377d-b007-f1736657cddb" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da4937c6-6c6f-3a17-a941-b613f999b769" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="e17d4d83-6a2c-3fdd-a9bd-995c593fda13" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8c8588a-3fab-31fd-b263-d8a1b4cc209a" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="fb0851c3-28e3-38ed-a5a2-b54b7abaf2cc" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51af7863-350f-3e3c-867b-27645e166759" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="CODSTA-83" lnHash="1544355218" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="1544355218" unbViolId="74b0e685-b53f-3cb1-9bdb-1fe43f3bc0e2" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e709f35-07ae-3e6a-be81-d2b06ec8c3e7" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="FORMAT-12" lnHash="1544355218" rule.header="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" tool="c++test" lineHash="1544355218" unbViolId="b1e88ca1-02a8-33f2-b75f-b473a8920881" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18dd099a-11a6-3ab2-9dc7-d0314cb3988c" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="CODSTA-223" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="65cbad36-f338-371a-ba87-213ee933e2ee" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8f8087e-8e8b-33d3-ac4f-901dfb5ff08b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="7a475d69-6835-3f14-9fa2-bf31110d3752" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6120fa96-52b9-35db-babc-eb5ce614dafd" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_6-b" lnHash="1544355218" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1544355218" unbViolId="3d910e82-5a07-305e-88f9-159f77eba37c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa0984f5-c6a9-3030-9982-610880a91bef" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="4" auth="yshi" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="1156dfb7-7768-38f6-abdc-391dbc901f99" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="201c6b90-7c4e-3101-9c11-23edbc9bb436" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="MISRA2004-6_3_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="f25fb04b-37a6-36e9-8531-638139b67d52" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0272769d-d519-3704-b04f-33f82daee8e0" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="2" auth="yshi" locRef="4" rule="JSF-209_b" lnHash="1544355218" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="cc256533-7e59-334a-95f9-39067dd7a199" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43b752fe-a9e0-3d92-b96b-48d3b16acfe1" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="4" auth="yshi" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="3e0629f7-3708-3b32-82a9-febc72084a46" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0381d83d-381c-3af8-b966-42a600d73501" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="HICPP-3_5_1-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="b1a7ffb2-3140-3cfd-b5f5-71aa4b48f5f2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3988b38e-b3b5-3263-8e11-49487efb57b4" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="4" auth="yshi" locRef="4" rule="MISRA2008-3_9_2" lnHash="1544355218" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="ff94aac5-c86a-3082-8a70-54bbee5be2be" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67460d27-b247-3fe1-bf77-5cb6033627c2" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="MISRA-013" lnHash="1544355218" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1544355218" unbViolId="d46da65a-b3e0-30ec-9f06-ca210f8c134f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0587887d-47a9-3ebc-9628-6390a19a3bb8" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="PORT-13" lnHash="1544355218" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1544355218" unbViolId="836bf272-5776-38c7-ad3d-22c86605554f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f238fb95-bed9-3727-a90f-31b113f21a5a" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Variable &quot;i&quot; declaration was found in control statement" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="OPT-10" lnHash="1544355218" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1544355218" unbViolId="20b84059-44a7-3814-9e5f-fd8e3262ee7d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f745351-8044-3ed3-80a6-26e04dc834ab" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="1544355218" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1544355218" unbViolId="e7a21235-ba9e-3d22-b8d9-962feafa9642" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="403757e7-cc71-3fc5-ad2a-c3b397d7d8ed" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="1544355218" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1544355218" unbViolId="7fa3c256-b31a-3e17-8f30-e0d7e55fedbf" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9cf3b7c-d1db-38cb-b605-79be2beddd16" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="e57ba76b-8380-3471-b833-7527f264aab8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b70aa917-4c68-3ec4-b262-41f776890ab1" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="CODSTA-MCPP-38" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="50ada7fd-b9ed-3440-bd42-f5caa2a1c0cc" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="170d4547-484a-3496-9a20-3c8008489c49" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="122" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="122" sev="3" auth="yshi" locRef="4" rule="OPT-04" lnHash="1544355218" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="1544355218" unbViolId="8a605398-cbe0-3768-80cf-e247c3492749" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3977dc35-02fb-310b-bc0b-94ae6a182579" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="cbdff61a-0fb9-3238-84c4-74280a737b86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1f12084-585d-3b2d-9893-a0eb234812fd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="90c0eff6-fa88-348e-adaa-0bd104cd2c3e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6eeb3b2c-498d-3114-a9ed-12e6b24ade88" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="b6120868-8fa4-304a-a67a-64de251bd952" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eef335a3-04b0-30a0-b466-58fa28a495e5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="c9926321-9e7d-3ef5-96b6-d2a7e25bea06" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="695a4468-5119-3348-b844-7b31a5f03980" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="75c552ca-ee22-3e89-81f8-e7243c07ba6f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59218ed3-b271-397c-9331-fe3150547ca5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="5318d587-1c58-3338-8bef-ce945a9be1f2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4cc7ca9-b90b-3e4b-a51f-b71a13076487" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="7eaeee4c-ffd5-37a3-8112-bd4133e7bf3c" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc67ed58-0f75-3d62-8aa9-0c192bd0c97d" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="c3ec5d51-5071-3428-adc0-5e089f70922d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccc0ca1b-1e98-3960-a724-831aa2c0d6e4" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="44acdc3c-af01-3224-bff4-8475976cfd1b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acd9a492-097e-35b1-9cf3-1418f7eaec5a" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="7a736f84-8d4b-30cc-bbda-a2c156b7e3ee" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a57a32a3-abfa-36ab-9436-af9f83c4def0" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="98ffd92c-8709-3827-93be-49acf5185896" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="294672fc-7a03-3d12-9724-d6420683dfbc" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="6384f3d6-87a5-34d7-92eb-05d8f908b1f1" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f5d1755-4e88-3f9a-aefe-18bead478256" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_lock' is called without scope resolution operator '::'" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-251104526" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-251104526" unbViolId="0df2a8db-0eef-3164-8727-3930f24cd89c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dff2d9c2-fc86-3e13-b0fa-6fabdd3ef9b6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="e702fa8f-880a-3199-a2a8-a9afbaeef98e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="690c417f-613e-38b4-bb0d-f2076e3c2da6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="74b34dd8-70c0-3dd5-9499-10e4252c14a0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8eceecb0-3eee-33b7-a0ae-ead557afe8af" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="ba4b593c-6d1f-37c4-9db6-3f99f2fa946b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5dfa93e-9d08-395d-871d-3325ac60b221" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-251104526" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="673db27e-4478-3dc8-9e68-2790a03abe06" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="770b1dd2-ba53-3f76-b809-946a9fe3c183" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="95c7df82-aa47-3f36-b1e6-10ee8a48875b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79019e80-3e64-304d-9459-ee1a06a32ec8" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="0846651d-8f8e-36e2-9af8-63cbbd0e3cff" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a3c16e7-dfaf-37f0-8b2c-c4ad959dbacd" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="8afff909-2e0a-326c-9852-0fd02fffb6c5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b32a2f5a-290f-3ae4-a018-029e517c7701" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="3541b83b-8ecb-3362-8957-a4e954120dc2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf10f337-1729-3174-9f56-9015f281d666" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="b8939e3b-8273-37c4-8465-2944dbf69db2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02b58603-4ce0-3d9d-ba68-1bafc9050993" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="cfb1eec3-0148-31ca-b687-0b34da899c92" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd3f9ae4-6d92-3198-bf74-714bd70bcb78" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-251104526" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="34053e7f-02fa-3704-97e7-0f01f98c1dfc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0029a851-7816-30c0-b171-35438169fda9" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-251104526" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="972f55df-889b-3f2b-828b-ab856d60cf6e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7989963f-0f21-3a7b-9c0f-c7ba8b4d226b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-251104526" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="ab4dab40-a0c6-30fc-ba77-d5a79463fe21" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="460ed575-613e-356b-a375-5b4dddbca3ec" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="123" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-251104526" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-251104526" unbViolId="e5e5b85e-e1d8-3426-8975-6139d2b22aa2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c98f024-6a69-343b-9ad5-c29286e3350d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="09ee749e-c6b9-3845-99f2-0218cedeb56f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad6857ac-d274-3c3c-b63f-ed7a17105ff6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="ab8ffa84-948d-3408-af95-49bb4c998e92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9886f77-f7a3-3242-8973-6fb607c7bc3a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="364ecde7-6966-3df8-b4b8-4432437da102" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98fd584e-a5fd-361c-bf81-7e70044e0563" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <FlowViol msg="&quot;participants&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;participants&quot; in second critical section" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="125" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-864998869" ruleSCSCMsg="Usage of &quot;participants&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="124" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-656540360" lang="cpp" violId="3ba4cc16-4b17-3841-86a2-3ca57ec17328" locEndPos="0" locEndLn="125" goals="0," locStartln="124" sev="2" locRef="4" tool="c++test" lineHash="-864998869" unbViolId="3e8f2e62-c41f-3957-aaba-83df40b3025c" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="117" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="117" srcRngEndLn="118" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="118" srcRngEndLn="119" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="119" />
        <ElDesc lineHash="-1016738356" ln="120" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="120" srcRngEndLn="121" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="122" srcRngEndLn="123" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="123" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="123" srcRngEndLn="124" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" ln="124" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="124" srcRngEndLn="125" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="participants[i]->getPosition()" ElType=".C" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" ln="124" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="124" srcRngEndLn="125" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="participants[i]->getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="124" />
        <ElDesc lineHash="793595747" ln="125" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="125" srcRngEndLn="126" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="125">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-596932643" ln="126" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="126" srcRngEndLn="127" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="draw(participants[i]);" ElType="!" rngLn="126" />
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="122" srcRngEndLn="123" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="123" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="123" srcRngEndLn="124" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" ln="124" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="124" srcRngEndLn="125" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="participants[i]->getPosition()" ElType=".P" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;currentCameraVelocity&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" ruleSAFMsg="Usage of &quot;currentCameraVelocity&quot; in second critical section" FirstElSrcRngEndPos="0" auth="yshi" FirstElSrcRngEndLn="120" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-864998869" ruleSCSCMsg="Usage of &quot;currentCameraVelocity&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/FlowAnalysisCpp/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="119" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2013840605" lang="cpp" violId="bba7c01a-6e01-3883-b0a9-6467f094e74c" locEndPos="0" locEndLn="125" goals="0," locStartln="124" sev="2" locRef="4" tool="c++test" lineHash="-864998869" unbViolId="f8c3fce8-f00a-3763-ba53-c4e7ebb634a9" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" ln="117" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="117" srcRngEndLn="118" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" ln="118" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="118" srcRngEndLn="119" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" ln="119" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="119" srcRngEndLn="120" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType=".C" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;currentCameraVelocity&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1016738356" ln="120" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="120" srcRngEndLn="121" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" ln="122" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="122" srcRngEndLn="123" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" ln="123" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="123" srcRngEndLn="124" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" ln="124" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="124" srcRngEndLn="125" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="participants[i]->getPosition().translate(*currentCameraVelocity);" ElType=".P" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;currentCameraVelocity&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="f85d06d8-3101-3225-8357-20c890f0b79d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43aa792c-f0e4-3e79-9a28-28769d45ce12" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="bf1210d7-9861-3c4d-bbc1-bff46f1b1fa2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b70a17b8-8581-3ce4-8796-08024bf9db30" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="88e1c0f0-a448-3d72-99e5-d80690f0d612" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f83889d-d021-3649-9ef7-0c6a2479a845" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="8ec29c3b-d81c-397a-a0d9-cf341a9f51f7" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d032b27e-a756-3d75-aab7-64b1b2b74711" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="0970901a-9f98-3203-918e-09cfe7c3ad0c" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bbe1034-a69f-31a7-ad36-07b8cf480eed" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="565ebec0-73b5-3812-a69c-e16783340487" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="267e6e12-0658-3dbf-bd48-5eb3c328a4dd" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="b8c351d3-7625-3c38-8117-2fdbdb35b464" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83f54b8c-a0a9-3db5-a20f-cd55e819dc09" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="9a619e16-ebe3-39a8-a1de-68e18690963a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3ce6a11-aa52-345d-95b6-852928700fa4" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="124" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="3bdb91b4-bf46-3742-acc7-ebf33c8e99a8" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12a3b99a-1201-3101-9c03-0e6e7a5ee27e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="4d814557-5e7b-394d-82c4-8f5d01378311" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="189ae76c-3c8d-321e-9c39-392729420014" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="ed86666f-9f38-3875-a54a-a31ec52d0d02" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24b1d090-df1a-3844-a511-bba5e3f4d5a4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="81bdbd03-cd0c-3881-8123-f29ef99ababb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbb9c745-0647-3aa4-9dc9-4404a9497b84" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="9b84860e-8316-39f4-8a32-06b4a45381c4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bc90730-5e9a-323d-be67-1bb4bc2306d4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="078b3ab8-debd-3fc8-939e-fbbc8db7ad08" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72768f92-26ab-3780-9bf7-189c21fa07d4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="74d96a26-3617-3917-8ce9-d51c08c3e3d1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ad31fbb-0f7c-376e-b832-33827c361fe4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="94ece3b9-890c-32b9-8d25-a0f57835403e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3283e673-2455-340f-a738-f56781b266f7" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="86a05654-aa43-393e-8d0a-c26c1f0f2bbe" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="405cfb29-2d1b-34a6-b01b-066adb5e06e1" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="581f1856-f84a-33cf-9c1d-545d99f0b593" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa965e3f-e245-38f0-8ed0-cc7edc4511df" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="2922c9b4-eafa-3c1a-b0a7-138e77773d6c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4419cf8-0b37-3763-a3f8-30b8bd2cc25e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="0764c6df-4463-3870-bc44-a1697ddefa0f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aade7d48-6fa6-3f5e-8f65-4784de010708" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="fd627f4a-d370-3941-ae09-02932d45f5df" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bce3d49-6f41-340e-82ce-9ff0c0cc5384" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_unlock' is called without scope resolution operator '::'" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="793595747" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="793595747" unbViolId="4b74a5c2-f7c8-3833-bba3-daecf0158251" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f186b5f1-b1dc-31fe-a5e9-1af2ad25a320" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="dffca9c7-dd1b-3479-8abe-d67f8e0c537f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0815453f-9590-3aff-865b-f7e5d33c6ef0" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="144e388a-c0be-3797-81d3-890c6ea052f8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1d820df-336f-31b2-ad2d-3bec5d25ac13" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="b7b41f93-cf4e-323c-9d2a-a900dffc56de" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c7160dd-90d6-3a77-9f52-5f0b385344fb" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="793595747" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="0659b282-5d2a-3de0-abf5-dd0562cc8957" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43042176-d538-3117-90f0-e56cb6761714" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="9bb00be3-866d-3714-a0c7-bff7b403144c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cc5518d-e909-3f41-b5eb-0fcb2a8b7207" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="5712dda1-70bd-3f34-9a15-759e5f12158b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8c8c9dc-6ce6-3655-9767-afb8a09875bd" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="9f27ceb6-70c8-3651-a192-655aa5001384" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79eb60c8-d43a-31f9-9de2-0c92c76193e3" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="5aaf6ee2-2bb3-3e93-83f1-6765a7d36e47" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2893cd5-5b27-34d6-9075-c2912d5dbf48" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="8fea2cc9-b33e-3a73-96a2-6ace0716e999" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37f36c8a-4991-33b6-9f36-807c709b57a6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="f0110aeb-9a8e-3e12-a71b-7e7d6e43d84f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8aa51ec4-0e6f-3768-baf2-112bce4816b6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="793595747" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="b78a8aae-2249-3512-ad6c-ab4b10506947" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8da5a8ba-73cd-3ca2-a67b-605394187326" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="793595747" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="5822b2ac-8b70-3c10-8cf1-0a9f7373ebfa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eb862f9-1e4a-3b4e-bc29-ab81eea28370" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="793595747" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="de8d699f-68c4-3ad1-b886-5ec34ac85001" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e41dbdd-d77c-3ceb-a79f-560401dadcb2" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="125" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="793595747" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="793595747" unbViolId="a1a449d8-2904-30c4-843b-55cd760d2791" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1acfa02c-fcb6-32b9-8217-5f93f4b6e0c5" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="831392d0-066f-39f4-99b0-0152cffa50b8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d098d2a5-fa5c-37f9-a0ea-d50f89986bff" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="0f598022-0d5e-3d2c-9d71-d68dd803265b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9da3ca9b-fb9e-31d7-a3a5-1ba65ecf4a36" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="2af91b1d-b284-3bf8-9d80-54ee1753e116" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7696b098-e18e-35d4-be14-203d52942ea0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="e9b56492-cd59-3cca-b348-b2235825417f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9a87edc-cd5d-3f49-8c1f-f44b649a6e9d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="b0f4c3a4-1830-3da9-815c-71a9426958ef" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5545c58d-5970-30a1-a682-4b63a292dafe" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="61ee0447-d0b7-3b3b-bcbd-cb3490cf4037" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45c4bee6-444b-3868-ae14-b683448e84d5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="d62b54a0-da93-3e05-8f87-f81c32692305" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7b6d5c5-d2c0-3d38-a5e8-3b0640242619" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="8e90e6d5-9706-3dc3-ad1d-291e041312c6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84ee338a-8266-3c6e-aff1-6b644937b6d1" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="d901fb09-f51f-35ae-a31a-f6d527e9cd15" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="071be6cc-96d7-3ca4-8908-d42f6e1e6c94" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="ba36696f-d9e4-3fbf-9ee4-2e76c31b3695" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30de799a-ce89-399a-87a2-c9bfc97dbac1" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="e0ff77ca-e657-3a40-aa26-15e0d7d6b5f6" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebdcd53d-4800-37db-96a2-f57608e6a47f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="126" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="bef94b5e-d319-3c94-884f-80bb8abc526a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ec42551-fcc4-3b25-8a06-07b9a97d2741" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="127" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="7f375c54-4fc3-35dd-8e0d-3961aaf5fb37" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95d0fbf4-f717-3cb6-a5fb-5c2fa3671720" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="127" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="05d3a364-a25f-3dc2-9bb6-a431acfc297d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d56b11ac-4c36-3fc8-a552-385e427109e1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="127" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="164a5698-0e92-3e08-a7f1-0a8ffded53e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="086dc422-87dc-3c04-8de1-a7457a23b28c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="127" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="ddac3850-38fb-39a5-89bf-487d017b1cc2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f384244-0e6c-3d8f-a2b3-64b835d2f348" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="127" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="4f06685e-be65-3d20-bc98-9dcef68e0c7d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c48cb8c-c515-317c-9b08-b9a67f32d6b6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="127" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="9a5eade7-2444-35e3-b41b-1c7c403abcd7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6d33f33-ddad-3cca-bbd7-6b99c77bedd6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="127" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="c2947fb4-fc02-31ec-8387-cafe1c402a6d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4eb0e36-3b33-3ff4-b14a-a6c75378ca81" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="127" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="5743c4cb-b73e-39cd-a2b3-af132ea00624" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4fa73d1-4e07-36dd-92e6-52f5f4a9ab1a" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="127" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="fc87a24d-3e80-39c4-967e-d61b8c5a98c7" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6e4590a-50bb-390f-8b6a-389edead8606" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="334973bf-c55f-327f-9913-23b9ed50ced3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4538a7ee-b702-3e99-9741-b399177f9eec" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="98304452-a682-3346-851c-a7dcbd2de262" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c71a9c1-3804-3a29-9fab-39bd88ee7f9b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="db8aea77-5fa0-3729-88e2-795b2a254587" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f50c74d-05b1-32ca-a57a-86c9cbff1a90" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="a8b4e012-6a30-3bb0-96f1-ee7b80cfa9c9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40e37bb2-de7e-302c-bb67-3656963c58bb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="fc031317-a4cc-3ba0-a926-aacd11aa53b5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8484dcb-59dd-3d1c-99f6-05b1d9b09c38" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="9b43555a-1e37-3f05-a504-e85c455caa02" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f0c7866-6f65-3637-8a5d-0b632ffca0b9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="4880547a-14f1-33bd-8481-5e2d500543c0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a8decf0-a4dc-3fa8-b122-ad66984abb95" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="5173c5da-73e0-30fe-b048-ba6e5a47784b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53f5d631-822a-3bfc-b6fe-dd5fdc5be139" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="457d0cb2-c88a-3e0b-a027-3705b92d65a4" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a0fd583-503b-3a27-8ed0-1aaa34a98666" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="The global function 'sleep' is called without scope resolution operator '::'" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="1234365944" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="1234365944" unbViolId="d94ce6e0-0591-3fa0-8fda-024bc96e3d6b" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d23d452-eaed-3252-af19-ba9b22f16cf8" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="eccbb582-fd7c-3416-ae33-9ce838308fb2" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b3a6235-a263-38b5-b30c-740d81d47c7b" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="e3d79dfb-6ca7-31dc-8daf-95e4ccc72917" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ade18239-c144-36dd-b1d2-6ba43ecb5586" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="2014da5b-0d94-3dce-bc20-cbcc89f021a0" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f34408c-c227-3eb8-8978-f5653c9adbf7" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="1234365944" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="2d6efc3f-090f-3c82-a7f3-5abd5e8bab02" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="033c02ae-5f2f-37c6-8493-be96503ee427" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="d22e9512-d8d0-3252-99bb-b88f0bd18a8c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05702886-11c6-3a63-8410-f29642daec22" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="029d4833-1def-39c2-b4c5-fe14f46f34e8" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="520943c8-fb60-3afc-b395-e760d2bdd136" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="15340995-4fa7-37b4-945f-35a16c4e4a58" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be27df9f-f868-38b0-bbdc-10c0b276614e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="172be495-3916-3e10-819a-f6a9c964db4b" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9801f750-8365-3460-b1af-8297755e72c5" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="a9dd4c8a-f723-3ef5-a2ff-8a5b081e5bf1" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f7eb91e-8b39-3431-bf61-ab827f8cad81" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="99375a78-0ef2-3c6e-b38c-1bef809b934d" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40242451-595e-395f-8cb6-df81567ef234" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="1234365944" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="47dc033a-6bb9-3970-872c-1b948d1cf911" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fe8efde-8e47-3054-bde9-bb480ac8fd0d" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="1234365944" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="e5d53315-557e-3784-a929-fb0cb4818549" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb45a0d4-d79f-3969-854f-91ef57a1c942" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="1234365944" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="f5fac29f-f17b-3a52-9c67-ac6e35adb1db" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc3dd60a-bac6-32e3-b6d3-6a2a9d013052" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="1234365944" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="1234365944" unbViolId="1d64e562-cae5-3696-b395-e9ce47d2220f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77429bc3-a6de-39e6-b51f-1415143f22a1" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="The type 'int' of function argument number '1' does not match declared type 'unsigned int'" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="3" auth="yshi" locRef="4" rule="PB-11" lnHash="1234365944" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1234365944" unbViolId="55113a8f-305d-3c1d-b219-f870ce22fe50" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42cf3fed-e14f-3ba4-ab25-e7e036a33c50" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 20" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="3" auth="yshi" locRef="4" rule="HICPP-4_2_1-a" lnHash="1234365944" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="1234365944" unbViolId="03cb76fb-88a2-3cd3-81e2-c3f22add0cbb" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b055ffe-d8d5-3c42-8d93-4c139836652a" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="2" auth="yshi" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="1234365944" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1234365944" unbViolId="354511d8-d812-33d2-b881-e2f5b286eea2" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8bed4c8-fdba-3ba1-ad14-3e1b51a2ba2d" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="7a39b862-491f-331b-9f9d-4cdcaddbafd7" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34f3e84a-7653-354b-86cf-d9500d64cf0f" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="128" sev="3" auth="yshi" locRef="4" rule="MISRA2004-10_1_a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="f88bf1a8-fc2c-3fe1-9bba-57a8b73356de" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="744ddec8-5f0b-337c-b586-4b16bd4c2941" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="129" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="83b91e14-03d7-357d-b0af-c65d11a84515" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4aa802cd-3b98-3213-a032-01b9ef2a173f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="129" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="41be07b4-f3a4-3d70-a5b9-a170623ea5a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb69eee6-6227-36c3-a208-ac0814abc5aa" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="129" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="d7e1d610-21b8-3024-8e4d-3438fc2f4c89" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52951ce6-38ce-3cff-bdfb-9dc1c91ae1e6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="129" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="cf50b0f7-ec2a-3252-bc2f-e7847bf339b1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02b9c348-d39a-3934-82c4-6f4402417625" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="129" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="f2c8c071-eb51-3042-86f1-d363f1deaf12" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e37673f-f44c-39e1-8a81-6c295df07c22" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="129" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="51311493-5ca5-3386-9055-6f4c78dcbe7e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd959e3a-4279-3df2-af15-7db5c24b2336" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="5fd80fb0-e3ea-3549-9211-6a2663e212b8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e8955cd-4ba6-3683-a2e0-f2a316b1e657" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="eba8c486-6438-3538-9000-c6a150c3c10c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb6f9b9c-8d63-3ba3-a371-401bdb9482fa" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="fef1f72f-ed3c-3026-a4c8-b5dfea3bac87" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68f963c4-f3c9-3964-b49d-5b27ee2b4acc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="6f3ff23e-c389-39fa-a6a0-215e2d0470a1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="849e74e1-87a9-3e29-8d9f-fc57e589e3c0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="718743d5-a33a-3010-a498-00bf17fa9cb6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="360dcca8-d3de-3f83-ac65-424b40df6705" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="a5402e86-0901-3400-b5ed-bb56a250d9a9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29679fb8-8bd0-398a-8723-edafe89e8ab6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="3" auth="yshi" locRef="4" rule="FORMAT-25_b" lnHash="-1688062501" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1688062501" unbViolId="0c8737cf-4f14-35da-a6c8-fc6912018437" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="787f8094-0693-373c-8f22-f7f7d719b00c" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_a" lnHash="-1688062501" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1688062501" unbViolId="0ac0743f-5148-3cd6-ad95-7e659be4edb4" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb68710f-732c-392a-8b82-c457ff51766c" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M4_10_2-a" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="1501f677-7166-37b3-ba64-1252ba059ecf" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1796ca8-603a-372e-9888-27417de4ab71" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="2" auth="yshi" locRef="4" rule="MISRA2008-4_10_2" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="c848d6cd-dc6a-3f83-bd56-42e9e090cb39" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21464ae4-7d67-3bcb-b093-507a43ee11e5" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-63" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="054e0a12-96ec-36e7-b391-ff9441527654" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcff0a90-0bc2-30c2-a805-562f833e72db" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-a" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="cc731d29-afd0-3aeb-bb71-c141e2024d49" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33c77c32-0dbe-3dc2-9fc7-8180a265a2dc" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="bd48f1ea-d98b-38af-84dc-0fa88d5adb96" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fe2f58a-bee0-3a12-8d2b-29c0894943ab" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="5b764bbc-d0aa-3673-8422-b2eb4fabd8f0" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64d8d999-d06b-3c04-8d23-428254833a59" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="ddb6e33d-78c0-369d-bc91-2a0076484e89" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c1c2642-8232-37c6-a030-3bc785bdba06" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1688062501" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="31e581b8-2c55-3b83-a1aa-df5a2b7663a4" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4575fa19-1fa7-323a-970f-2e894170e652" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1688062501" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1688062501" unbViolId="34451248-67c5-333e-b5fc-dd9009a19be2" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="406f367a-3a1d-3f43-b85a-0117e243ebad" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="130" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1688062501" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="a750bfc8-5f0d-3e52-9805-0f196f0c20ed" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8b08dda-0abd-3d6d-b10d-830356a32f4a" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="131" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="6d3b3c42-fbd2-388c-92a7-8c3eef4431ed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4955fd0c-4691-3c6f-bbc6-7ba762449b24" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="131" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="131" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="63921513-fb5e-3245-8f1f-f9f7119886d8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c1248fe-3f91-3c55-8b69-8a6b38442345" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="131" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="131" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="3a846ee7-d1e1-37fd-b659-851a3d32a1b6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc83e7de-4261-3ace-bd9a-420d07257cca" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="131" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'runGameThreads'" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="3" auth="yshi" locRef="4" rule="FORMAT-28" lnHash="-106623271" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-106623271" unbViolId="5244318a-fba8-3e05-8060-20365c82ccb9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0238ab10-861d-3a37-bc0a-56bd971179bc" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has Cyclomatic Complexity value: 1" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="5" auth="yshi" locRef="4" rule="METRICS-29" lnHash="-106623271" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-106623271" unbViolId="73cfa1e6-8839-33d8-80b4-564d2a8d555a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f9a4d3a-a9a9-31b5-9671-d6ae35e14897" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has Essential Complexity value: 1" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="5" auth="yshi" locRef="4" rule="METRICS-33" lnHash="-106623271" rule.header="Report Essential Complexity" tool="c++test" lineHash="-106623271" unbViolId="a9c84b1a-879a-3aae-98b9-a3ac73f865bb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb14e822-757d-3c6e-b4c9-a4243241e542" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Naming convention not followed: runGameThreads" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="3" auth="yshi" locRef="4" rule="NAMING-17" lnHash="-106623271" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-106623271" unbViolId="cf0a237a-53a3-3a4f-98cb-c200d9673acb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad3feb94-a155-3843-9336-6526f42a1efe" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads' function is not preceded by a comment" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="3" auth="yshi" locRef="4" rule="COMMENT-04" lnHash="-106623271" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-106623271" unbViolId="ac55a5f0-bf41-34d6-8bd0-999a10f002ea" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f41d57e-00fb-35cf-9abd-57156e9dd294" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads' function is not preceded by a comment" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="4" auth="yshi" locRef="4" rule="JSF-134" lnHash="-106623271" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-106623271" unbViolId="cd6fa899-b771-3a24-9404-91d59eaa8bcd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f86399f-5529-3d34-80a1-5cf65a6ee40c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="7bb48238-f458-33ad-9c0f-bd3e87c23f01" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c850acf-e280-3301-87fa-49775045798c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="90df9ae3-e69f-3ec2-b57c-c14abbd2a2ab" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5444e1f-1573-3265-a62c-af410ce255a1" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="-106623271" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-106623271" unbViolId="b5ac6011-1f0e-38de-9a75-e9341d11529c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82f9afab-f54d-371a-a017-2bd3723fd56b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="c001fccc-156b-3a8a-a374-9eb56374bff8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c670b61-f86f-392e-9f4f-fe999f2d8fdc" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="059d5f17-bcab-326a-9ee4-38c745d1c459" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2f6073c-68f5-3cde-9fed-c4588b42b3f7" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="a514ccd6-f9e4-3950-b07b-8439c98d0aef" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f20ebc1-e5bb-38ea-9819-e21a07dc178d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="a50696ba-999b-3eb4-8b5d-b15b1359261d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f86f20a-fd56-3e4d-b16d-66aeaf2eb4a3" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="530a363f-adbc-34e3-b409-df355e6e2744" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec103442-d799-3ee2-8acd-b9f2308f6471" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="b6abff42-fefb-3b9c-a7df-e8428ce0d553" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5cbcf49-7917-3689-bcf3-e5d9d71aa324" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="-106623271" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-106623271" unbViolId="83b343d1-0f8a-312b-9559-ed46485a17f5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3c81943-810a-3f8b-be3d-91d8ea2846da" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="a8ac82c1-5866-30bc-95f4-2e79aa2f9874" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1092ba61-c7a1-332e-9c59-e22303ff8bb2" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="e4621876-0ec2-36eb-bfb3-6c642c69637b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aedf59f6-0a0b-3178-b37e-44e416276d7b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="-106623271" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-106623271" unbViolId="f0244317-5631-3172-a894-e5073830a6eb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a723ba5f-396a-32fa-8ea9-0e3e56b9e433" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="3" auth="yshi" locRef="4" rule="COMMENT-14" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="f24c69eb-b505-3671-9908-d994078c5c3f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1062171-30eb-3199-b9ae-76210af16a28" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="f2478a43-6220-36af-a2e6-6ba2d8ad3485" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="818d28a3-6708-3020-b69b-4e79dfcfb36b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="3" auth="yshi" locRef="4" rule="GLOBAL-UNUSEDFUNC" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="58ee35bc-8883-322f-85a9-f650d216ca8f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c311fa34-fd98-3f4d-8f5f-7514128e5bb4" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="4" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_10-a" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="825fb7b1-3fee-3f40-8612-41e7c5a9fad9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6f4e3ea9-dc79-3219-b7a2-ddfa5a2d922c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="134" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_10_b" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-106623271" unbViolId="c21a7c55-19ec-38e5-8700-d9a12b92dd7d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="992b0e5c-186b-3839-a401-ec1f22f110ab" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <DupViol msg="Duplicated function: 'void runGameThreads ( ) { exitGame = 0 ; THREAD thread1 ,...'" ln="135" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="135" sev="2" auth="yshi" locRef="4" rule="CDD-DUPM" lnHash="123" rule.header="Avoid function duplication" tool="c++test" lineHash="123" unbViolId="a77443ad-4d49-3229-af68-0c8e056ff772" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="b65cd242-41b3-34eb-a1aa-0adc75288af9" locType="sr" locEndPos="1" urgent="true" hash="-1769734618" locEndLn="142" goals="1,">
      <ElDescList>
        <ElDesc lineHash="123" ln="135" srcRngStartPos="0" srcRngEndPos="1" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="135" srcRngEndLn="142" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 135] Duplicated function in file 'DeadLock.cpp'" rngLn="135" />
        <ElDesc lineHash="123" ln="145" srcRngStartPos="0" srcRngEndPos="1" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="145" srcRngEndLn="152" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 145] Duplicated function in file 'DeadLock.cpp'" rngLn="145" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="135" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="135" sev="3" auth="yshi" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="f80ab09b-09df-3b42-96e3-d364a0a30fc9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e788fa1-8673-3075-9039-2a58ae3b120d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="135" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="136" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="409232213" rule.header="Tabs should be avoided" tool="c++test" lineHash="409232213" unbViolId="e1468c80-3328-36b8-b3d0-ace604f220e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1579dc67-62a8-3e63-9bd8-8ae26acc5a80" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="136" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="d607c2ae-5cd1-3956-986d-616ce2189031" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d38a5f1-5b74-32c5-82a8-3e2e36842bba" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="136" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="7bf4ec00-907c-3dcd-ac85-89b7f9415283" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3a7686d-8ad1-3d2e-a4de-5669b2e32b8b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <StdViol msg="Global variable 'exitGame' is modified in function 'runGameThreads'" ln="136" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="136" sev="3" auth="yshi" locRef="4" rule="CODSTA-27" lnHash="409232213" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="409232213" unbViolId="96dc78e0-448d-3da3-a521-172652eae92d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="094237d2-df59-30fc-a7ed-9904d9a73929" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <DupViol msg="Duplicated code: 'exitGame = 0;&#x9;THREAD thread1, thread2, thread3, thread4;&#x9;THR...'" ln="136" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="136" sev="3" auth="yshi" locRef="4" rule="CDD-DUPC" lnHash="409232213" rule.header="Avoid code duplication" tool="c++test" lineHash="409232213" unbViolId="6ffb21af-779a-36ab-80cc-87d19078580b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="e46189a3-ea6c-3139-b557-abe4f4fd2d54" locType="sr" locEndPos="47" urgent="true" hash="-1769734618" locEndLn="141" goals="1,">
      <ElDescList>
        <ElDesc lineHash="409232213" ln="136" srcRngStartPos="1" srcRngEndPos="47" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="136" srcRngEndLn="141" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 136] Duplicated code in file 'DeadLock.cpp'" rngLn="136" />
        <ElDesc lineHash="409232213" ln="146" srcRngStartPos="1" srcRngEndPos="47" locRef="4" locType="sr" srcRnghash="-1769734618" srcRngStartln="146" srcRngEndLn="151" srcRngFile="/FlowAnalysisCpp/DeadLock.cpp" desc="[Line 146] Duplicated code in file 'DeadLock.cpp'" rngLn="146" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1123182240" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1123182240" unbViolId="21bcfa17-d695-3402-b612-b7e330b64977" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5697c7d6-e565-3cb8-a089-f496afc26878" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="2be0a701-28d6-3bd9-a661-80c40bbad91a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0edfe9d6-5b9e-3230-b965-ed7c294e4e00" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="f7b8afd4-f8a8-35e6-8d6d-5611e4571546" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dc65808-d18b-38c2-b542-e5e8e272b6d5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread1' uninitialized when declared" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="48379c07-9373-3a6b-ae6b-58174748e395" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="971d561a-d925-316f-a78e-6ea36f5e4552" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="265b274b-25c5-3d0c-9d0b-ab1a7050631c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af44e8a8-153a-3c7c-8f54-5aecd4207ded" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="4f2fc6ae-fe23-353e-bc4b-0c7adc49d103" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1f64a53-2724-345c-8634-a1f97d655134" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread1" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="6bbd7d04-d68a-3402-8f7d-52a0bf325771" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4345247a-c714-3f7f-9024-1241d1e09677" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread1" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="03ba8728-c692-3201-a2c7-378c19cf51fa" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="387728fa-b633-373a-8740-381b376d4bfb" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="6263d357-6dad-3765-a172-e028316c5935" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="58c36329-83d7-39a2-a0ab-208d864120b9" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="ebca802a-4ea4-3f8d-aad9-5ad4f24c7673" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="93f59f69-d677-32bd-b966-c246b5bc328f" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="6b32cc59-b095-3fb1-9ffc-63dc90d9ec52" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="badc9bce-fee7-319d-a4b1-71011edbd648" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="c6356a43-bd62-3b95-9c03-90dea5938471" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="27f9bf17-c5fe-3bef-8f77-713ad1c7da60" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="325898b7-a99c-3c86-80ad-46998a1e349d" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f52a0c5d-fe0d-3624-ae46-6d4c94c9ae97" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="13383239-7302-387b-a777-74de70eca05e" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="48ed395a-03fd-33e5-b011-b59657453135" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread2" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="b0e0e3df-e74b-310d-b632-a29727dc7038" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e454fa5-e768-3fba-8c79-b34e7e7c5ee6" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread2" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="41ceafdd-8a8b-3ac3-8391-756b3388ac85" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="277e77a9-f9ff-3d30-aba1-5b43481a7044" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="6172ad10-b1d0-34ff-aed2-8549d7ca4513" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02d1212f-025c-3954-88f4-d86f74a0720c" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="486afa6d-9223-3a93-97e0-aa127c0378b2" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ecac7d1-83bc-331e-a9a6-1d61e355af17" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="08a2a404-f061-3c76-b9ab-29f4e8238437" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="946039fb-7760-377f-bbb5-43e1d75c06de" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="25c0bdc0-6793-37d2-825f-e29cbf936f1c" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da18386e-2864-3a5f-936b-5f543d375e4b" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="41e4d4c7-cc16-384d-b806-04b93dfd7090" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dbb818f-2807-326f-bee9-0b8eb4c2e295" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="075828bb-da08-35eb-869f-b1539b619405" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="758f6905-3f6f-3427-acd7-273b5063f247" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="91a1e1fa-fd1e-3466-a27f-3fb90300ae45" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bb77102-0dbc-377f-9fa4-036042d6b5d9" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="7c916163-9eba-3cc6-9c27-b4fee8235e15" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e89e1c62-b978-3187-8f14-1c274f1c35c8" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="2ffcb5e2-029e-37ce-8018-b699bd9f3486" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40529f15-e620-3688-bf3d-b9b9df5f2ba5" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="d7549da8-493c-311a-a318-e05bb8c3853d" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72927e71-faed-3b37-9137-46e9cf9ee68f" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread2' uninitialized when declared" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="0f44505d-ae27-3a3f-97a1-137036d8cf28" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8294fd37-feee-30cd-b3ec-495ff233a3f6" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="a5096c02-ea7e-3599-93ec-2a7c66df79bb" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fbcddc6-702a-30ac-bad9-c3761af9a5c4" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="a05e4622-f79f-3c41-b83b-b0aee32d51cd" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49dc4141-3f3d-35f6-91b0-71f7d866b18a" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="745548fa-c9fc-3caa-94e4-76880b4f3536" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03b90058-4b3a-337d-abf0-34a8a0afe369" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="e7d47595-6443-3828-a6d3-51618c10b41f" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36fc0395-88cf-333e-b8d1-d0d3f7d3478d" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="2c999c55-644d-3157-82c6-2bcf51eeb2c8" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc11f52c-bc63-3997-b312-e94af125bea0" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="c4637ad8-80f1-3f5b-bfc4-e65c5665a242" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06fc0aa3-c995-31d3-9d16-5cf9022fd707" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="83f8cab5-d1bc-3282-86cf-e4025a07c5f9" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64b580e3-ff13-3fd1-a7df-9b25ec9f05d7" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="2a5a172f-58d4-3042-b513-0965c10754ff" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2b9b528-6549-300e-a38c-4b37a3d5ba55" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="85ed89b5-08ca-3b76-ba85-ace9f8fabcae" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3a0c8a8-2d27-3804-aa48-c41889861e29" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="b9e06129-8f32-3bf9-a82a-d072320eef43" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad97a916-76d0-3013-bedf-803d7b0dd0ef" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="0e01db84-0d20-3c76-b091-2187a6b322aa" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0c64821-67dd-3188-ad95-fe737dc60793" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="cad357ab-8b28-37ee-81e2-93614f566c71" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35cac2da-b67c-3f12-922a-5b681a250164" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread3' uninitialized when declared" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="5aa85197-0097-3de2-9393-de9b38eda97b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a555f7e7-0ffb-3444-880c-5262026d7dd2" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="6bb54d88-e68e-3f39-85d4-56b2182e8e40" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c6eae9f-9163-3116-8709-7be2f9a2b714" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="cbc36e39-190d-3338-82cd-ad3a86c480c5" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a50b558c-c40b-3a8e-8414-89b27afb1ed6" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread3" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="1c2925f3-c3a2-32d8-9ccd-33fca3edca9b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7afb4ff3-d1c0-37bf-b8dc-37a94b4ff5b2" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread3" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="cada8e3d-e878-3399-a80a-1d018c9d1b7a" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f2bccd1-0231-3fa8-b6e4-3150409c5d54" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="0d3d6617-28bf-3bbe-8278-e9ed99ee22a7" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="838511d6-36e3-360a-b8e6-e9dd838c6ed8" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="f47c3b21-9112-39bf-a2d1-09fe9f3239bc" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1586ccad-51f3-36a5-abb5-2b0ae1b90021" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="0d0563d7-4120-35cc-a2f5-283ad294b6a5" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="82177eb8-3e4d-35af-b765-897a03b561ee" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="4baf4e74-ab1f-336c-9339-e733443ab5c8" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="780fc4c5-b70f-36c7-a1f1-99152f92b398" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="16666af9-e601-383c-b4fe-69c18d34eb85" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="4fa9673b-097c-3bef-b32f-3c6ef1aa70a4" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="9401d15f-da53-3229-b269-46ea253a1a29" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="34c98c3e-49bf-39f8-b0a7-1c58fc05d943" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread4" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="19547344-9eec-3fd6-ba66-0c9d43b21362" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f97e6f7-b2da-3fc1-b7e3-bca97479755e" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread4" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="dc38913c-d4e8-3d11-8f6c-5ddf326cd83e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bbb4f9d-0583-3e35-9bbc-79843ea6f8e9" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="c027647d-58f8-3c43-a7b7-d1c2c2f34faf" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed3b7cd1-28ea-38f7-bc3e-be63331fef11" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="a90e5978-42c1-31ea-9914-58a15d05b612" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca4242ba-f1a8-3105-9ad4-2037eec46cdc" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="db26bea2-15f6-3296-88ff-389ffe01a652" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4936c2f6-efb1-32d1-94de-929fcdfc5102" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="f331990a-65e3-3d98-8d87-ae1961489f83" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d462b4d8-5eb5-35e7-92f3-3d23a909d446" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="b1ae0bd6-d17e-30f5-983b-7e1c142da0e7" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="029c500d-7d05-37bd-8428-5f3c5165e9ca" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="525ec4be-2edf-3ed8-b9c7-8e42bcaa36e9" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3563a209-764b-3692-a392-ca4aef31be03" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="e8b6b15d-420d-3f7e-8305-c54030b03b61" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae3660da-017c-3441-82a3-7e64c4f67ed4" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="b4875a44-1812-3c2d-95c5-d8cb44d48729" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54fdd8ad-1d44-3ed3-8ab9-3a7ff130fec4" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="31dcfef2-7446-32c4-8b92-f3ed8dc4e146" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dff1a13b-3045-3ec6-9ed4-ecd082fa5a61" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="c4e9f3ae-d745-367e-b1e3-43383ea1961a" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b53bba06-3c8a-38c9-babc-c86ef1b925e2" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread4' uninitialized when declared" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="f307c1d9-22e4-3900-b880-b697fa911072" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb8710a0-2e0c-3b8f-8024-6bdd5193d6e1" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="08d96618-c226-3174-9b70-cd3ab6d21268" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb7bc15c-296d-3b0f-b628-cb71db9c5a9f" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="137" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="6c46821f-d5e6-3938-bd7e-38e05be00c98" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a60e33a-dbf9-3dd5-9ec8-58c3a9b7b529" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-2033288726" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2033288726" unbViolId="7d974b4b-f0df-3b1b-b0a6-4020691b5bbb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4255dc77-5feb-39e4-87c3-3ed99d91da6b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="7e40c225-1541-3e47-9b8d-bd3514240d3b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cf8147a-3bec-3ff2-bf04-a7e1ff3c9c23" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="5d162d39-2785-394a-ad48-504d22ad4b95" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d025372-416b-3a8b-a4df-1ac8adb7f64d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-2033288726" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2033288726" unbViolId="9f62cd33-0b37-34f3-99d5-ecf2ee77dd89" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e25b7152-6b3c-3d41-8f31-2e537c420d4b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="6555bb90-96c3-3ecb-b7a4-d5f78c5f31db" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c4ac823-4213-3b6e-b8e7-15ea1e496ecb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="823bfc4d-a19b-3104-88a8-ca22c7db7771" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cf733fc-e791-3b56-8671-6cd7a21d1907" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="4a932b12-e3cd-380b-8aac-222b2ceeac1c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="666f8762-720e-3429-867c-14f0eb9696cf" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-2033288726" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="04d8873a-80f3-3b6b-96c1-cb3366547515" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81e5740a-e029-3857-b876-1ac367deddfd" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="2890dc83-fc88-3dd1-b12d-1c2da11c7f9d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5704f582-1205-36c4-b27f-c5f3fd5236aa" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="2cc52b06-124a-35fd-ad0c-18371399c987" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="439beae6-1ffb-3398-9b3b-5e83b2cb5f0c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="d47e95eb-603b-3521-9642-168bbd3afe40" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99945c1f-4c4e-3995-b7f9-23f10b9bbe9d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="780678c3-3b42-3011-959b-8e9e526b2411" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c267f6b8-2542-3034-b5e3-d6be6b5a6310" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="e6a69967-64b3-3282-b20c-297ab90ad515" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cacb6280-4010-36c0-b68f-606e6ebd3536" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="5606e4de-d67b-37a3-a469-a36994b7f97c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9890f0c4-29f3-3a9f-8788-00dc10fd51a4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="3c9d68d2-ac78-3e7a-a037-44b83b171692" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe20fc6b-eccd-38bb-ae66-a2f33874ed78" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="9468c8fe-4f6d-3a15-b321-d13ba2961ff3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="101ee419-a5a6-3373-b56f-3004550ac5d3" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-2033288726" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="88dc746c-36e3-302f-9ca7-c81de5eed2b5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c358cedb-384f-35c8-bae9-b216337a8c8c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-2033288726" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-2033288726" unbViolId="cfb5aef6-24ff-3c59-b94a-d2a69699397c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42383506-b48e-3ff7-a104-b056b13bfa44" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="d15fabae-11c7-37c0-be54-714fbe9ba381" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d5ab59f-67ad-3f00-b4b5-264eea60d813" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="52f6e966-70bb-31e8-a21f-02154ff2ea27" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40a95cc7-6936-3121-8247-b224aa35b2ec" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="d9e5bf39-0465-3ae7-9948-a7c632ff8137" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8983ffd5-38f5-3225-ac51-c65cedf08aa2" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="ffede9ef-4f55-33a6-a850-3a742c6276c4" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60984fc8-707d-3d35-85ad-8c4e3876062a" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="d3001295-2ecf-3d00-b5da-ce18461e7046" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fdc84ad-aaa5-3afd-92b4-61a847493b88" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="06af54fa-042f-36dd-8f8b-434f460baa77" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f9eb496-a510-3d94-890e-9af526cc6a7f" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="3" auth="yshi" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="09cb84c2-bb73-3a2d-8920-2e67b275043e" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d8cdab3-ab50-3b7c-93db-a2232fa67aaf" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-96" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="41d1763a-214a-3d8a-9bae-31ffcc6618b8" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b3e7f4b-97b5-32c7-83db-4adaf9e7479a" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="4c22bb81-d580-329a-ae2d-143137de3a9b" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="def03e48-1f33-3fcd-a880-43aafb791b9e" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="e8a71126-6ba1-375f-9087-b9061c8c746f" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b2136ea-ccc8-3bba-b6c1-1f0f8e509f05" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="4bfe6d06-604e-37ba-a2a2-fdc20c9fe2ef" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbd22b49-f77c-35b6-a00a-05cc11dcdb98" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="73c0b55b-d823-3eaa-b891-f681bb1de730" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e6813dc-83e7-3aa7-84c1-1984a16c5470" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="64f77157-4ccf-34b5-bd90-16e1a29822a7" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6993d8d-9d03-32ad-a867-e0742fcd23a5" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="138" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="138" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="7730db80-a253-3698-ad40-6d66d5fe4925" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2228d3ee-7721-3a38-b563-fe67455bb324" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1824414877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1824414877" unbViolId="f15ee428-1afa-3cb5-861c-9008c03f1232" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46c285b9-c968-3417-87ad-1280a46c5383" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="2b7e85c6-ea2f-3d16-8b8b-e81baa9085d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f975a2b5-b628-3289-b36a-c12758e5578f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="57a0b4e4-11ed-394e-bb4a-ac4f0a401152" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae79c96b-f424-3d83-8641-a3edf0bf6502" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-1824414877" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1824414877" unbViolId="a47ae92e-82eb-3d90-89f9-95f2f1726e45" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce1540e1-f8ac-3c0e-a095-8d28ce3cffd9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="6ca82738-8b3b-3335-bdff-4503d5173c79" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b477a2c-764b-3453-ae37-5a4d21f6c9db" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="04511bf1-5795-35e8-ba26-c2e727d7ec28" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd15de20-f4ca-3bcb-9fbe-a3b9f5ea9ba7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="f7150f1c-d121-3024-811a-7d217d57a33c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a49df7c4-784a-3971-bbd8-97ea18942a35" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-1824414877" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="614b1f13-33b8-3362-ad48-6c735bce06b1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b480713-2ae9-3701-9842-bc90f085349a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="6fd7695a-3108-340b-8944-dec63d1f6307" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="593d17ec-1ed1-3956-bc57-aaafcab05a61" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="c1f73c54-c634-38f6-8865-91d79650f71a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd4ea402-3087-3218-9046-2d084de60626" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="bc19416b-1d0d-378a-baec-ea7280938720" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f46a03e8-4e9e-331d-8815-76f089a7ee47" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="e1b765a3-318e-3c50-a014-1f6334cd0e61" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5bc87ed-8933-30dc-b871-6237df50b48b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="0a4ab1ae-6c1f-35bb-953b-6d10267d9e8d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bd94d74-1143-3349-82cb-5f263365a03a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="929af4d4-ca85-3599-a4cc-d987490c7900" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3e109e0-707a-36e0-914f-51dcbe93eb49" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="a02a7d9b-5ae6-3f81-a873-3515cc719c21" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8e1684a-1152-3bc2-8daf-912b4c478dd5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="123c5637-886c-3131-a76a-4145284daa34" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b1a5bbb-e9b2-3884-a86b-250dd884693d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1824414877" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="be0b2c91-f2cf-36d7-b991-956761ae669d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91df607e-c6ce-316b-a0aa-baac088fedc4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-1824414877" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1824414877" unbViolId="926f958a-ebda-39b6-bc0e-597ece7f7ce4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="474eb69b-d9b5-3e72-9db5-5cad2e260249" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="d908e83e-9c4f-3d8b-9d42-86233b6b9a81" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05fa0510-1023-3f3f-9040-62af6ce75893" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="b19cdb29-1e31-3f55-9a7e-17eec6865150" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2490b3c5-3a8c-3793-91b2-a9f81f9b6ded" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="95dacfc7-0811-34aa-bb32-855d7eb892b8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a79d6cb5-9bb6-32bf-a63e-e88f21a4bb19" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="8bca19a9-9150-370c-8e20-b9cb47cdd58b" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de372cec-014a-3090-8626-f9d129db6008" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="98e56814-9768-33f0-8935-4cdcf835ff8c" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e50ffce-7335-312f-a5db-811a32125c8a" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="e77d41ed-e19b-385f-b312-03dd2161cb40" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc9802cd-c6ce-359b-89a7-6780551b4ee4" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="3" auth="yshi" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="92aec4d8-50c3-3748-8155-fc8bd61e1340" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="111905c5-ad03-34f6-b06b-247a8c0d3b91" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-96" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="44f0b8d2-1240-398b-af11-4d90eb55fff8" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e02fb294-b9e6-358a-a45d-888c35777a03" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="fa08ef1f-6d30-34c9-ab9e-002d32db07c9" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acaad7a1-dd35-3469-b4a5-09e477cc7ad4" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="b7604c0f-848b-3f24-8da4-d9926b9cec24" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54ee26e7-5abb-384d-8dda-9d41c6a8374c" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="27a49b91-0986-3c1a-909b-bf676d1191e5" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c28e2c24-50e1-3283-a7d2-b43beeef4b2a" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="92194036-1439-36a9-9e37-834cb13c76d6" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="761d1922-d774-3654-b423-e876c027fcf0" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="87c5e16e-b5f5-3f67-a12f-be25b11e04ab" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a200659f-e8a4-34be-93e9-2705920ed8eb" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="139" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="139" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="4f291d5f-2884-34a1-9d94-9aedf8df8049" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e261f030-bfda-33e7-ac90-c3b65f87180b" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1305984162" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1305984162" unbViolId="a84a429a-09f0-3cf2-9ab8-5241536b59a6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="085b58f9-1f11-39e9-9d25-800668e31f7b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="ad834f31-3064-3908-93c6-cbde72ed6515" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="843edb6c-1eb4-385c-9bef-1c022c5b28cf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="a4122c7e-3fa2-3834-ba25-348d2ee232b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aba07872-64cb-369f-b469-8659880d7eb8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-1305984162" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1305984162" unbViolId="830d9825-e70c-37a4-8c40-4f64eff569ec" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a126803-6e05-38c1-aa82-9f5b409b1b39" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="3cd56ab2-5b19-3af2-91a4-a12d019ef939" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39296fd6-9ed3-3d58-8931-2bdd86cc02fd" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="ee48f778-5f57-3358-9939-09fcc588c088" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5e8ef15-e43d-3d7b-ad62-5da09021c930" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="18836591-9e2e-341f-a68c-846a507cb224" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89e4d53e-f979-3289-9fa5-52472f28efa4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-1305984162" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="bff5d7db-97a4-393b-b6f8-9ab52f1502b0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6277bb55-8d18-392e-8618-13bc0b79105d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="ab335908-e5a5-35fc-90db-024d33f600a7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7eb5779c-9820-3cdc-9229-85f472c766e6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="741a6954-b971-3c3a-bce4-f876fe6766d0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e944ec11-7c9b-35e3-8b4a-1197b26a2a67" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="7adc4fe0-a31a-317a-8d6b-d142aa5354d5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21ca80f5-c208-30c8-a321-5e001273db0a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="f66ceda7-9e86-315a-a002-d4f17be57b75" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b9c9e47-59e7-35fe-97e5-a4891de68a6b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="6c9edc13-4117-3946-a1d1-dd9b2566490e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="948e29fb-10be-3ad8-8afb-913a800ab184" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="cdfc1648-f1fb-3b6e-a129-d0de2d21a608" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3ef37c4-dc9c-3ede-afb0-d06cbac9dde8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="d6300572-be91-30b3-b973-e56d4c3ca12a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bedcdfe-7f29-3cb8-a763-44f2d9134679" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="98b1f735-e250-33e4-badc-4ce0fe1e6667" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42f67a30-71ce-3f2f-8d06-d7a4e86e0a8c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1305984162" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="1d4b92f6-0ec4-39ef-b0a3-a207e071ddc4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="758b8e1c-5f7a-3006-ac1d-96a803d02a45" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-1305984162" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1305984162" unbViolId="a96a91c3-0abd-37bf-b958-0f0d93bed47e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9dae6279-81d4-3028-9ae5-e6ef2687ab38" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="18c5049e-3f50-3829-ac70-ef5eeb519425" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5ca2f78-01fb-3891-8ddb-8cdb02f0fb1d" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="66d97ca7-d405-368f-918f-16c273dc6ddd" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2a6d11e-5f35-3e39-9cbb-e61bf58643dc" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="2c027691-6f8f-3428-840b-2c56aae9a586" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e43fc7ce-17ec-3843-8735-8823f47a72ff" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="704e8ff2-aa2b-3743-ae30-e13065f09bb7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebdbd4a4-3a24-36e3-8cce-637c5e3accb0" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="b1529644-fb15-34d1-9d24-6289f651d534" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5412a2f6-4198-303b-9b5a-5df1d2ea4434" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="01770998-5035-3013-9e82-cff1d2bb7387" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef55da55-27cd-3c75-ac8e-6990cacd7b7e" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="3" auth="yshi" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="7a08ae0a-8869-3411-884a-1a2e7f766547" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="215fb4f7-9418-3aa5-89ff-28b12e51f88d" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-96" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="59fceaf8-72d1-3b47-adba-9bbc75bd5233" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae3d536d-2c35-3c10-8461-8b2cc5a42e97" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="0d0a2c04-3947-314b-a5ea-fe412db32bf2" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4060894e-658e-3e73-8edb-cfbd481374db" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="26ceddac-cf62-383c-afdd-06384a5bcc84" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b83c86b1-cec8-3bfb-ba5c-afbe317d401e" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="6edfd8aa-5eb6-3f61-b073-13c333edcf97" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30a052f6-8142-3f75-992d-7443593df9a2" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="3e09604f-d357-355b-bc1b-e69232c83d45" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c49d411d-ec31-3d92-a92a-c744b0d338f2" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="f7834415-7687-3918-a420-dec84afa88ad" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d71b4b5-0dae-34aa-882a-731de20ea86a" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="140" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="140" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="a15ad94a-cee8-3222-b88f-3004225b87db" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f4b24eb-4c88-3bec-87cd-79f56167029a" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-604051279" rule.header="Tabs should be avoided" tool="c++test" lineHash="-604051279" unbViolId="53996bb8-0ec9-37e2-a39d-bab9b81da1c2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d13d2fe0-64d9-3588-9026-98dc36c8835f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="11ea2976-485e-3d8a-ab68-8e1ad307ac2b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1854f04-5604-3f6a-a8ff-028da51d3648" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="59599ad7-158c-3f64-a12a-4274c6d804e0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83d40910-1202-30ca-b899-eb73b56eaf7b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-604051279" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-604051279" unbViolId="9e6d0673-9dac-3df2-81a7-107da2c2e83a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ac28268-47f8-3e84-9a3b-7d915b4a28df" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="1c92bf0d-dbaf-324d-944a-13c51db5b27d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfda1dd5-7f1d-31b1-aeaa-a6b4eafa0d42" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="54784822-b8c0-3450-b382-5b4192775416" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be30d459-a6d5-3cb6-8ed3-6cfb4155269c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="49da5298-8001-3b42-8e62-a65536f03352" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bb63ba3-09ca-35ec-a2ff-204df3f8506f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-604051279" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="cf8ddae7-7937-371b-8a82-e6d56f44cfff" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75c264a7-99c6-33bc-9e3e-1b4c2c35746e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="1fcfa30c-1de8-3677-97cc-ef956adf4cc1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ce11483-da10-3bc9-8b78-d045600557cb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="df4622c0-c255-3e91-b103-7eeb8de5dba0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78eca29e-19b9-396e-9a2c-e64536542e13" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="82e291d9-d8ae-39f7-a50f-13c8bed911f4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f195fafe-b496-398b-869f-158782c79753" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="d475a8d3-f0b2-3e41-85b8-d19c27ea3be9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6076a08a-bbac-3d82-8647-90bad6ac9154" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="2f38baa7-dc1a-3973-bd9a-6268ee377078" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afcd1632-e304-3483-8bc5-66675146f3f7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="bbcc9985-e71a-3482-b7bf-e47c8cae7568" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2beb401-e16e-3a1c-a754-a28b4cacd2e9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="d81e317f-9faa-384a-9785-eca8250ebf22" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="daedaa5c-d22f-3c23-b73e-c65066c56f61" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="b0b12632-4f4b-3c0b-a408-16dac4698837" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04f02e0b-78e2-3bb6-b261-76b25fc03897" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-604051279" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="7e2d3878-aba6-372f-b219-a28e1e72ee85" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="339e2f73-5985-3b30-bab0-832f46c821d7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-604051279" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-604051279" unbViolId="1b1698b5-5173-3363-8c90-8302b848f16e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2701e46f-9196-36ee-8798-99e32110d2d3" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="9ed234d8-15ff-32f7-839c-54be1c53869b" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1d44ca3-86b9-33a3-ad4d-90acf568b69d" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="77015d96-44fc-3761-ac5a-8cac8ab23480" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14748450-3a5d-3c31-ad0a-3c6103deb074" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="b12d75a0-95c9-3303-9996-ab11534a8748" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ab7c4e1-8243-34d7-953c-71044d5abea8" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="f9d24975-79bb-33e9-a916-c29d630f23cf" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6eef0ae-6fe9-3cbc-837a-7015e5389389" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="443c545d-fd0b-3767-b9dc-c43f7da92023" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4475076-f52b-36f6-8400-3ee3f28c34bc" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="9f7e11c4-7d34-3853-a096-7943afb507f5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87831f4a-51b6-3cd6-b78f-5a852d0eb2cf" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="3" auth="yshi" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="41025a8b-e664-31ee-b786-a93e6aa6c86f" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3855aab6-5333-3adc-8173-64183b59ce8c" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-96" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="033dc438-097a-39f1-9729-09df4e7ec99b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30a92932-0da8-3f37-96b5-ea000fd1f357" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="cac2614a-33dd-3b1f-896f-31ab1ce503e2" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48901f13-55ad-37b4-825c-c5cf311db526" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="2dc17413-0b5f-3680-a173-38797f8e4b6e" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faca2c40-7d45-33b6-9c46-d40da4effb76" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="bf5007cb-8f25-361d-8d02-c79675dcb386" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="593b8959-a766-360c-ae9d-2f7f1b903489" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="bc2157ed-380b-38a2-89d8-4f0efba59901" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84af211c-9f85-3d3e-bcdd-6613527e3e5d" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="08d3b2b9-cdc9-393d-97f8-44c489a05561" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ac5992f-58e3-3c84-b2ca-fc835598962e" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="141" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="141" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="942b5bd8-0cf8-366e-8b00-44d7590d4038" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6be521ce-692c-3b17-9ccc-d4273f2f6977" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads2' function is not preceded by a comment" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="3" auth="yshi" locRef="4" rule="COMMENT-04" lnHash="989655515" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="989655515" unbViolId="08b0a99d-aaf3-3782-8e6b-46adc761d297" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e10cd135-0c45-37dd-9389-f5b971f9bb48" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads2' function is not preceded by a comment" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="4" auth="yshi" locRef="4" rule="JSF-134" lnHash="989655515" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="989655515" unbViolId="53ee3ed4-eca9-30e3-b371-7788f3b3202f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23a34a38-dda8-381e-8fd5-1bcd6c82c36a" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="4" auth="yshi" locRef="4" rule="OWASP2019-API9-e" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="e7ea9f08-aae6-3400-8c74-ef7abc2ed0d1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9994280-17d6-3985-8377-0bc09cf66a4c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="b8eb3971-e197-3a50-896f-259cd9ab6077" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a10454ba-040f-3656-8f0d-6b03981247dd" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="4" auth="yshi" locRef="4" rule="JSF-137" lnHash="989655515" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="989655515" unbViolId="c4b72d96-30a0-3af2-8570-5ebdfe48c8ec" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e915a02c-a06d-3ba4-a54a-2a53d3ff074c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="4" auth="yshi" locRef="4" rule="MISRA-023" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="be64bd98-ce07-30d1-8d20-bd5713ef4abf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea66d4a9-7135-377e-a66e-acfc12a06a8d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="2" auth="yshi" locRef="4" rule="MISRA2008-3_3_1" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="d98590b7-5d42-3600-9604-0a90c703b682" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b80ac31b-3176-3adf-aef3-7f9fc568c6d4" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL15-a" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="3fdb78c2-6091-35d3-b5e9-a61c34bc9531" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b077f82-5bff-304b-8826-01e14d6b77ee" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="4" auth="yshi" locRef="4" rule="MISRA2004-8_10" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="559d19d8-aae6-33e3-b041-e3768854d03d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c314b5f-ab99-3775-9888-d103294acec4" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The name 'runGameThreads2' should be composed only of lowercase letters" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="3" auth="yshi" locRef="4" rule="JSF-051" lnHash="989655515" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="989655515" unbViolId="88706714-c543-32a0-a7b5-75d3e295b96f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3941039c-3abb-3b5e-9e40-dad7a25b3e10" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The name 'runGameThreads2' should be composed only of lowercase letters" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="3" auth="yshi" locRef="4" rule="NAMING-44" lnHash="989655515" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="989655515" unbViolId="c4334b8c-1335-3a17-af74-26af9968a1ab" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a41dbda3-e251-3ab9-97fe-c227031ffd7e" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="4" auth="yshi" locRef="4" rule="JSF-098" lnHash="989655515" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="989655515" unbViolId="8e135dba-6e55-34ea-8390-8d2010a6b90d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88f01f4b-30dc-344e-8511-c727f701e7cd" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-36" lnHash="989655515" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="989655515" unbViolId="2c0c6e5a-837e-3989-be72-d400b31294cf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e31f137-db63-38fd-9a44-acb3a1f6b32f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="989655515" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="989655515" unbViolId="52a87420-26ac-3724-8acc-50fa3e8ba547" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32e3925c-e35e-340f-89e3-e84cf75c2204" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="2" auth="yshi" locRef="4" rule="MISRA2008-7_3_1" lnHash="989655515" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="989655515" unbViolId="9d8331a0-d60f-30f9-ab8a-6207fca6cffa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b72e195-b541-34b0-bda5-824cbca2a42b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="3" auth="yshi" locRef="4" rule="COMMENT-14" lnHash="989655515" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="989655515" unbViolId="7285e9b9-07e0-35ee-8eeb-f26d5599b940" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2125bbcf-5f10-3ca4-906e-79e7a5927a96" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="989655515" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="989655515" unbViolId="2fb45f51-8536-3015-94f1-53792098e267" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ffe842ea-07d8-3dcf-82a1-744f8864da72" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'runGameThreads2'" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="3" auth="yshi" locRef="4" rule="FORMAT-28" lnHash="989655515" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="989655515" unbViolId="1303bc9e-66f9-364c-94de-c1964435fc8a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3827b743-918b-333c-a595-0958bb1e4527" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has Cyclomatic Complexity value: 1" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="5" auth="yshi" locRef="4" rule="METRICS-29" lnHash="989655515" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="989655515" unbViolId="03558dac-fcdc-3d67-ad2e-fa942d39a654" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8472f30f-9ce0-359a-ace4-3b103e894b8a" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has Essential Complexity value: 1" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="5" auth="yshi" locRef="4" rule="METRICS-33" lnHash="989655515" rule.header="Report Essential Complexity" tool="c++test" lineHash="989655515" unbViolId="5c1f36b8-7246-392e-b1f5-31b804bd5113" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e996731-d861-3239-bc59-383ddc59cb88" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Naming convention not followed: runGameThreads2" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="3" auth="yshi" locRef="4" rule="NAMING-17" lnHash="989655515" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="989655515" unbViolId="0e8485aa-580f-3817-9691-48973bb158a0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48e6032c-87e1-3dd5-81c4-1caee6656232" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="3" auth="yshi" locRef="4" rule="GLOBAL-UNUSEDFUNC" lnHash="989655515" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="989655515" unbViolId="0f0cc82f-486f-3d00-8fcd-8f956e6bac86" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="5c15663b-e739-3b5a-84f0-aa36fa437002" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="4" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_10-a" lnHash="989655515" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="989655515" unbViolId="84662ed6-ca2c-3488-943d-4b3290c48191" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="af4bbe16-8df5-3662-b36c-245479d51554" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="144" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_10_b" lnHash="989655515" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="989655515" unbViolId="052caf26-7b3c-369a-9e8b-96052c12a24d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="93e26f0b-9a5a-328e-8c6e-8f155b93c3e7" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="145" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="145" sev="3" auth="yshi" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="e94d9d08-3038-3a16-9836-3900143828ed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91d179fd-468e-3f3e-a22f-dc0c11db3565" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="145" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="146" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="409232213" rule.header="Tabs should be avoided" tool="c++test" lineHash="409232213" unbViolId="87f85d47-3168-35dc-813f-afe19fe90587" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="073eb6a1-8984-352c-85c9-04d8eaca7639" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="146" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="efd27a55-6585-3509-87f3-c9f44d777bc7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46458423-808c-3de2-8ba3-5492c8e8fca0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="146" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="1970466a-e25d-34e5-917e-645182f96e34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b9e434c-df3b-3304-9bac-4bac77c6037f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Global variable 'exitGame' is modified in function 'runGameThreads2'" ln="146" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="146" sev="3" auth="yshi" locRef="4" rule="CODSTA-27" lnHash="409232213" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="409232213" unbViolId="6079a74a-6273-3b61-b75a-e7022f16f403" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e31c53e-b5d1-3b8c-80d3-53e29304b635" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1123182240" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1123182240" unbViolId="f3194444-7368-305d-ac5e-410156a128a2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d447eeb2-e527-39d0-be5f-d0f76af739c1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="54fb030e-7022-3afa-ad47-c8ddf6ba0c32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8877f819-aa3f-3417-8154-62dc5dd85192" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="2f63b46f-2b04-37db-9a03-463033358fc5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28ad39fb-9fc9-3900-a881-9c714f210657" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread1' uninitialized when declared" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="76cee14c-e792-3f69-9957-5eb5d6caaee8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d54c2a4b-1bf2-3f76-bb6a-08d2e52bdb61" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="08c4df0f-fe07-39a9-a8aa-3388bbcc4450" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbc35fbf-5431-3566-a7d0-f27ad2090889" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="087e28f0-693b-3bd5-8278-cc8eeb914c52" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6169c9f1-9add-3478-9a52-9efda8a92dd7" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread1" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="a28a76e6-f082-3b10-9ed5-5df705fa6426" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7578ec9-b082-30e9-b470-774845b4525b" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread1" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="97a91b83-1546-33dc-996f-c0902a16f96e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09f9d1e4-f55d-3165-aee2-99452309f8d9" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="a16f3383-e0ce-3884-92c5-2c04c6b0e84b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="cac30f5f-f5b2-3c6b-9746-4306ba55d367" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="0a30759e-c6de-3b4b-a069-b37d9932182b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="50b1e04a-8440-3048-b0e1-77f67fc97ecd" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="641373f6-5a83-3062-a903-06d62e4299f9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8ccbdbd4-439e-3564-82e2-9096fcb86005" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="dd43ac9c-4a70-3582-8716-5dd503ff8c77" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="64e2ee87-2eb5-381c-b126-fdfaad25eff6" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="3e9c153a-c162-344a-b7d9-c76f4097953d" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="7c085553-1e4e-3e0a-b426-cb62125590d1" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="628f1098-de4b-3ffb-8d7c-6041b7ce2e43" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="80190d39-81fe-3e25-8128-c197b91212fc" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread2" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="e965f464-21bb-3964-855b-bbb4a7a1e9c8" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fc947a9-a22c-3093-8635-6ec1f477b218" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread2" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="95876d79-b46f-3839-bb23-8fda0097a2fe" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11a4bd50-e1ce-388e-909d-7f792706ed54" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="9a7c36e3-c233-3ef0-b4e0-5596c8045544" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5772763b-cdc5-3d66-8aa5-d55977cbe0a7" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="b7e92d5d-3615-393e-9c5c-23b990dcd5ac" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="980c15a4-24b0-391c-8e60-cff1d4e9456e" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="74294182-a3ee-3e82-ae45-b5a419f1c3cd" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89b7fa84-505a-3f5f-91a8-5b6946111390" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="8c423391-11ef-3d1b-ad10-9bf5635ffbae" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d73a675e-b08a-3da5-a21a-67f16b7532d6" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="a9161241-6b78-37d4-8a5d-166bd97153cf" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="417d6f84-e15d-32d0-af6a-cf64104d616e" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="ef3b4e6c-2043-339d-acfc-5f57ed2a1f07" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ae67b16-6075-39d3-a7b9-e864a605b6cd" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="f80ed2a6-a92d-32ad-b3ee-315e256744dc" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79f9e641-440e-31a1-ad58-61180cf5d68f" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="3f87d968-c36b-3737-b88b-68dd3830c4df" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ccd6349-3799-374a-880f-ae2536f7c6d7" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="fb6f54a6-9fe5-3ac7-b382-30d100120728" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbed7941-a7b5-353d-804a-340c1178c66c" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="911a1198-8d48-3a94-b843-9288666fef17" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afc1d9cd-c561-3b42-9013-37a4f5e366c0" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread2' uninitialized when declared" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="2cf2e903-3c3b-36f9-8209-e25c257c5cb4" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06ed66a0-e936-34b6-a8d2-2b445508e6a2" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="f0ed7adf-478d-3b22-b0a8-332a92c18df9" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7faff497-90e4-3080-ad04-b8fe1253cbb0" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="1be6a898-d92f-3e57-a2ba-9843f348c2a9" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e95a87f3-3118-3751-a937-c73a5b3b69bf" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="9ffa8383-bccc-3932-85d2-aa296128c405" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a384bec-f84a-33b5-b3da-38e5b84b5217" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="3678c366-14b9-3283-b38a-219f831456a1" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6eb52d26-337c-3143-98dd-d9d66053cf98" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="9219eaef-b21d-3dc0-b22f-872a4edc2453" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62e0d2e6-8edb-39dd-9c13-5edc67054a4b" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="2ba9025d-1edd-3959-959b-99adadc0b1f3" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1675c8ed-6c5d-3a18-8c23-fd1c7ff18390" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="e3288b2d-5687-3537-9cbf-dbfddbdf74af" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ae0792c-9825-3747-8236-80ead4e60adf" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="6a81d86b-3da9-39f9-82d2-54ab7d0ca602" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ad844c2-6b1f-3ece-b54c-b12161c35163" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="3493c791-072b-3bb0-ac50-598fe9ec30ad" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4aa3dba-ccb3-366e-a44a-dc3839010010" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="2ae301fd-443f-35c9-8425-fab124f01b77" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59379aec-ec84-38af-b6ec-ac50eb0b27fa" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="6d17b9ce-7a22-30ae-9fe2-127a1385069f" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00a6e03e-62e4-3f9a-bfac-3b99384d9bf8" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="e7d43caa-5761-3a93-ac44-8410c1797280" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cce35b34-62b5-3078-8dce-c69f3ad5f87e" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread3' uninitialized when declared" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="3e241f49-efa6-3812-96af-600b7e418f52" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12c904fe-e04c-3c77-b342-d82dce80df69" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="11b83f89-a65f-3a95-a7f7-aee4e10dd8ac" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bef82fc3-4d8e-3660-8a42-115432d7e995" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="2d07c1fa-3c4b-3b29-80c3-20ef804424b7" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9513ebde-6bfd-3243-9c67-003b00d8c8f7" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread3" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="d8cd21ab-6b88-3128-884a-bdbe21818f41" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc81cb1e-cee0-3ee3-8ee7-b08b3ea95818" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread3" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="91959de2-0218-3153-bb6a-89fac9bf270b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf4ccead-c7b7-3b04-82cd-34f76b9d791d" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="d2ebb516-bafd-3d0c-b6d5-36c2f1a4c287" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b6368577-e894-36f7-bd58-6df18f7ac45c" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="fc414bd1-d43a-3856-8fd2-a59a07b7ecc0" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="371c1b03-24b3-36c5-bfb4-efddbd368a9b" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="89804780-6a56-357f-aaca-f60b85d6e96e" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="a4ffa8d4-0cf0-36e7-803d-501e4fa60cd5" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="8cc8e30f-03da-301f-a748-5d53cea9084e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="d1011ae4-dc66-3803-8a40-d10c3d82df89" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="49b9d607-e655-315d-b599-f1fd97758dfb" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="a74ab01f-ee8e-3575-ae5f-fddfbd5cd5df" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="2cefc406-72f4-32c0-bf1b-77e9f74f5ba8" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="09dd0c79-ab1a-3cd4-a24a-4a61c15c83fe" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread4" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="81606b9b-b047-3949-a152-dfbd16011c6f" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d434c744-cb12-37de-9b51-ba365fed3cdc" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread4" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="663ac387-f3dd-3b91-94ed-b4a881653206" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3be0de32-dda8-3aa4-81aa-1afdcf91c813" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="c57e8b26-b9ee-3bf2-9950-b8c79ba24a94" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfc6b0be-8d56-3239-99bf-e4db6bb17885" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="24e09573-8430-3427-a086-5f56d58e6da1" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f11cd16-f83f-356e-b972-79880b5c2475" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="c4bc1e94-278d-3506-bc31-234927afd4a9" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08a659d0-7752-30e0-8125-8f2354778cfa" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="eab71516-feed-3b84-ba0d-22aa1323b4d2" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2150db4e-5c38-33d8-a022-befd4ff6aa18" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="8458bf6d-316c-34f0-95be-c8ecedf1966b" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36eeed9a-11b2-3e40-b45c-f27d47c07b49" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="b102c1c9-55ad-3c14-9a68-cbc0d8f4ce3e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fddcdf8b-5d06-31e6-ac2b-9c6d33f43cde" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="14dbfb61-eb2b-3998-a9a6-1f3b1321b897" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cb4eeea-d0d1-304b-94d7-0db8114cf905" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="c481c173-8deb-3d3d-adf5-7d96f888b074" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e46af16-688e-360a-b4c5-b96a505534e4" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="67af2e1b-8ae5-3c0d-83d1-3722dfb1459c" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c68aef27-fa6d-384c-a779-be2c2c6adbd7" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="09cfbb2d-ede9-36b4-9757-f45d2ecf409f" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6eefdb3c-efa3-3f5f-bea6-f87ae8f08743" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread4' uninitialized when declared" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="2" auth="yshi" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="53151a45-74fc-300d-86cd-140c7574509c" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9155f8d8-7120-3ee2-8e74-dae09822136f" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="c9ee7d4e-6119-3283-b408-b3c0fad9651f" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4234b585-8725-3d1d-a88a-39a2aafee807" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="147" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="147" sev="3" auth="yshi" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="c08b3499-3e03-3114-b7d2-acb7281fc458" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="644a6e83-7c17-37e7-a0ff-27f470c21d39" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-2033288726" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2033288726" unbViolId="19262e3c-4ec8-3a1d-817d-0aea272bc4d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="051c2677-ceea-3074-a010-73b907a94a9c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="4b190e33-1f5e-31ee-bb6e-56746e835d0c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32812855-4642-30d8-a4fc-e1d7917bf1b8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="0cacf34d-c4c0-3ed9-84af-274241f07c91" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="219256ea-3bb1-376b-9464-693bc60a12a8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-2033288726" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2033288726" unbViolId="a9c81be3-e23c-39bd-a3e9-fe98703739c7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f8e6ba0-256a-3e9c-9eb8-c7d51cb66328" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="10edf393-4ae3-31c1-9caf-15fcb646c3da" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b0ce2c2-fd19-3cd0-b3d4-7dbbe4f779b8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="bc24a23e-ef52-300b-a55d-73448f599137" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0246243f-e42f-35db-bd19-31135fa65a4c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="017d5d08-7852-3313-9bb8-577f0b6c871e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52b692c4-e30b-3dad-91a5-5fce3f1421b8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-2033288726" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="a7eaa565-e0c4-3cc6-9e99-fab50a6832cf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0a1f501-c553-3cea-a5d3-2a9c4ff6a1fb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="93cd3629-dc1a-3507-849f-3fd16b736165" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81f08f3f-0a7f-309b-b8d2-f968a5915683" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="6fbfde74-2803-35db-bdbe-314d3472828f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35787d3d-5f90-3ba5-a4ea-57540be1fe92" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="637af34c-2706-31b3-bb85-ae5a89079147" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="103428d4-61a6-3216-80cb-e4210579a50f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="8ef8c6fb-75dd-3c18-b53c-3ac5d0f4659a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9713501-1af0-3905-a2f6-b7036a430f57" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="de8eab37-9d20-35fd-9d12-e069072da864" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e85a816b-3803-33d4-b253-e121d533913b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="86ac6602-f01e-31be-b261-c5afc868448b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="225ddf7c-1a36-302d-9a97-49a440382b68" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="5a22e15f-3276-3da2-be65-761837cfd13f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7878c600-1920-3b9e-b074-2edbc20d2ea0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="08348a32-439a-3bcd-8c0e-cd7ed8b1e871" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f72a8ab-cbcc-3ddf-910b-c3e560e87d07" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-2033288726" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="2706e44b-a02e-3bd2-b420-1e3a6c303314" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af8b4f8f-266a-38c1-ac91-a42cb527a43c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-2033288726" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-2033288726" unbViolId="5276a9ff-e4b8-336d-a6a9-5de8e2d573cb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a162d410-d97a-3a5f-84db-e8d22acae6c5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="745054ad-2bc3-3077-8867-dfb35c083011" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cf8a312-d59f-30ab-ab80-11b1d9db31de" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="b1ef7c33-939b-364b-9a4e-54e27e8f5ce3" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a8c271f-a660-3998-957e-0feadf6eaa6a" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="ae556a28-4dee-3f9a-be15-0215450da4fd" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e83a57f3-697b-359a-be12-b06dc94b2da6" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="477488ec-c7fd-3b2c-b125-0e15ece553f9" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="032b910c-56cd-3b6c-9f9b-052d87ed43f9" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="0d944ea5-1cf6-39ae-a1ab-806ee85c9b2d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67ba81d0-c4e5-3ca5-913d-44eb8d5ed3d8" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="5ba029c6-2d42-368d-ba2e-1297dab59b32" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d9f2f88-3d34-3e9e-a22c-667cb4fc5251" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="3" auth="yshi" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="f76322a5-627f-3bc4-a710-4b0574e160da" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9a8c670-79f8-3a52-a530-0e10af8f8599" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-96" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="9b47e18c-598d-3b08-9b4d-8661d9bc0919" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8094c65-3031-3c9b-8efa-6e3448fc97c3" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="2c55c0fa-5cf2-3669-badd-a8a8e9e125af" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1515e541-0a6a-3a66-9e8a-d8e26e69f7c0" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="7768fd36-0298-320b-8ebe-a8eceb3d555e" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d82e6a5-1fc6-3f4d-b906-0e5c152e67db" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="d6f80c65-aeb4-3b69-b676-371759f45c5c" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb1cff91-7c49-3da2-93c1-9c5c6a2e7c7c" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="46bda2a0-c710-35a4-9f50-2b6ec48a44d5" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d2aa810-f20a-3f57-a057-9de655dfa8e5" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="5904fe91-2c59-3c86-a76c-8b6f17b08629" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="431c0375-cadc-399e-b9e9-bd7d711732cb" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="148" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="148" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="0688a299-0646-3692-9230-3704cd976580" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db8b3bc9-157b-3ef5-872a-cb5eaf2baf3d" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1824414877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1824414877" unbViolId="223758a9-db6b-30ce-a24e-ecf9aac74310" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbf3f4ec-5a32-3da9-ae9c-8db373c8e8c8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="fc518d92-5fe5-3ee2-be4d-30d5e5d6b443" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82fd4e54-7ae9-375c-b165-242905c796f7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="6e49c7ea-aed5-3c9a-b14a-d17ba71a4741" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="824ed124-8401-35bb-8cb6-d4e5cd20793f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-1824414877" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1824414877" unbViolId="02c0f52e-13c0-32b0-9a42-1bc410f0d732" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73828e13-2c19-31b8-9f31-875aa36d139f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="fd888f6b-6b4c-36be-bddc-909f01aedd18" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58aa7f9c-fd23-3a57-9be5-44759e3fadc0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="1e2a667b-8c62-34b3-9968-f1f2922611e9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54042089-89b7-3086-a9be-cbaaedeca4bc" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="e0467961-97f3-3293-bab3-844c297d2c5a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7823ee23-b46d-372e-be54-2d484f510451" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-1824414877" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="f831e269-ad32-386e-beb1-76b764c79267" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="226f79a9-0275-3ff9-b2e0-8f48a37d4578" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="f5e05e45-8926-35ac-95a8-bce4e7fd8b14" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fac5df1-6de2-3dbc-9dc1-60641e451d0f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="1f35de3e-874e-399a-a87b-718562f900aa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e82d295-c22b-3e03-9b6e-a8a154e9e2eb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="d28d1b00-6427-3c75-9836-543ee10ec51c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d01ec157-7430-3b8a-95a3-5e466f62a374" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="8bcfc940-d36d-32b3-ae9a-ab739fd2662e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc1e676a-6087-3974-bc79-1dbfb298aeec" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="b09207aa-9351-3887-a85d-d5d9e87a83f8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d97bcb3b-2cb1-3499-8164-aef4bc41cb13" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="6e15f39d-b6dc-3d2c-a100-df4015cf7ab2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69138719-21de-3aab-bbba-55d73829056b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="d70087f8-220d-3e31-8fac-9d3c841d693b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50bb6b9a-d1ad-39bd-9d58-a1bf0361f356" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="c5b56442-8109-3432-a0fc-8411e525d394" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f27572ab-84ec-302a-a8fc-7f2da7ec68ed" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1824414877" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="e90e6322-7f9e-30ce-8b51-dfa946168bac" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cddc5d3-cb78-36c7-8595-e9189c42efc1" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-1824414877" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1824414877" unbViolId="986fa2fe-530a-3453-a9d2-3afbfe5c15ca" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4cfc7a7-0239-39b5-bdf8-17782a7a882b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="9d37c91c-56e9-30ab-8d3b-b0bdf1f40643" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c1fef0a-8f6b-3089-89b5-1836bc73724f" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="a97a711a-e208-3c69-b8d0-393fdeccaa50" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcce26d3-9b42-3844-b20d-f3427b5e7e58" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="62cd1973-1b3a-3856-88cd-b3877e9f6889" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35c0f686-7eb5-39b1-8697-e89f10b69ddc" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="1f78661e-8269-3605-abfc-9ccd574e025b" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e908d02-25d8-3d27-b6c7-6661bcca7238" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="6177bef5-a356-3db9-8f72-008e2728661e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09859b45-01c4-309f-94f3-6a8d403ed61d" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="30fc58c0-ce16-3736-972e-678eab6d0ab6" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42001da4-60a5-3be7-b368-e6f30719c578" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="3" auth="yshi" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="7c331383-96a1-3403-b797-5e5bf1937645" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2e3f8ff-f9fc-3143-8047-92574daea4e1" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-96" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="0ad6363a-00a7-37de-979f-d341c1006484" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87015bf9-b3d4-3103-863e-e07cc105de44" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="665baa42-4230-3036-b11d-7dadc6917ebe" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f85bb85-c6b6-3704-8228-631f5f8cb4b6" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="725da0f4-ba5b-326f-9e83-ef7739e7dafc" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e38bc432-db03-36ff-96e7-b86cb761ce51" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="0ebeb0bd-9b2d-3830-ac1e-19fdd95ae7a8" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05d8fd3a-f3c8-31c9-9b45-706df01a1092" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="0f20a31c-639a-30d6-bb83-1e04d152f34b" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7055571a-fc94-3e56-a544-e072925b4021" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="6d0b311f-29af-3aab-b4ca-bdc4a974cb3c" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f915d81-bdd7-30f6-a5ec-5ffc31e58ec8" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="149" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="149" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="345db17d-9121-3536-a339-43cdd8ed6c28" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22dfe929-f964-3d3e-99e1-7a5b8b3bb9e3" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-1305984162" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1305984162" unbViolId="15972e8c-ed8b-3a9d-957c-43da70381bc2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9367aa59-1602-3ed3-a6ba-2370944ebd33" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="22fd22fb-ea5a-3e1f-9bfa-8506fc5680ee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a1d7991-ed5a-3595-a00e-32bebcd4ef93" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="ede7dc65-7427-3d5b-84b9-b8e0e17efdeb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3023ea6-e9d4-3dcf-a6d8-f07516bdc6a9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-1305984162" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1305984162" unbViolId="f642fdca-810d-3ac5-8263-22ee92e1788c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b06feb4-a9d8-3b98-afb5-385da3b9258f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="fa07c53e-70e4-37bf-8b61-964b7f4c97a1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72c12f39-ea8a-3cdf-a026-13c75df8a0c1" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="f29a645d-3b06-3168-a013-5d19fc51d051" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed81ef92-1b1c-3771-958b-123ad9bbec4a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="bad225e1-684c-32a8-8894-0d965e02ddd7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44624e38-cb04-3696-9198-a5a0ed60403a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-1305984162" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="445c04cb-5657-35a1-9acd-78488a8151dd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f4220c3-b7f8-34d5-b944-d708b7c8d14d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="132d641e-9ad6-3a92-8505-46719a1238c5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02091fbf-fd87-3a99-8d0a-da8730863a55" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="3e94f83e-e38f-3563-aa02-92b74b7f6623" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="261ac3ab-9204-3970-bcec-13cf1a14d591" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="4e0c0851-5156-3225-b0d4-372a6a047104" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1051be3b-9fa1-3596-b706-42c4781d9829" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="495e6f70-21d7-3e59-b47d-4fae13501623" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91c7bf1b-9978-3a40-8a1e-eff2c647534d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="b3ec6701-fada-3aa0-b25b-86bb8a7dfe56" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb205e08-130b-3a75-9b7e-95bb7cb51bd0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="57bdd211-b6d2-3e2a-b89e-0b335900f852" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="998f513f-4286-34f3-b5a5-c4ab9b6ba7bd" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="743c7d5a-14fc-31da-93d4-18a7661160a1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cc17f33-f517-3e38-9899-dc3bdc089dd6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="87df241a-9b47-343e-a811-0e9d01397a7a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11af9c73-444c-3c33-a200-1ada1f0f28e4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1305984162" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="327cf6df-2e49-3ec7-b287-e035468822d8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3fdf58e-48b6-3e2b-9576-3c65eb8cc4ce" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-1305984162" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1305984162" unbViolId="c903dd40-ba78-3135-81a0-40953d6e2aa3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d02ada60-fdce-3d21-8054-c44383723b93" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="7c544a66-3a79-310a-bac8-4acd208e43a8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7904a7d9-951b-3b4f-b2e4-2569b321844e" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="d60d6326-2dbe-30ef-a657-4bef78a1ae7a" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d71db9bb-faaa-33a8-a34b-036e04b80696" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="6cddf534-b25f-3763-9c3c-307dc1b58e2b" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb5199b5-a101-3dc6-b04b-e78bfa728b67" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="ee098a60-6d6d-3af0-b47e-c70d049e10f1" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60f769ed-3c3d-32f1-bcb6-f79a64915de3" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="0b3e61ab-7660-34fb-8991-3467ae9fd1b2" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d7540d8-6464-3ebe-82c9-4ed1211d49f2" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="05b48ae0-e428-3f62-a9a4-e1c1327f114e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53487066-3c0c-3d5e-9858-6858ca625ee4" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="3" auth="yshi" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="6d368f01-7429-33b7-89f2-51a06b00bf31" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5107ff7a-05fc-3662-9f9e-2f6acd6b2736" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-96" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="57ebb238-223c-3591-bd92-50ee5298f63d" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c9d6b93-6c84-31f3-81fc-c4499b990538" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="dda5c161-c4db-3a5c-a324-0ad872c9fc85" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7800f9b2-252b-39b2-8e2a-fc0a0b39fa6b" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="9a893da4-cbda-3442-9857-702ce5d04d3e" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba4f7dec-3f21-34cf-9676-a6fb95c535e2" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="a11a4092-161c-3d6b-afbf-115968c50cc4" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d91a0eb9-b325-3314-85ef-f4f98653c0c3" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="782e7c7e-b948-3524-988e-ca334ba93059" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9eca292b-a94e-3804-952c-2dd9c413a194" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="e4bd0995-bf58-37cf-9e6e-e69077320b8a" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="318140f8-6b84-321e-a0bf-21ec6e3c549b" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="150" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="150" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="8c52c4b4-c6e8-323b-8eeb-b12f6c1174e1" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9953e975-ec56-37db-b6a6-0a84d269d092" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="4" auth="yshi" locRef="4" rule="JSF-043" lnHash="-604051279" rule.header="Tabs should be avoided" tool="c++test" lineHash="-604051279" unbViolId="16beb744-5460-3326-8033-e72ba0818295" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ff55e49-a4d4-3c27-a3e3-10508ef229af" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="5" auth="yshi" locRef="4" rule="FORMAT-01" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="4e7ff2c0-d128-38f0-8b26-ba4437113035" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9aa955e-96fc-3a04-bdc5-24672a47fec9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="5" auth="yshi" locRef="4" rule="HICPP-2_1_1-a" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="5f618d20-9aa8-3159-8cdd-81243a8e0c49" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5a1efc3-210f-3c22-9d74-189acaaf042b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="151" goals="0," /><StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="5" auth="yshi" locRef="4" rule="CODSTA-CPP-23" lnHash="-604051279" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-604051279" unbViolId="2593e99f-1c1e-3fd4-be9d-f65ec44f0d4c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a67df2a-4ecc-3426-9409-c0bb4d3b778e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="8fdf3905-d0d2-3a3d-b3b4-b14fc8d4fdb8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95b6b792-a113-3885-8a95-d9564e113b37" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-58" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="ee55b98d-e0b7-3f4b-9b53-72f136ec6212" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd280f89-2268-35d1-a80e-a3e39307314c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_1_7" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="4c1eeb69-9412-342d-8e87-c62fbd85caa9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e53d9cab-f112-39dd-90a3-0a0800708859" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="4" auth="yshi" locRef="4" rule="JSF-115_a" lnHash="-604051279" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="82106862-1362-30bb-8cdd-abf4cf7c8c15" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="675613cb-8e22-331d-8f32-995d01e56db0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="3" auth="yshi" locRef="4" rule="CODSTA-122_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="6010912b-a7a1-33f4-afdc-5a52deaa6692" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f53e779c-df14-34b0-b22b-e3ad71bbbbdc" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="1" auth="yshi" locRef="4" rule="CERT_C-ERR33-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="b4e3030c-109b-3c3a-8a40-060eb7d862ed" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6852ba9f-b68d-35a8-8fb7-eafa10695e40" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="1" auth="yshi" locRef="4" rule="CERT_C-POS54-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="76fe5ef2-96a8-3df0-b005-1f42d34d79a2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a7c25fd-897f-38ac-988d-8ec0c8a1c1e6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="6f2eadb9-bcba-375a-8a24-c0932d05616c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f20e4cc5-dcdc-39c4-9911-c809a4a17256" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="3" auth="yshi" locRef="4" rule="CERT_C-EXP12-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="b429b939-6c37-361f-9e50-3661d1241908" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ef068f0-3044-34ab-888f-2cbaa691bb9c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="be0724ad-da45-3f9f-8030-f03b26809baa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6de91856-c76c-375f-bb9a-aa6af553dc6b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="3" auth="yshi" locRef="4" rule="MISRA2004-16_10" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="fb91a330-4e20-3eb6-96f2-ed5f582a8dcc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71fe6219-7b57-3003-b11d-27c716de66cb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="ce4dc451-f573-36b7-b486-f2a096d4fcf5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62ac1785-0f14-348d-9b58-e7613a96344f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="MISRA2008-0_3_2" lnHash="-604051279" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="c83545a1-05b1-36a7-852e-a9ce7eac9c14" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e970a131-1b4e-328f-ad0d-2a3bcb3fb9f8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="3" auth="yshi" locRef="4" rule="JSF-115" lnHash="-604051279" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-604051279" unbViolId="17f3f8e0-a6d7-38e1-b830-8e5ed7dcf7b5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a544a96b-ed56-3c8f-8ec1-98b2ecba1057" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," /><StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="25cbb82b-6ac4-3cc6-b3f7-a92f0dabafbe" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8e10cfa-22c1-343a-af13-70b0844afa2c" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="c55d6754-bc73-3b1c-8f84-abf835a1883e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f87c713e-b9aa-3221-b44f-59cf98a1b402" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="9e04bc95-a152-3eef-a7c4-b3c4d3f87f14" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1e34160-5968-3491-9ee5-4b00198e82e8" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="bc5b7d8a-3233-320c-93ef-c80b2c8edbb0" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf7db628-f59c-3472-b354-ff6da4991d7a" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="002a608d-b9ea-38e1-8056-db51e1facdb3" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e398ff94-39b4-35b8-905f-7360daf134e9" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="95a4a791-74c8-38b7-9064-9ade6910eedf" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4e3279e-f508-3d82-b9d3-143c08425e3b" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="3" auth="yshi" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="7ca25d83-dca3-3e8a-b79e-a3f13966cbf1" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc4a937a-f26e-3d39-b242-cce6e85ec760" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="3" auth="yshi" locRef="4" rule="CODSTA-CPP-96" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="b0ccc542-6894-334c-820a-e6a49102503c" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4e69bc6-7dbc-3ada-b922-409abb97c159" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="29355306-2a1c-3cfc-8bd6-3a0824504206" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c190eb0f-1027-356c-b6ac-6d735c60f5ef" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="4" auth="yshi" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="973338a4-8dcf-3ea8-9ab4-b279470e23ba" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5850391-4eb3-3ccd-8219-e1f5373b5d3c" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="4" auth="yshi" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="419c43f2-79fe-33e8-8d90-a93fb697cb14" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6ab9957-ae01-3c19-a9b9-7c0c51cfb2f0" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="3" auth="yshi" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="7fbe26da-1241-3f54-ab03-5a9b72147152" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19668636-2ef5-3c24-abc1-729ef8edec87" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="7103bf46-4808-3b1c-8ebf-aa772e3afe6d" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c06e8cd-b72a-3f0e-9613-0013403137f8" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="151" locFile="/FlowAnalysisCpp/DeadLock.cpp" locStartln="151" sev="2" auth="yshi" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="f1d33d13-d8ff-3119-903c-0feb66276e55" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af8deba4-6bee-3bdc-853b-dc9270554b43" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," /></StdViols>
      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="2468">
            <Project id="FlowAnalysisCpp" name="FlowAnalysisCpp" supp="0" total="2468">
               <Res loc="/FlowAnalysisCpp/NullPointer.cpp" locRef="1" locType="sr" name="NullPointer.cpp" supp="0" total="178" />
               <Res loc="/FlowAnalysisCpp/DivisionByZero.cpp" locRef="2" locType="sr" name="DivisionByZero.cpp" supp="0" total="98" />
               <Res loc="/FlowAnalysisCpp/MemoryLeak.cpp" locRef="3" locType="sr" name="MemoryLeak.cpp" supp="0" total="324" />
               <Res loc="/FlowAnalysisCpp/DeadLock.cpp" locRef="4" locType="sr" name="DeadLock.cpp" supp="0" total="1868" />
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
